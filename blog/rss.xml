<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="rss.xsl"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Alex Birdsall Blog</title>
        <link>https://ambirdsall.com/blog</link>
        <description>Alex Birdsall Blog</description>
        <lastBuildDate>Mon, 05 Aug 2024 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Why is date formatting so hard in vanilla JS?]]></title>
            <link>https://ambirdsall.com/blog/vanilla-js-date-formatting</link>
            <guid>https://ambirdsall.com/blog/vanilla-js-date-formatting</guid>
            <pubDate>Mon, 05 Aug 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Editor's note: this was written before the new, long-overdue [Temporal]]></description>
            <content:encoded><![CDATA[<blockquote>
<p>Editor's note: this was written before the new, long-overdue <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Temporal" target="_blank" rel="noopener noreferrer"><code>Temporal</code>
API</a>
was announced. Better days are almost here!</p>
</blockquote>
<p>Suppose you want to deal with some dates while building a website. You don't want to roll
your own input parsing, so you use <code>new Date(inputDateString)</code>; and you want to output
datestrings in a format that's clear, readable<sup><a href="https://ambirdsall.com/blog/vanilla-js-date-formatting#user-content-fn-1-2950b4" id="user-content-fnref-1-2950b4" data-footnote-ref="true" aria-describedby="footnote-label">1</a></sup>, and (while we're making a wish list)
sorts the same both lexically and chronologically. That is: you want <code>YYYY-MM-DD</code>. Surely
<em>that</em> is built in, right?</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="wrong">wrong<a href="https://ambirdsall.com/blog/vanilla-js-date-formatting#wrong" class="hash-link" aria-label="Direct link to wrong" title="Direct link to wrong">​</a></h2>
<p>Oh. Wait, really? Ugh, fine.<!-- --> Just <code>npm install date-fns</code> or <code>dayjs</code> or <code>moment</code> or</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="youre-seriously-going-to-make-every-user-download-a-whole-library-just-to-create-one1-common-date-format-with-no-time-zone-logic">you're seriously going to make every user download a whole library just to create one(1) common date format with no time zone logic.<a href="https://ambirdsall.com/blog/vanilla-js-date-formatting#youre-seriously-going-to-make-every-user-download-a-whole-library-just-to-create-one1-common-date-format-with-no-time-zone-logic" class="hash-link" aria-label="Direct link to you're seriously going to make every user download a whole library just to create one(1) common date format with no time zone logic." title="Direct link to you're seriously going to make every user download a whole library just to create one(1) common date format with no time zone logic.">​</a></h2>
<p>FINE. Fine. No.</p>
<p>At first, I was tempted to cast the date to a predictable, standardized format and then reach for <del>good</del> old-fashioned string manipulation:</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:#d73a49">datestamp</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token parameter">date</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">Date</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">date</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">toISOString</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">slice</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>But verifying the correctness of that function entails</p>
<ol>
<li>remembering/inferring/guessing that <code>Date.prototype.toISOString</code> returns an ISO-8601-formatted date;</li>
<li>remembering that ISO 8601 dates start <code>YYYY-MM-DD</code>;</li>
<li>remembering that the ISO 8601 format zero-pads single-digit month and day fields; and</li>
<li>walking through a date string counting characters on your fingers like a neanderthal.</li>
</ol>
<p>Dear reader, you deserve better than that. You deserve a built-in <code>strftime</code>-style formatting utility! But since you can't have that, here's a reasonably robust, flexible pattern you can use to extract named, semantically-meaningful parts of the date you can slep into whatever template string you want:</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:#d73a49">datestamp</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token parameter">date</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> year</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> month</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> day </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">Intl</span><span class="token class-name punctuation" style="color:#393A34">.</span><span class="token class-name">DateTimeFormat</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword nil" style="color:#00009f">undefined</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">year</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"numeric"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">month</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"2-digit"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">day</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"2-digit"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">formatToParts</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">Date</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">date</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">filter</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">part</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> part</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">type</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!==</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"literal"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">reduce</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">acc</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> part</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      acc</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">part</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">type</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> part</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">value</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> acc</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">${</span><span class="token template-string interpolation">year</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">}</span><span class="token template-string string" style="color:#e3116c">-</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">${</span><span class="token template-string interpolation">month</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">}</span><span class="token template-string string" style="color:#e3116c">-</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">${</span><span class="token template-string interpolation">day</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">}</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<!-- -->
<section data-footnotes="true" class="footnotes"><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5 sr-only" id="footnote-label">Footnotes<a href="https://ambirdsall.com/blog/vanilla-js-date-formatting#footnote-label" class="hash-link" aria-label="Direct link to Footnotes" title="Direct link to Footnotes">​</a></h2>
<ol>
<li id="user-content-fn-1-2950b4">
<p>What's more, you want people the world over to be able to unambiguously parse your output as <em>the same</em> date, even if happens to be before the 13th day of its month. <a href="https://ambirdsall.com/blog/vanilla-js-date-formatting#user-content-fnref-1-2950b4" data-footnote-backref="" aria-label="Back to reference 1" class="data-footnote-backref">↩</a></p>
</li>
</ol>
</section>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[On that fractal triforce thing there]]></title>
            <link>https://ambirdsall.com/blog/on-the-sierpinski-triangle-thing</link>
            <guid>https://ambirdsall.com/blog/on-the-sierpinski-triangle-thing</guid>
            <pubDate>Thu, 09 May 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Let's talk a little about how (and why) I built this:]]></description>
            <content:encoded><![CDATA[<p>Let's talk a little about how (and why) I built this:</p>
<div class="triangle"></div>
<!-- -->
<p>Play around with it a little—it's kind of cool, right? I can never decide if I prefer the
sparsely- and densely-populated version.</p>
<p>It's also sentimental for me. Let's go back in time a little: in 2013, I was earning an
extremely meager living running an after-school art program at a local elementary school.
My original dream of a tenure-track professorship in the humanities had foundered on the
sharp realities of the great recession and the increasingly exploitative academic job
market for teachers of every subject that lacked a corresponding industry to provide
negotiating leverage. I had no clue what might be a sustainable long-term career, but I
knew that status quo wasn't it; and though I love children, after spending so many of my
waking hours dealing with 10-year-olds and their  10-year-old thoughts, I could feel the
sharp edges of my brain beginning to dull <sup><a href="https://ambirdsall.com/blog/on-the-sierpinski-triangle-thing#user-content-fn-1-8ec768" id="user-content-fnref-1-8ec768" data-footnote-ref="true" aria-describedby="footnote-label">1</a></sup>. I needed to find something I could do with
my brain that would be</p>
<ol>
<li>difficult enough to be interesting, and</li>
<li>remunerative;</li>
</ol>
<p>and by and by my search lead me to enroll in CS101 at a local community college. I didn't enroll with the thought of becoming a programmer per se—I just thought it would help if I ended up doing any kind of work crunching numbers. But I loved it, I was good at it, and it really did transform my life. But this isn't about all that: this is about an Extremely Cool demo the teacher ran one day in class.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="the-setup">The setup<a href="https://ambirdsall.com/blog/on-the-sierpinski-triangle-thing#the-setup" class="hash-link" aria-label="Direct link to The setup" title="Direct link to The setup">​</a></h2>
<p>The teacher walked us through a very simple C++ program. It imported some graphics library
headers, the details of which were glossed over (it was a 101 course, after all), and then
defined a very simple initial state:</p>
<ol>
<li>a small cartesian grid</li>
<li>an array of three points on that grid corresponding to the vertices of a triangle, each defined as a two-element array of <code>float</code>s</li>
<li>another point near the middle of the other three, assigned to a variable like <code>currentPoint</code></li>
</ol>
<p>If we were to stop here and only render the initial state, it would look something like this:</p>
<div class="triangle big-bottom"></div>
<p>Not very exciting yet, I admit.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="complex-behaviors-can-emerge-from-simple-rules-or-lets-hang-some-mathy-flesh-on-those-bones">Complex behaviors can emerge from simple rules, or: let's hang some mathy flesh on those bones<a href="https://ambirdsall.com/blog/on-the-sierpinski-triangle-thing#complex-behaviors-can-emerge-from-simple-rules-or-lets-hang-some-mathy-flesh-on-those-bones" class="hash-link" aria-label="Direct link to Complex behaviors can emerge from simple rules, or: let's hang some mathy flesh on those bones" title="Direct link to Complex behaviors can emerge from simple rules, or: let's hang some mathy flesh on those bones">​</a></h2>
<p>To expand on this rather spartan, boring starting point, there was a single <code>for</code> loop, which did the following steps a few thousand times:</p>
<ol>
<li>select a random element from the array of vertices</li>
<li>calculate the coordinates of the point halfway between <code>currentPoint</code> and that vertex</li>
<li>reassign <code>currentPoint</code> to that new point</li>
<li>draw the new <code>currentPoint</code></li>
</ol>
<p>Very simple stuff, maybe 15 lines of code total. A well-read observer may recognize this
as a simple variant of <a href="https://en.wikipedia.org/wiki/Chaos_game" target="_blank" rel="noopener noreferrer">the chaos game</a>
algorithm; at the time, I didn't recognize shit. But I am the child of a math teacher and
an older millenial who has been playing Zelda games since the delirious days of Clinton vs
Dole vs Perot, short pants, and gold NES cartridges: the teacher compiled the script, ran
the binary, and it sparked joy:</p>
<div class="triangle big-bottom"></div>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="but-is-it-web-scale">But is it Web Scale?<a href="https://ambirdsall.com/blog/on-the-sierpinski-triangle-thing#but-is-it-web-scale" class="hash-link" aria-label="Direct link to But is it Web Scale?" title="Direct link to But is it Web Scale?">​</a></h2>
<p>So, we have the core algorithm for drawing a cool little fractal triforce. Now to stick in in a website!</p>
<p>I made a few artistic choices:</p>
<ol>
<li>inverting the triangle makes it look like it's pointing down at the content below in a nice way</li>
<li>naively adding points fills in the triangle with monotonically increasing density, the visual effect of which has sharply diminishing returns; pushing the points into a FIFO queue with a max size preserves the negative space it needs to look sparse, dynamic, and alive</li>
<li>I wanted users to be able to  interactively adjust the number of dots in the visualization: it leans into the dynamic nature of the web as a medium; it allows folks to experience both the frenetic movement and staticky geometric ambiguity of a sparsely-populated queue of points and the fractal beauty of a denser one; and it shows potential employers that I am reasonably competent at connecting user inputs to dynamic logic, which, I mean, ain't nothing.</li>
<li>The gold color (<code>#aa9668</code>, for those of you who are curious but don't actually want to pin down an ephemeral svg <code>&lt;circle&gt;</code> in your browser's devtools) goes nicely with the rest of the site</li>
</ol>
<p>The last order of business, then, was to actually render those dots. This site is built on
top of a react-based static site generator; while there is a lot to like about react, it's
not a great choice for making performant little mathy visualizations. I decided to use d3
for that. However, d3 and react both want to control the rendering of your html. How to
make them play nicely together? Like this:</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword module" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">default</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function maybe-class-name" style="color:#d73a49">D3Wrapper</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter punctuation" style="color:#393A34">{</span><span class="token parameter"> d3RenderFn</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> className </span><span class="token parameter punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// d3 needs an actual DOM node to do its thing on, so let's give it one</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> el </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">useRef</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword null nil" style="color:#00009f">null</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// Render the d3 visualization. If the d3 visualization is already in the DOM, though,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// do not recreate it; this avoids duplicated element shenanigans with hot module</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// reloading during development.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">useEffect</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token dom variable" style="color:#36acaa">window</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">d3Embeds</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token dom variable" style="color:#36acaa">window</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">d3Embeds</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">Map</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token dom variable" style="color:#36acaa">window</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">d3Embeds</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">get</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">d3RenderFn</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token function" style="color:#d73a49">d3RenderFn</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">el</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">current</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token dom variable" style="color:#36acaa">window</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">d3Embeds</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">set</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">d3RenderFn</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">d3RenderFn</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">div className</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">className</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> ref</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">el</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">/</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>And really, that's it. A cute little bit of web-based art that makes me happy.</p>
<!-- -->
<section data-footnotes="true" class="footnotes"><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5 sr-only" id="footnote-label">Footnotes<a href="https://ambirdsall.com/blog/on-the-sierpinski-triangle-thing#footnote-label" class="hash-link" aria-label="Direct link to Footnotes" title="Direct link to Footnotes">​</a></h2>
<ol>
<li id="user-content-fn-1-8ec768">
<p>I should note here that this is not a fundamental fact of dealing with kids: parents and school teachers have the chance (the obligation, even) to engage more deeply with their kids, and tracking those longer-term educational goals to the kids' intellectual and emotional development provides as deep an intellectual challenge as you care to make it. Hanging out for two hours doodling on butcher paper and helping with the stultifying abolination that is second-grade homework <sup><a href="https://ambirdsall.com/blog/on-the-sierpinski-triangle-thing#user-content-fn-2-8ec768" id="user-content-fnref-2-8ec768" data-footnote-ref="true" aria-describedby="footnote-label">2</a></sup>, though? I needed more. <a href="https://ambirdsall.com/blog/on-the-sierpinski-triangle-thing#user-content-fnref-1-8ec768" data-footnote-backref="" aria-label="Back to reference 1" class="data-footnote-backref">↩</a></p>
</li>
<li id="user-content-fn-2-8ec768">
<p>Up until <em>at least</em> the start of adolescence, children's intellectual and social development requires free, exploratory play, not rote drilling of skills; and their emotional and executive regulation is not strong enough to get any long-term benefit from the discipline of finishing their daily assignments. But by all means, if you want to force parents to force their kids into boring, tedious chorework, keep it coming! <a href="https://ambirdsall.com/blog/on-the-sierpinski-triangle-thing#user-content-fnref-2-8ec768" data-footnote-backref="" aria-label="Back to reference 2" class="data-footnote-backref">↩</a></p>
</li>
</ol>
</section>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Rewriting a middleman site with gatsby]]></title>
            <link>https://ambirdsall.com/blog/cut-out-the-middleman</link>
            <guid>https://ambirdsall.com/blog/cut-out-the-middleman</guid>
            <pubDate>Thu, 05 Dec 2019 00:00:00 GMT</pubDate>
            <description><![CDATA[It came to pass that after 3 years of neglect, I wanted to revive my old]]></description>
            <content:encoded><![CDATA[<p>It came to pass that after 3 years of neglect, I wanted to revive my old
website. I figured I'd add a post or two, maybe tweak a few things about the
HTML and CSS, and then I could rewrite it in a different stack at my leisure.
I think a lot of things that are wrong, though.</p>
<!-- -->
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="problem-i-had-a-new-computer-and-my-webpage-had-a-fussy-development-env">Problem: I had a new computer and my webpage had a fussy development env;<a href="https://ambirdsall.com/blog/cut-out-the-middleman#problem-i-had-a-new-computer-and-my-webpage-had-a-fussy-development-env" class="hash-link" aria-label="Direct link to Problem: I had a new computer and my webpage had a fussy development env;" title="Direct link to Problem: I had a new computer and my webpage had a fussy development env;">​</a></h2>
<p>I tried to run the development build, but ran into an error: I needed the right
ruby version. I've never done ruby development on this operating system, so I
don't have any tool in place to manage ruby versions. To fix things, I needed to
install one of <code>chruby</code>/<code>rbenv</code>/<code>rvm</code>; setup <code>nix</code> or <code>guix</code> with <code>direnv</code>; or
maybe I could use <code>asdf</code> or fuck if I know what the cool kids are doing these
days. Oy, what a hassle. Still, I eventually got on the version of ruby
specified in the Gemfile and I got a different error. Progress, right?</p>
<p>I needed to upgrade bundler, so I ran <code>bundle update --bundler</code>. This, it seems,
overshot the mark: I needed to downgrade bundler, which is a bigger hassle than
upgrading. Whatever: I uninstalled the new version and installed the specific
older one that was compatible with the rest of the project.</p>
<p>With this, I could actually run the site locally! All was not well, though: it
looked like crap. It turned out that only some of the stylesheets I was loading
from a ruby gem were available in practice, and the icon font I had been using
was nowhere to be found<sup><a href="https://ambirdsall.com/blog/cut-out-the-middleman#user-content-fn-1-3fbbcd" id="user-content-fnref-1-3fbbcd" data-footnote-ref="true" aria-describedby="footnote-label">1</a></sup>. At this point, I gave up: none of these problems were
insurmountable, but why go to all that effort when I wanted to rewrite it
anyway?</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="and-having-been-exposed-to-jsx">and, having been exposed to JSX,<a href="https://ambirdsall.com/blog/cut-out-the-middleman#and-having-been-exposed-to-jsx" class="hash-link" aria-label="Direct link to and, having been exposed to JSX," title="Direct link to and, having been exposed to JSX,">​</a></h2>
<p>In the ruby version, I used <code>.erb</code> files to handle dynamic data and a few bits
of html boilerplate. The way <code>.erb</code> files treat the non-logic contents as a dumb
text stream, not something with a tree structure, makes it fundamentally a worse
fit for modeling HTML than the tree structure of JSX templates<sup><a href="https://ambirdsall.com/blog/cut-out-the-middleman#user-content-fn-3-3fbbcd" id="user-content-fnref-3-3fbbcd" data-footnote-ref="true" aria-describedby="footnote-label">2</a></sup>. Having
worked with react and angular, I don't want to go back to the bad old days of
wrangling HTML as raw text, I want to compose and encapsulate HTML using
components; and having used JSX, embedding the structural logic of the template
within the content has begun to feel inside out. I didn't want to use another
templating system.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="and-wanting-to-maintain-a-statically-generated-site">and wanting to maintain a statically-generated site,<a href="https://ambirdsall.com/blog/cut-out-the-middleman#and-wanting-to-maintain-a-statically-generated-site" class="hash-link" aria-label="Direct link to and wanting to maintain a statically-generated site," title="Direct link to and wanting to maintain a statically-generated site,">​</a></h2>
<p>(While <code>create-react-app</code> is dope and all, there is zero dynamic content on this
whole site.)</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="the-choice-of-gatsby-seemed-good-so-i-set-to-work">the choice of gatsby seemed good, so I set to work.<a href="https://ambirdsall.com/blog/cut-out-the-middleman#the-choice-of-gatsby-seemed-good-so-i-set-to-work" class="hash-link" aria-label="Direct link to the choice of gatsby seemed good, so I set to work." title="Direct link to the choice of gatsby seemed good, so I set to work.">​</a></h2>
<p>First I made the page shell; that was just porting some html to react
components. It happened that all I needed were well-documented, <a href="https://www.gatsbyjs.org/plugins/" target="_blank" rel="noopener noreferrer">easily
searchable plugins</a> to <a href="https://www.gatsbyjs.org/packages/gatsby-transformer-remark/" target="_blank" rel="noopener noreferrer">render
markdown</a>
into pages via a template; with <a href="https://www.gatsbyjs.org/packages/gatsby-remark-prismjs/" target="_blank" rel="noopener noreferrer">colorized code
blocks</a>;
with <a href="https://www.gatsbyjs.org/packages/gatsby-remark-autolink-headers/" target="_blank" rel="noopener noreferrer">autolinked
headers</a>;
with
<a href="https://www.gatsbyjs.org/packages/gatsby-remark-footnotes/" target="_blank" rel="noopener noreferrer">footnotes</a>.</p>
<p>As a sidenote, pour one out for good sidenotes. I'm still holding out hope I
find a decent plugin I can use to finagle sidenotes from markdown without
needing to go all the way on some Tufte CSS theme. I don't think I'm likely to
go to the effort of coding one up myself anytime soon, though.</p>
<p>Anyway, I had the existing posts rendering acceptably to HTML from pure
markdown, getting autolinking and asides without needing any .erb equivalent.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="i-had-to-figure-out-how-to-sort-a-list-of-posts">I had to figure out how to sort a list of posts;<a href="https://ambirdsall.com/blog/cut-out-the-middleman#i-had-to-figure-out-how-to-sort-a-list-of-posts" class="hash-link" aria-label="Direct link to I had to figure out how to sort a list of posts;" title="Direct link to I had to figure out how to sort a list of posts;">​</a></h2>
<p>This was straightforward: I wanted to group by topic, sort each topic by date,
and sort the set of topics by date of most recent post. All the data I needed
was easily queryable from the markdown frontmatter via graphQL. You'll notice
that the remark plugin which renders the markdown exposes the list of rendered
posts under a property named <code>edges</code> and, to be honest, I'm not sure why: the
name seems to describe the data's underlying topology rather than its API.
Whatever.</p>
<div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// the page component's props are destructured like so:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// ({</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">//   data: {</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">//     allMarkdownRemark: { edges },</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">//     site: { siteMetadata: { title }},</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">//   },</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// })</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> postsByTopic </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> edges</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">filter</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">e</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!</span><span class="token plain">e</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">node</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">frontmatter</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">draft</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">map</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">e</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> e</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">node</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">reduce</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">topics</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> n</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> topic </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> n</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">frontmatter</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// nobody likes to evaluate `undefined.push(n)`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    topics</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">topic</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> topics</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">topic</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">?</span><span class="token plain"> topics</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">topic</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    topics</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">topic</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">push</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">n</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    topics</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">topic</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">sort</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">a</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> b</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">newestFirst</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> b</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> topics</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Order the topics by date of most recent post</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token maybe-class-name">Posts</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token known-class-name class-name">Object</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">values</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">postsByTopic</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">sort</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">a</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> b</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">newestFirst</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">a</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> b</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">map</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">renderSingleTopic</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Before you ask, yes, I know that sorting topics each time a new post is added is
an <code>O(n²)</code> algorithm, yes, I know that's improvable, and no, I don't care to
make it more efficient: posts are sorted once at build time, and I'd have to
publish a post ever day for years (if not decades) before that <code>n</code> gets big
enough to be a problem. When efficiency is not important, always take the
approach that's simplest to understand.</p>
<p>I found it was significantly nicer to do the filtering in javascript than ruby.
I was surprised by that, because I really love ruby's <code>Enumerable</code> methods. But
js objects are up with cons cells among my very favorite data structures to work
with, first-class functions make custom sorting comparators easy to add as
arguments, and <code>Array.prototype</code> methods are just as chainable as
<code>Enumerable</code>s<sup><a href="https://ambirdsall.com/blog/cut-out-the-middleman#user-content-fn-4-3fbbcd" id="user-content-fnref-4-3fbbcd" data-footnote-ref="true" aria-describedby="footnote-label">3</a></sup>. The definition of that <code>newestFirst</code> comparator function is
left as an exercise to the reader, that's already a fair chunk of code.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="then-how-to-update-the-d3-triangle-thing-to-modern-d3-using-es6-imports">then how to update the d3 triangle thing to modern d3 using es6 imports<a href="https://ambirdsall.com/blog/cut-out-the-middleman#then-how-to-update-the-d3-triangle-thing-to-modern-d3-using-es6-imports" class="hash-link" aria-label="Direct link to then how to update the d3 triangle thing to modern d3 using es6 imports" title="Direct link to then how to update the d3 triangle thing to modern d3 using es6 imports">​</a></h2>
<p>This wasn't too bad: I changed all the <code>var</code> statements to <code>const</code>; fixed the
one variable I mutate in place (it's the easiest way to implement the algorithm)
to use <code>let</code> instead; and imported <code>d3</code>. Modern versions of <code>d3</code> export their
constituent parts as named exports, for ease of tree-shaking, so I had change
the code to import the functions I actually used instead of relying on the <code>d3</code>
object to have everything. <code>d3.scale.linear()</code> had become <code>d3.scaleLinear()</code>,
but otherwise this was a pretty mechanical translation.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="then-how-to-embed-a-d3-controlled-element-in-a-react-component">then how to embed a d3-controlled element in a react component<a href="https://ambirdsall.com/blog/cut-out-the-middleman#then-how-to-embed-a-d3-controlled-element-in-a-react-component" class="hash-link" aria-label="Direct link to then how to embed a d3-controlled element in a react component" title="Direct link to then how to embed a d3-controlled element in a react component">​</a></h2>
<p>Figuring this part out was kind of fun! The basic 2-step to mounting a
self-contained <code>d3</code> visualization inside of a react app:</p>
<ol>
<li><code>const domElementRef = useRef(null)</code></li>
<li><code>useEffect(() =&gt; d3.select(domElementRef.current).doStuffWith(props.data), [props.data])</code></li>
</ol>
<p>That's the general approach, since usually a <code>d3</code> visualization is based on some
input data and should rerender when and if the data changes; mine uses
randomly-generated data, though, so I didn't even need the dependency array.</p>
<p>Regardless, it's much nicer to do with hooks than lifecycle methods, where you'd
need to use both <code>componentDidMount</code> and <code>componentDidUpdate</code> to ensure the
visualization ran at all the appropriate times.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="and-then-i-had-a-site">and then I had a site!<a href="https://ambirdsall.com/blog/cut-out-the-middleman#and-then-i-had-a-site" class="hash-link" aria-label="Direct link to and then I had a site!" title="Direct link to and then I had a site!">​</a></h2>
<p>I hope you like it.</p>
<p>It is very popular to try to dunk on the javascript ecosystem in various parts
of programmer culture<sup><a href="https://ambirdsall.com/blog/cut-out-the-middleman#user-content-fn-2-3fbbcd" id="user-content-fnref-2-3fbbcd" data-footnote-ref="true" aria-describedby="footnote-label">4</a></sup>, and one of the very most popular ways is to clown on
the size of the <code>node_modules</code> directory. Since <code>npm</code> installs every package on
a per-project basis; since it errs on the side of having multiple (potentially
incompatible) versions of transitive dependencies rather than forcing you to
just choose one; and since javascript itself has a very small standard library,
leading to heavy use of library code; it's common to have large <code>node_modules</code>
directories on your hard drive. Clown all you want, but the self-containment of
that approach would have saved me a bunch of hassle here. Or maybe I just had a
badly-written <code>Gemfile</code>.</p>
<p>I have the strong impression that this is at least in
part sub-rosa sexism: frontend work, being user-facing and visual, fits
stereotypes of women's work, and indeed many female programmers are channeled
into frontend work regardless of their specific interests or abilities.
Neckbeards huddle together discussing the manly arts of functional programming,
asynchronous logic, optimizing dependency graphs, and distributed computing,
never pausing to consider that those are all part and
<a href="https://parceljs.org/" target="_blank" rel="noopener noreferrer">parcel</a> of frontend work. But I digress.</p>
<p>I have an intuition that this has to do with the ol' Chomsky hierarchy,
akin to how regular expression can scan text streams in sophisticated ways but
can't validate structural features like valid nesting or pairing.</p>
<p>A rant: what the fuck is up with how <code>sort</code> mutates the array in place?
It's totally out of character with the rest of the <code>Array.prototype</code> chainable
methods, which return new arrays, and its idiosyncracy offers no benefit: it's
just a footgun which makes it easy to mutate your application data behind your
own back. I realize backwards compatibility means we're stuck with a mutating
<code>sort</code>, but I really do think the next iteration of the language should add a
new <code>Array.prototype.sorted</code> method which returns a new sorted array.</p>
<!-- -->
<section data-footnotes="true" class="footnotes"><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5 sr-only" id="footnote-label">Footnotes<a href="https://ambirdsall.com/blog/cut-out-the-middleman#footnote-label" class="hash-link" aria-label="Direct link to Footnotes" title="Direct link to Footnotes">​</a></h2>
<ol>
<li id="user-content-fn-1-3fbbcd">
<a href="https://ambirdsall.com/blog/cut-out-the-middleman#user-content-fnref-1-3fbbcd" data-footnote-backref="" aria-label="Back to reference 1" class="data-footnote-backref">↩</a>
</li>
<li id="user-content-fn-3-3fbbcd">
<a href="https://ambirdsall.com/blog/cut-out-the-middleman#user-content-fnref-3-3fbbcd" data-footnote-backref="" aria-label="Back to reference 2" class="data-footnote-backref">↩</a>
</li>
<li id="user-content-fn-4-3fbbcd">
<a href="https://ambirdsall.com/blog/cut-out-the-middleman#user-content-fnref-4-3fbbcd" data-footnote-backref="" aria-label="Back to reference 3" class="data-footnote-backref">↩</a>
</li>
<li id="user-content-fn-2-3fbbcd">
<a href="https://ambirdsall.com/blog/cut-out-the-middleman#user-content-fnref-2-3fbbcd" data-footnote-backref="" aria-label="Back to reference 4" class="data-footnote-backref">↩</a>
</li>
</ol>
</section>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Why emacs is worth the bother]]></title>
            <link>https://ambirdsall.com/blog/why-emacs-is-worth-the-bother</link>
            <guid>https://ambirdsall.com/blog/why-emacs-is-worth-the-bother</guid>
            <pubDate>Mon, 02 Dec 2019 00:00:00 GMT</pubDate>
            <description><![CDATA[Emacs has a few unusual properties which work together really well, making for a]]></description>
            <content:encoded><![CDATA[<p>Emacs has a few unusual properties which work together really well, making for a
super powerful, flexible system that's easier to bend to your will in
sophisticated ways than almost anything else around. That might sound like a lot
of work, but most day-to-day emacs usage isn't reinventing the world; when you
want to do something custom, though, the power is right at your fingertips.
Literally.</p>
<!-- -->
<p>What are those properties? Well:</p>
<ol>
<li>
<p>Emacs is configured with a full-fledged, high-level programming language,
with functions, control flow, etc. Emacs lisp is a dynamic functional
language; the syntax is out of the ordinary, but under the hood, it's a
little like old-school javascript with an emphasis on linked lists, strings,
and text buffers. Except for macros, which are powerful like magic, only
less… magical.</p>
</li>
<li>
<p>Literally everything you can do in emacs, including really basic stuff like
"move the cursor forwards 15 characters" and "insert the text <code>function fo() { return "haha this was not named foo" }</code>" can be scripted with emacs lisp.
Here:</p>
<div class="language-emacs-lisp codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-emacs-lisp codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">(</span><span class="token car">forward-char</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">15</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">(</span><span class="token car">insert</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"function fo() { return \"haha this was not named foo\" }"</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p>Literally every user interaction follows the same model: you hit a key (or
equivalent, like clicking the mouse), which triggers some lisp function.</p>
</li>
<li>
<p>You can look up, at any time you want, the name of the function bound to any
key; the full documentation for any function (with a hyperlink to its source
code, so you can dig as deep as you want); and the value of any variable.
Just type <code>C-h</code> and then one of <code>k</code>, <code>f</code>, or <code>v</code> (guess which is which).
(There are lots more help options under that <code>C-h</code> prefix, too.)</p>
</li>
<li>
<p>Literally any keystroke and combination can be bound to any function you
want.</p>
</li>
</ol>
<p>I know I used "literally" a lot in there, but lots of programs make sweeping
"[verb] any [noun]!"-type claims that are only <em>mostly</em> true.</p>
<p>Anyway, once you internalize the logic of this system, you have superpowers! Did
something weird just happen? Type <code>C-h k</code>, then hit the same keystroke again to
find out what function is responsible. Want to change what that keystroke does?
You can, on the fly. You always open the same file, so you want a shortcut?
That's like a 30-second customization, once you're used to emacs. Want to do
something fancy, but you don't know what the right function is named? Just
search for all the available function names with <code>C-h f</code>, and if one sounds
right, select it to check its documentation. Faster than google, and always, by
definition, up-to-date with your specific emacs instance.</p>
<p>Emacs has a lot of janky and/or bullshit characteristics, due to its long
history, survivor bias, and occasionally just due to the intransigence of the
maintainers (if any emacs maintainers read this, a sincere thank you for all you
do and all you have done! Now please, for the love of humans, approve some PRs
to make the default UI more beginner-friendly and update its looks). No emacs
user is beholden to those neckbeards, though: if you don't like it, you can
change it. Or if you're not feeling like all that work, you can usually find
someone else who already changed it the way you want and put that shit on
github.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="seriously-before-you-get-started-remap-caps-lock-to-control">seriously, before you get started: remap caps lock to control<a href="https://ambirdsall.com/blog/why-emacs-is-worth-the-bother#seriously-before-you-get-started-remap-caps-lock-to-control" class="hash-link" aria-label="Direct link to seriously, before you get started: remap caps lock to control" title="Direct link to seriously, before you get started: remap caps lock to control">​</a></h2>
<p>Caps lock is useless. Control is <em>constantly</em> used in emacs. As a bonus, lots of
standard emacs shortcuts for text navigation (<code>C-a</code> to jump to start of line;
<code>C-e</code> to jump to end of line; <code>C-k</code> to delete from the cursor to the end of text
or the next newline, whichever comes first; <code>C-t</code> to "transpose" two characters
when you make a tyop; <code>C-n</code> and <code>C-p</code> to go down/up one line) work in the shell
and in almost all OSX text fields. If control is where caps lock was, all this
is right on home row, super easy and ergonomic to use. If not, you sort of end
up making weird claw hands all the time.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="okay-with-that-out-of-the-way-quick-start">okay, with that out of the way: quick start<a href="https://ambirdsall.com/blog/why-emacs-is-worth-the-bother#okay-with-that-out-of-the-way-quick-start" class="hash-link" aria-label="Direct link to okay, with that out of the way: quick start" title="Direct link to okay, with that out of the way: quick start">​</a></h2>
<p>Lots of people will tell you that stock emacs sucks. That is because stock emacs
kind of sucks. We can do better than that.</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="install-a-version-of-emacs-that-isnt-awful">Install a version of emacs that isn't awful<a href="https://ambirdsall.com/blog/why-emacs-is-worth-the-bother#install-a-version-of-emacs-that-isnt-awful" class="hash-link" aria-label="Direct link to Install a version of emacs that isn't awful" title="Direct link to Install a version of emacs that isn't awful">​</a></h3>
<p>If you're on a mac, there is an <code>emacs</code> pre-installed, but it's like 10 years
out of date and only works in the terminal. It's good for one thing:</p>
<div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># haha, good luck figuring out how to close emacs</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">emacs </span><span class="token parameter variable" style="color:#36acaa">-q</span><span class="token plain"> --no-splash </span><span class="token parameter variable" style="color:#36acaa">-f</span><span class="token plain"> tetris</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Tetris? Remember, you can rebind any keystroke to run your own code, and emacs
will do any song and dance you're clever/patient enough to write. Web browsers
were originally just for viewing documents, too.</p>
<p>For your non-tetris needs, you'll want to do one of these</p>
<div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">## good, but ought to be better</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">brew </span><span class="token function" style="color:#d73a49">install</span><span class="token plain"> emacs</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">## much better, unless connecting to your running emacs from the terminal is important to you</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">## (and if it is, you probably don't need introductory notes?)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">brew tap railwaycat/emacsmacport</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">brew </span><span class="token function" style="color:#d73a49">install</span><span class="token plain"> emacs-mac</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Why is the normal emacs not the best choice for mac? Because the Free Software
Foundation people are assholes about everything but linux. Sorry, "GNU/linux".
So some guy forked emacs so he could add e.g. native OSX smooth scrolling and
shit.</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="install-a-starter-kit">Install a starter kit<a href="https://ambirdsall.com/blog/why-emacs-is-worth-the-bother#install-a-starter-kit" class="hash-link" aria-label="Direct link to Install a starter kit" title="Direct link to Install a starter kit">​</a></h3>
<p>These have gotten popular these days. Basically, these are community-maintained
configurations on top of emacs. They add in useful third-party libraries (in
some cases, so useful they have become de facto standards), update the styling
so emacs looks like it's from the present, instead of the mid-90s, and usually
offer a bunch of variables you can tweak to easily toggle features and stuff.
They're generally intended to be a more powerful and beautiful "batteries
included" starting point for people. To install a starter kit, just clone the
project repository to <code>~/.emacs.d</code>; when you next start emacs, it will
automatically load that code.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="if-you-like-piña-coladas-and-getting-stuck-in-a-vim-session">If you like piña coladas, and getting stuck in a vim session<a href="https://ambirdsall.com/blog/why-emacs-is-worth-the-bother#if-you-like-pi%C3%B1a-coladas-and-getting-stuck-in-a-vim-session" class="hash-link" aria-label="Direct link to If you like piña coladas, and getting stuck in a vim session" title="Direct link to If you like piña coladas, and getting stuck in a vim session">​</a></h4>
<p>My favorite is <a href="https://github.com/doomemacs/doomemacs" target="_blank" rel="noopener noreferrer">doom emacs</a>. It's quite possibly the most
popular, with excellent documentation and community. Doom is written by and for people who like vim's
command language (which is an insanely good fit for emacs' keybinding model,
actually), but you don't need to use it in a vimmy way. Most people do, because
it's insanely good like that, but you do you. Doom has a wonderful system
of mnemonic commands that you access via a universal prefix key (inspired by <a href="https://github.com/syl20bnr/spacemacs" target="_blank" rel="noopener noreferrer">spacemacs</a>, which is also quite good), which is the
space bar if you use vim keybindings and something else if you don't. Even if you choose
not to use vim bindings at all, I'd recommend doom: the out-of-the-box experience is miles
better than stock emacs, it's well-organized and documented, and Henrik's hand-rolled,
nix-inspired package management system absolutely shines if you ever want to keep things
in sync between a personal and work computer.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="if-you-want-something-more-traditionally-emacsy-because-you-dont-give-a-fuck-about-vim">If you want something more traditionally emacsy, because you don't give a fuck about vim<a href="https://ambirdsall.com/blog/why-emacs-is-worth-the-bother#if-you-want-something-more-traditionally-emacsy-because-you-dont-give-a-fuck-about-vim" class="hash-link" aria-label="Direct link to If you want something more traditionally emacsy, because you don't give a fuck about vim" title="Direct link to If you want something more traditionally emacsy, because you don't give a fuck about vim">​</a></h4>
<p>A venerable starter kit that's a bit more mainline emacs is
<a href="https://github.com/bbatsov/prelude" target="_blank" rel="noopener noreferrer">Prelude</a>. I haven't used it, so I can't comment on it
much, but I've heard very good things, and its primary maintainer is pretty legit.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="if-you-want-to-be-fancy">If you want to be FANCY<a href="https://ambirdsall.com/blog/why-emacs-is-worth-the-bother#if-you-want-to-be-fancy" class="hash-link" aria-label="Direct link to If you want to be FANCY" title="Direct link to If you want to be FANCY">​</a></h4>
<p>A new one is <a href="https://github.com/seagle0128/.emacs.d" target="_blank" rel="noopener noreferrer">Centaur</a>. Centaur is very
pretty and into normal modern UI stuff like file trees with icons and tabs and
stuff.</p>
<p>Oh yeah, emacs doesn't really even have decent tab support? At the time of
writing, in the year of our lord 2019, it's only a first-class UI feature in the
cutting edge versions and hasn't even made it to a stable release. Centaur tabs
are clever, but a hack. I dunno, y'all, nothing's perfect.</p>
<p>Cool, you have a modern version of emacs, and now it looks adequate. Let's get
oriented.</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="a-quick-tour-of-essential-emacs-keybindings">A quick tour of essential emacs keybindings<a href="https://ambirdsall.com/blog/why-emacs-is-worth-the-bother#a-quick-tour-of-essential-emacs-keybindings" class="hash-link" aria-label="Direct link to A quick tour of essential emacs keybindings" title="Direct link to A quick tour of essential emacs keybindings">​</a></h3>
<p>You can remap any key in any mode, but the defaults are around until and unless
you change them, so they're worth knowing. I'm assuming you didn't install
spacemacs in vim mode; if you did, a few parts of this won't generally apply.</p>
<p>By convention, emacs documents keystrokes (in all of its documentation and when
reporting what keys a function is bound to) a certain way. I've already used it
above. Here's a more complicated keybinding:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">C-x c</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This means "hold control and type x; then type c". You never hit control except
in combination with other keys, so the "c" character is unambiguous in both
spots there. In keybinding notation, dashes mean "hit these two keys together"
and spaces mean "after typing key X, release the keys and then type key Y".</p>
<p>Two modifier keys are king in emacs: control, which is the control key, and
meta, which is the alt key. It's weird, but emacs literally predates the alt key
being standard. Meta is <code>M-[something]</code> in keybinding notation.</p>
<p>If you're a hipster like me, you might switch things up so that the mac command
key is meta instead of alt. Emacs is what you make it.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="first-command-to-learn-m-x-lets-you-run-commands-by-name">First command to learn: <code>M-x</code> lets you run commands by name<a href="https://ambirdsall.com/blog/why-emacs-is-worth-the-bother#first-command-to-learn-m-x-lets-you-run-commands-by-name" class="hash-link" aria-label="Direct link to first-command-to-learn-m-x-lets-you-run-commands-by-name" title="Direct link to first-command-to-learn-m-x-lets-you-run-commands-by-name">​</a></h4>
<p>A decent starter configuration will give you a nice fuzzy search interface when
you hit <code>M-x</code>. Start typing, and when the command you want comes up in the
results, you can use the arrow keys and enter to execute that command. Don't
remember the keybinding for some functionality? Hit <code>M-x</code> and start typing its
name. Since keyboard space is finite, some commands can only be run like this.
For example, <code>M-x snake</code> starts a game of snake, and <code>M-x doctor</code> starts a
psychotherapy session with everyone's favorite 1960s chatbot ELIZA.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="first-commands-to-learn-what-to-do-when-you-panic">First commands to learn: what to do when you panic<a href="https://ambirdsall.com/blog/why-emacs-is-worth-the-bother#first-commands-to-learn-what-to-do-when-you-panic" class="hash-link" aria-label="Direct link to First commands to learn: what to do when you panic" title="Direct link to First commands to learn: what to do when you panic">​</a></h4>
<p><code>C-x C-c</code> closes the program. It's good to know, especially if you run it in a
terminal.</p>
<p>Within a session, if emacs freezes, or starts acting weird, or you mistype and
find yourself halfway into the wrong key sequence, start spamming <code>C-g</code> to
cancel out of whatever the current thing is. The downside to letting people run
their own code is that sometimes they write dumb code and have stuff like
infinite loops. In cases like this, <code>C-g</code> is your friend. You can also spam the
escape key: on the rare occasion <code>C-g</code> doesn't work, three escapes usually will.</p>
<h4 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="theres-a-method-to-the-madness">There's a method to the madness<a href="https://ambirdsall.com/blog/why-emacs-is-worth-the-bother#theres-a-method-to-the-madness" class="hash-link" aria-label="Direct link to There's a method to the madness" title="Direct link to There's a method to the madness">​</a></h4>
<p>Really quick commands you will do while you type code/prose/emails/whatever are
bound to control [something] or meta [something], so you can just bust them out
quickly. Commands that are common but that you're less likely to use in quick
succession, like saving, managing your windows, quitting emacs, etc, are under
the <code>C-x</code> prefix (the "x" is for "execute command": Emacs tries to make stuff
mnemonic). Commands that are less common than that (or when you remember the
name but not the keybinding), you can type <code>M-x</code> and find them by name. The
similarity of the two "execute command" keybindings, <code>C-x</code> and <code>M-x,</code> is not a
coincidence. Mnemonic, remember?</p>
<p>That's a decent intro to the standardish sort-of-hierarchy for what different
modifier keys mean with the same key. <code>C-f</code> goes forwards one character; <code>M-f</code>
goes forwards one word; <code>C-M-f</code> goes forward one semantic unit (paired quotes or
braces, a code block, or whatever: different language modes can define what a
semantic unit is, and emacs has some more-or-less sensible global defaults).
When "same thing, but with a wider scope" doesn't make sense, sometimes control
and meta do opposite versions of the same thing. I don't want to bog you down
with examples, though: you can get by for a while using arrow keys, the mouse,
and a small handful of memorized commands.</p>
<p>The file menu is a nice way to find commands at first, too, though you'll
probably leave it behind as you internalize a more keyboard-driven workflow.</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="what-is-a-mode-even">what is a mode, even<a href="https://ambirdsall.com/blog/why-emacs-is-worth-the-bother#what-is-a-mode-even" class="hash-link" aria-label="Direct link to what is a mode, even" title="Direct link to what is a mode, even">​</a></h3>
<p>Modes are how emacs lets you apply or remove related configurations and
keybindings en masse. Functions that manipulate ruby code only make sense if
you're editing a ruby file; so those keybindings only apply when <code>ruby-mode</code> is
active. <code>ruby-mode</code> is a <em>major</em> mode.</p>
<p>Every buffer has one (1) major mode. This says what kind of thing that buffer
is. Is it a file of some programming language? Each programming language has its
own major mode (sometimes you even have a couple options, because open source).
Is the buffer an interactive feature, like a game of tetris or a git dashboard?
Is it some elisp function's documentation? That's the major mode. You can use
<code>M-x</code> to change the major mode (they're just functions, under the hood), and
interact with the buffer contents in a different way, but you almost never have
to.</p>
<p>You can only have one major mode per buffer, but you can have as many minor
modes as you want. Minor modes tend to wrap a few related functions and settings
into some feature, so you can easily toggle the feature by (de)activating the
minor mode. Autocomplete is a minor mode. Spell-check is a minor mode.
<a href="https://elpa.gnu.org/packages/rainbow-mode.html" target="_blank" rel="noopener noreferrer">rainbow-mode</a> is a minor mode,
and makes writing CSS so much nicer. A <a href="https://github.com/TeMPOraL/nyan-mode" target="_blank" rel="noopener noreferrer">nyan cat status
bar</a> to tell you how far into a buffer
you are? Minor mode. Most features are implemented as minor modes.</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="one-of-the-killer-apps-org-mode">[one of] the killer app[s]: org-mode<a href="https://ambirdsall.com/blog/why-emacs-is-worth-the-bother#one-of-the-killer-apps-org-mode" class="hash-link" aria-label="Direct link to [one of] the killer app[s]: org-mode" title="Direct link to [one of] the killer app[s]: org-mode">​</a></h3>
<p><code>org-mode</code> is sort of like markdown on steroids. You can rearrange the order and
level of headings interactively on the fly; edit code snippets as if they were
actual files, with full language support; edit tables like a spreadsheet; export
your notes to pdf, html, LaTeX, github-flavored markdown (although github parses
<code>.org</code> files just like it does <code>.md</code> ones), or a reveal.js slideshow; and so, so
much more. I wrote this page as some quick-and-dirty notes in <code>org-mode</code>
(seriously: if you replace <code>index.html</code> with <code>index.org</code>, you can see the raw
source). <code>org-mode</code> started out life as a third-party package for emacs, but it
is so good and became so popular that it's included with emacs now.</p>
<p>The basics (slightly different markdown with magic table formatting and built-in
todo list support!) are simple to learn and legitimately powerful on their own;
but its feature set is so deep, you can spend years learning it and still not
know everything. Even if you never use emacs for anything else, <code>org-mode</code> is
worth it.</p>
<p>Honest-to-god: take 30ish minutes of your life (you don't need to watch the Q
and A for pete's sake) and watch this presentation that Carsten Dominik, the
German astronomer who authored org-mode, gave at google:</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/oJTwQvgfgMM" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Zero-friction testing in rails]]></title>
            <link>https://ambirdsall.com/blog/zero-friction-testing-in-rails</link>
            <guid>https://ambirdsall.com/blog/zero-friction-testing-in-rails</guid>
            <pubDate>Fri, 09 Dec 2016 00:00:00 GMT</pubDate>
            <description><![CDATA[AUTHOR'S NOTE: this post is several years old, but it's a fun time]]></description>
            <content:encoded><![CDATA[<blockquote>
<p><strong>AUTHOR'S NOTE:</strong> this post is several years old, but it's a fun time
capsule. Professionally I was but a babe, and had just left one of my first
programming jobs, where I had encountered my first truly heinous codebase. I was
almost comically thirsty for quality and blessed with a project that was
conceptually reducible to a pure function. Nonetheless, what is describes
remains my favorite programming workflow: in a split terminal window, running
a text editor on one side, with a unit test watcher on the other side giving immediate
feedback when files change.</p>
</blockquote>
<p>So. It wasn't until a few months ago that I finally worked on a software
project with full test coverage. Now that I have, I'm a little shocked and
horrified it took this long: the quality of life is drastically better on
this side. The project in question is <a href="https://law.cornell.edu/rio" target="_blank" rel="noopener noreferrer">RIO</a>, an
ES6 legal citation parser I've been building for Cornell Law's LII. I've been
developing that solo, so I had the liberty of setting the testing mantle up to
suit my own workflow: heavily terminal-based, using vim and tmux.</p>
<!-- -->
<p>I've found that it's a massive help to be able to have tests constantly
rerunning in a splitscreen with vim every time I save a file. The constant
feedback means I don't need to keep switching mental context to see if my code
is correct: I can, while still in my editor, just glance over at a current test
run. This has utterly revolutionized how I feel about refactoring: knowing
exactly when my code breaks and unbreaks as I rearrange things is a massive
help for refactoring, and reveals bugs pretty much the instant they are
introduced. I haven't had to write a <code>debugger</code> in anger in a shockingly long
time. I want that confidence and speed when I work on rails projects, too.</p>
<p>So, to recap, I want</p>
<ol>
<li>fast tests that</li>
<li>run automatically on file save</li>
<li>run by a persistent server I can ogle in a tmux split while I vim away in
the same terminal window.</li>
</ol>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="fast-tests">Fast tests<a href="https://ambirdsall.com/blog/zero-friction-testing-in-rails#fast-tests" class="hash-link" aria-label="Direct link to Fast tests" title="Direct link to Fast tests">​</a></h2>
<p>The speed can be helped by <code>spring</code>, a gem that comes in rails' default
<code>Gemfile</code> but which takes a bit of setup. Once you <em>have</em> set it up, though,
it's brilliant. After the first command which requires loading your rails app,
<code>spring</code> keeps running as a background process, with your application
environment loaded into memory. This means that the next time you run a command
that requires a loaded app, like your test suite, you get to skip the
several-second wait for rails to bootstrap itself­you only need to run
the test files themselves. Out of the box, <code>spring</code> only knows how to wrap the
<code>rails</code> and <code>rake</code> commands to use the preloaded app, but the
<code>spring-commands-rspec</code> gem expands that set to also wrap <code>rspec</code>, which I'm
using for my tests.</p>
<p>Incidentally, I've read things which assert that <code>minitest</code> is a good bit
faster than <code>rspec</code>; but <code>rspec</code> has quite a lot of community support, and I've
been writing a ton of <code>jasmine</code> tests lately, which has wicked similar syntax.
The point of this is to lower the cognitive load of testing, after all. With a
massive test suite, though, the time savings might be worth switching over. As
always, measure: the old command-line standby <code>time</code> is your friend.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="running-automatically-on-file-save">Running automatically on file save<a href="https://ambirdsall.com/blog/zero-friction-testing-in-rails#running-automatically-on-file-save" class="hash-link" aria-label="Direct link to Running automatically on file save" title="Direct link to Running automatically on file save">​</a></h2>
<p><code>guard</code> is the gem of choice here. It reads a <code>Guardfile</code> in the root of your
project: in that <code>Guardfile</code>, which is written in a ruby DSL, you define what
actions <code>guard</code> should run for given project files and which files to ignore.
If you, like I, are on osx, you should also install <code>rb-fsevent</code>, which makes
<code>guard</code> listen to osx's native FSEvents API instead of having to poll the disk
for changes (which is slower and takes more work from your CPU). You can
specify any command-line callback you like in your <code>Guardfile</code> with backticks,
but there are quite a few guard plugins that automatically set up conventional
rules for a conventional rails configuration and tool-specific configuration
options. Enter <code>guard-rspec</code>.</p>
<p>Here are the versions of all the gems I used when I went through this myself,
if you're into that sort of thing:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">guard 2.14.0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">guard-rspec 4.7.3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rails 4.2.5</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rb-fsevent 0.9.8</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ruby 2.3.1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">spring 2.0.0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">spring-command-rspec 1.0.4</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="lets-set-these-bad-not-specifically-gendered-children-up">Let's set these bad not-specifically-gendered children up<a href="https://ambirdsall.com/blog/zero-friction-testing-in-rails#lets-set-these-bad-not-specifically-gendered-children-up" class="hash-link" aria-label="Direct link to Let's set these bad not-specifically-gendered children up" title="Direct link to Let's set these bad not-specifically-gendered children up">​</a></h2>
<p>In your <code>Gemfile</code>:</p>
<div class="language-ruby codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ruby codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">group </span><span class="token symbol" style="color:#36acaa">:development</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token symbol" style="color:#36acaa">:test</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">do</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  gem </span><span class="token string-literal string" style="color:#e3116c">'spring-commands-rspec'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  gem </span><span class="token string-literal string" style="color:#e3116c">'rspec-rails'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  gem </span><span class="token string-literal string" style="color:#e3116c">'guard-rspec'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  gem </span><span class="token string-literal string" style="color:#e3116c">'rb-fsevent'</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token command-literal command string" style="color:#e3116c">`uname`</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=~</span><span class="token plain"> </span><span class="token regex-literal regex" style="color:#36acaa">/Darwin/</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">end</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>And</p>
<div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">bundle</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="setup-spring">Setup Spring<a href="https://ambirdsall.com/blog/zero-friction-testing-in-rails#setup-spring" class="hash-link" aria-label="Direct link to Setup Spring" title="Direct link to Setup Spring">​</a></h2>
<p>To generate the command wrappers necessary to use the preloaded app, run</p>
<div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">spring binstub </span><span class="token parameter variable" style="color:#36acaa">--all</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>which should generate some output along the lines of</p>
<div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">* bin/rake: spring inserted</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">* bin/rspec: spring inserted</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">* bin/rails: spring inserted</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>If you forgot to rebundle before running this or otherwise need to change the
configuration for <code>spring</code>, you'll need to stop and restart <code>spring</code> with</p>
<div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">spring stop</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Otherwise, it will keep reusing the old outdated preloaded environment. And, if you're paranoid:</p>
<div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">spring status</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>For those quick tests I mentioned, just run</p>
<div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">bin/rspec</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>bin/rspec</code> is the wrapper script genreated back in the <code>spring binstub --all</code>
step. You could also run <code>rspec</code> through <code>spring</code> manually with</p>
<div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">spring rspec</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Life is full of choices, and many of them don't matter. I timed both on some
empty spec files I scaffolded (with test output truncated, of course):</p>
<div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">% spring stop</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Spring stopped.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">% </span><span class="token function" style="color:#d73a49">time</span><span class="token plain"> bin/rspec</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Finished </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0.66145</span><span class="token plain"> seconds </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">files took </span><span class="token number" style="color:#36acaa">0.61181</span><span class="token plain"> seconds to load</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">32</span><span class="token plain"> examples, </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> failures, </span><span class="token number" style="color:#36acaa">18</span><span class="token plain"> pending</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">bin/rspec  </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">.25s user </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">.06s system </span><span class="token number" style="color:#36acaa">4</span><span class="token plain">% cpu </span><span class="token number" style="color:#36acaa">6.348</span><span class="token plain"> total</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">% </span><span class="token function" style="color:#d73a49">time</span><span class="token plain"> bin/rspec</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Finished </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0.59806</span><span class="token plain"> seconds </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">files took </span><span class="token number" style="color:#36acaa">0.58837</span><span class="token plain"> seconds to load</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">32</span><span class="token plain"> examples, </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> failures, </span><span class="token number" style="color:#36acaa">18</span><span class="token plain"> pending</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">bin/rspec  </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">.27s user </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">.09s system </span><span class="token number" style="color:#36acaa">19</span><span class="token plain">% cpu </span><span class="token number" style="color:#36acaa">1.864</span><span class="token plain"> total</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">% spring stop</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Spring stopped.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">% </span><span class="token function" style="color:#d73a49">time</span><span class="token plain"> spring rspec</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Finished </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0.58927</span><span class="token plain"> seconds </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">files took </span><span class="token number" style="color:#36acaa">0.36102</span><span class="token plain"> seconds to load</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">32</span><span class="token plain"> examples, </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> failures, </span><span class="token number" style="color:#36acaa">18</span><span class="token plain"> pending</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">spring rspec  </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">.27s user </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">.09s system </span><span class="token number" style="color:#36acaa">5</span><span class="token plain">% cpu </span><span class="token number" style="color:#36acaa">5.996</span><span class="token plain"> total</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">% </span><span class="token function" style="color:#d73a49">time</span><span class="token plain"> spring rspec</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Finished </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0.57317</span><span class="token plain"> seconds </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">files took </span><span class="token number" style="color:#36acaa">0.34346</span><span class="token plain"> seconds to load</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">32</span><span class="token plain"> examples, </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> failures, </span><span class="token number" style="color:#36acaa">18</span><span class="token plain"> pending</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">spring rspec  </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">.27s user </span><span class="token number" style="color:#36acaa">0</span><span class="token plain">.08s system </span><span class="token number" style="color:#36acaa">25</span><span class="token plain">% cpu </span><span class="token number" style="color:#36acaa">1.398</span><span class="token plain"> total</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Either way, <code>spring</code> made the tests <em>much</em> faster after the first run, and
those savings persist so long as the spring server is running.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="setup-guard">Setup Guard<a href="https://ambirdsall.com/blog/zero-friction-testing-in-rails#setup-guard" class="hash-link" aria-label="Direct link to Setup Guard" title="Direct link to Setup Guard">​</a></h2>
<p>I assume you already ran</p>
<div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">rails g rspec:install</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>but if you didn't yet, do. Then run</p>
<div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">% guard init</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">01:34:28 - INFO - Writing new Guardfile to /Users/ambirdsall/code/rails/event_scheduler/Guardfile</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">01:34:28 - INFO - rspec guard added to Guardfile, feel </span><span class="token function" style="color:#d73a49">free</span><span class="token plain"> to edit it</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Find this line of your new <code>Guardfile</code>:</p>
<div class="language-ruby codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ruby codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">guard </span><span class="token symbol" style="color:#36acaa">:rspec</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token symbol" style="color:#36acaa">cmd</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">"bundle exec rspec"</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">do</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>and change it to</p>
<div class="language-ruby codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ruby codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">guard </span><span class="token symbol" style="color:#36acaa">:rspec</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token symbol" style="color:#36acaa">cmd</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">"bin/rspec"</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">do</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>NICE.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="there-you-go">There you go<a href="https://ambirdsall.com/blog/zero-friction-testing-in-rails#there-you-go" class="hash-link" aria-label="Direct link to There you go" title="Direct link to There you go">​</a></h2>
<p>Now just fire up <code>guard</code> with the command <code>guard</code>. Shazam! Your tests will run on save.</p>
<p>The little prompt <code>guard</code> gives you is an interactive ruby console, too, which
is really handy for double-checking the syntax of quick snippets when fixing
test failures. Use Ctrl-d to kill it, or just close your terminal.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Building An Adequate Wedding Gallery]]></title>
            <link>https://ambirdsall.com/blog/building-an-adequate-wedding-gallery</link>
            <guid>https://ambirdsall.com/blog/building-an-adequate-wedding-gallery</guid>
            <pubDate>Tue, 29 Nov 2016 00:00:00 GMT</pubDate>
            <description><![CDATA[A Cool-ass photo album]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="a-cool-ass-photo-album">A Cool-ass photo album<a href="https://ambirdsall.com/blog/building-an-adequate-wedding-gallery#a-cool-ass-photo-album" class="hash-link" aria-label="Direct link to A Cool-ass photo album" title="Direct link to A Cool-ass photo album">​</a></h2>
<p>Our wedding photographer was a little slow in getting us our images, so I got
to thinking about what to do. I decided I wanted a static image gallery, and I
wanted it to be easy for anyone who came to get copies of photos they like,
whether for online use or making prints. For prints, people should be able to
download the high-resolution originals, and those are such big files, it makes
sense to zip the files before downloading. For digital use, there should be
smaller image files for download<sup><a href="https://ambirdsall.com/blog/building-an-adequate-wedding-gallery#user-content-fn-1-dec833" id="user-content-fnref-1-dec833" data-footnote-ref="true" aria-describedby="footnote-label">1</a></sup>,
but that could easily be handled entirely client-side.</p>
<p>I decided that, in addition to normal "download this photo" usage, I wanted the
ability to</p>
<ol>
<li>Select any given subset of the images easily; and</li>
<li>Download that set of images as a zip file</li>
</ol>
<p>This is a kinda fun UI problem AND has a fun backend problem despite dealing
with static data. Which is great: since we're not barring our photos from
anyone, there's no need to implement any auth, which cuts out a big, common hassle right
from the get-go.</p>
<!-- -->
<p>The zipping part means there needs to be some server code running; I decided to use
a rails app hosted on elastic beanstalk. I was already hosting the images on
s3, and AWS designs all their services for easy interop (naturally, to keep all
your money going their way); besides, I had never hosted an app that way and I
wanted to learn.</p>
<p>Admittedly, for the initial version of this gallery, rails was overkill: just
within the world of ruby development, Sinatra would be plenty for just an image
gallery and a single zipping endpoint. But server-side overkill isn't
necessarily bad: as lost as it's fast and I don't mind paying for it (let's be
real, my family photos aren't going to get millions of distinct views any day
soon), there's no real downside<sup><a href="https://ambirdsall.com/blog/building-an-adequate-wedding-gallery#user-content-fn-2-dec833" id="user-content-fnref-2-dec833" data-footnote-ref="true" aria-describedby="footnote-label">2</a></sup>. Besides:</p>
<ol>
<li>I have notions of extending the app with the ability to search and filter by
name, and rails makes building out the additional models down the line quite
straightforward; and</li>
<li>I wanted to practice working in and testing rails code for professional reasons</li>
</ol>
<p>So fuck it, rails it is.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="open-zipper">Open zipper?<a href="https://ambirdsall.com/blog/building-an-adequate-wedding-gallery#open-zipper" class="hash-link" aria-label="Direct link to Open zipper?" title="Direct link to Open zipper?">​</a></h2>
<p>I searched for "zip" on <a href="https://www.ruby-toolbox.com/search?q=zip" target="_blank" rel="noopener noreferrer">Ruby
Toolbox</a>, and found two projects
that seemed to actually be intended for zipping files:</p>
<p><img decoding="async" loading="lazy" alt="Rubyzip gem stats" src="https://ambirdsall.com/assets/images/rubyzip-gem-stats-18fd07477a6e003498b99bba2a49af4b.png" width="1630" height="650" class="img_ev3q"></p>
<p><img decoding="async" loading="lazy" alt="Zip gem stats" src="https://ambirdsall.com/assets/images/zip-gem-stats-436c77c08ace13dbf3a4077c044a1870.png" width="1616" height="660" class="img_ev3q"></p>
<p>I don't know how a popularity rating is calculated, but it has a Science Beaker
icon, so it must be important. <a href="https://github.com/rubyzip/rubyzip" target="_blank" rel="noopener noreferrer">Rubyzip</a>,
it seems, is the gem for me.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="zip-it-up">Zip it up.<a href="https://ambirdsall.com/blog/building-an-adequate-wedding-gallery#zip-it-up" class="hash-link" aria-label="Direct link to Zip it up." title="Direct link to Zip it up.">​</a></h2>
<p>That repo's <code>README.md</code> has some intro-type example code:</p>
<div class="language-ruby codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ruby codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">require</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'rubygems'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">require</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'zip'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">folder </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">"Users/me/Desktop/stuff_to_zip"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">input_filenames </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string-literal string" style="color:#e3116c">'image.jpg'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'description.txt'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'stats.csv'</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">zipfile_name </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">"/Users/me/Desktop/archive.zip"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Zip</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token builtin">File</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">open</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">zipfile_name</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> Zip</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token builtin">File</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token constant" style="color:#36acaa">CREATE</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">do</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain">zipfile</span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  input_filenames</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">each</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">do</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain">filename</span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic"># Two arguments:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic"># - The name of the file as it will appear in the archive</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic"># - The original file, including the path to find it</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    zipfile</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">filename</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> folder </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'/'</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> filename</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">end</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  zipfile</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">get_output_stream</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string-literal string" style="color:#e3116c">"myFile"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain">os</span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> os</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">write </span><span class="token string-literal string" style="color:#e3116c">"myFile contains just this"</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">end</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>It's not clear from the example alone what files do and don't need to already
exist to get this to work. I fiddled around until I got a minimal POC working,
which looked something like this:</p>
<div class="language-ruby codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-ruby codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># In the Gemfile, mind, you need</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">#   gem 'rubyzip'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">require</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'zip'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">folder </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">"/Users/ambirdsall/Desktop/actual_preexisting_directory"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">input_filenames </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string-literal string" style="color:#e3116c">'actual_preexisting_file.png'</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">zipfile_name </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">"/Users/ambirdsall/Desktop/not_yet_existing_archive_file.zip"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Zip</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token builtin">File</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">open</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">zipfile_name</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> Zip</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token builtin">File</span><span class="token double-colon punctuation" style="color:#393A34">::</span><span class="token constant" style="color:#36acaa">CREATE</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">do</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain">zipfile</span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  input_filenames</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">each</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">do</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain">filename</span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic"># Two arguments:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic"># - The name of the file as it will appear in the archive</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic"># - The original file, including the path to find it</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    zipfile</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">filename</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> folder </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">'/'</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> filename</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">end</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  zipfile</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">get_output_stream</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string-literal string" style="color:#e3116c">"new_filename_for_streamed_data.txt"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">do</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain">os</span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    os</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">write </span><span class="token string-literal string" style="color:#e3116c">"I'm a dynamically-created plain text file"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">end</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">end</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>To work inside a filesystem like this, <code>rubyzip</code> needs a full path to the
source files and the zipfile's directory (that all throws a big error if the
path given to <code>zipfile.add</code> isn't valid); but the <code>zipfile_name</code> doesn't need to
exist yet.</p>
<p>More significantly, that <code>"new_filename_for_streamed_data"</code> business implies
that the filesystem can be skipped altogether for data which can be
streamed—from a database, say, <a href="https://github.com/ambirdsall/wedding_photos/blob/383ddcb249c657bfbf944533373d7d560cea11ab/app/actors/photo_fetcher.rb#L12-L16" target="_blank" rel="noopener noreferrer">or s3</a>.</p>
<p>This is plenty to work with: just get a list of selected images from the UI;
use that list to generate the corresponding s3 URLs; and then stream the
contents of each photo into a zipfile which is then sent to the user's browser
for download. The <code>zipfile.get_output_stream</code> trick can be used for a friendly
index.txt file down the line, after I've mapped each photo to the names of the
people in it.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="coming-soon">Coming Soon...<a href="https://ambirdsall.com/blog/building-an-adequate-wedding-gallery#coming-soon" class="hash-link" aria-label="Direct link to Coming Soon..." title="Direct link to Coming Soon...">​</a></h2>
<p>I'll dive into the design of the UI and of the server code soon, each in its own post.</p>
<p>I whipped up some <code>imagemagick</code> scripts to do batch resizing and
optimizing, and hosted all the photos as public-read files in an s3 bucket.</p>
<p>Certainly nothing compared to sites that make you download megabytes of
javascript before the first paint on mobile.</p>
<!-- -->
<section data-footnotes="true" class="footnotes"><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5 sr-only" id="footnote-label">Footnotes<a href="https://ambirdsall.com/blog/building-an-adequate-wedding-gallery#footnote-label" class="hash-link" aria-label="Direct link to Footnotes" title="Direct link to Footnotes">​</a></h2>
<ol>
<li id="user-content-fn-1-dec833">
<a href="https://ambirdsall.com/blog/building-an-adequate-wedding-gallery#user-content-fnref-1-dec833" data-footnote-backref="" aria-label="Back to reference 1" class="data-footnote-backref">↩</a>
</li>
<li id="user-content-fn-2-dec833">
<a href="https://ambirdsall.com/blog/building-an-adequate-wedding-gallery#user-content-fnref-2-dec833" data-footnote-backref="" aria-label="Back to reference 2" class="data-footnote-backref">↩</a>
</li>
</ol>
</section>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Cron: Legacy]]></title>
            <link>https://ambirdsall.com/blog/cron-legacy</link>
            <guid>https://ambirdsall.com/blog/cron-legacy</guid>
            <pubDate>Tue, 11 Oct 2016 00:00:00 GMT</pubDate>
            <description><![CDATA[I thought it would be cool to get my computer to automatically run brew update every so]]></description>
            <content:encoded><![CDATA[<p>I thought it would be cool to get my computer to automatically run <code>brew update</code> every so
often in the background and email me if anything went wrong. I thought it would be pretty
simple! It was not, in fact, prety simple: I ran into a bunch of super frustrating errors,
usually because I was taking some aspect of my normal terminal environment for granted
(the <code>$PATH</code> variable that tells the shell where to look to find commands; email protocols
and authentication; ssh authentication; error handling in the shell; etc etc etc).</p>
<p>But I learned a bunch in the process! So kick back, pour yourself a drink, and
learn about <code>cron</code>, the old-school unix tool you can use to run programs behind
your own back.</p>
<!-- -->
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="what-is-a-cron-and-how-does-it-cron">What is a <code>cron</code> and how does it... cron?<a href="https://ambirdsall.com/blog/cron-legacy#what-is-a-cron-and-how-does-it-cron" class="hash-link" aria-label="Direct link to what-is-a-cron-and-how-does-it-cron" title="Direct link to what-is-a-cron-and-how-does-it-cron">​</a></h2>
<p>Cron is an old unix program used to run commands repeatedly on a schedule.
There are two main parts to the cron system: there is the cron daemon, a
program that (once set up) is constantly running in the background; and there
is the crontab file, which keeps the schedule of programs to run <sup><a href="https://ambirdsall.com/blog/cron-legacy#user-content-fn-1-a9de95" id="user-content-fnref-1-a9de95" data-footnote-ref="true" aria-describedby="footnote-label">1</a></sup>. Once every minute
on the minute, assuming your computer is awake and running, the cron daemon (the system
automatically launches <code>cron</code> after you save your first valid crontab file, and on boot
afterwards) evaluates each line of all of the relevant installed crontab files, running
any commands whose schedules match on the current minute. Any output to <code>$STDERR</code> is
assumed to be an error and is mailed to you: <code>cron</code>'s default mailing strategy is a local
"mailbox" originally used for pre-internet user-to-user messages within a multi-user
system, but if you're fancy with the google, it's pretty manageable to teach it to use
something like gmail instead.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="the-crontab-file">The <code>crontab</code> file<a href="https://ambirdsall.com/blog/cron-legacy#the-crontab-file" class="hash-link" aria-label="Direct link to the-crontab-file" title="Direct link to the-crontab-file">​</a></h2>
<p>You edit the crontab file with the command <code>crontab -e</code>, regardless of where
you are in the filesystem. You need to do some config to use this; more on that
later.</p>
<p>Each line either contains a shell variable definition, in which case <code>cron</code>
updates its environment accordingly<sup><a href="https://ambirdsall.com/blog/cron-legacy#user-content-fn-2-a9de95" id="user-content-fnref-2-a9de95" data-footnote-ref="true" aria-describedby="footnote-label">2</a></sup>, or a
scheduled command. Scheduled commands are structured like this:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">* * * * *  /absolute/path/of/command/to/execute</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ │ │ │ │</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ │ │ │ └─── day of week (0 - 7) (0 to 6 are Sunday to Saturday, or use names; 7 is Sunday, the same as 0)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ │ │ └──────── month (1 - 12)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ │ └───────────── day of month (1 - 31)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│ └────────────────── hour (0 - 23)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">└─────────────────────── min (0 - 59)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>For any element of a schedule (hours, minutes, etc), you can use:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">*  matches every value</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-  defines a range, like `9-17` for every hour from 9AM to 5PM</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">,  separates multiple individual values, such as `MON,WED,FRI`</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>So, for example <code>0 9-17 * * 1-5</code> matches each hour from 9AM to 5PM on the hour,
each weekday, with no restrictions by month or day of month.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="editing-crontab-takes-special-config-because-life-is-suffering">Editing <code>crontab</code> takes special config, because life is suffering<a href="https://ambirdsall.com/blog/cron-legacy#editing-crontab-takes-special-config-because-life-is-suffering" class="hash-link" aria-label="Direct link to editing-crontab-takes-special-config-because-life-is-suffering" title="Direct link to editing-crontab-takes-special-config-because-life-is-suffering">​</a></h2>
<p>So <code>crontab -e</code> opens the file with whatever your have set to <code>$EDITOR</code> in your
shell session. I use vim, which is secretly a problem: the <code>crontab</code> program
sets some rules about how you save the file, and vim's defaults work
differently.</p>
<p>Specifically, when vim writes changes to a file, it first saves them as a
backup file, then overwrites the original. This helps vim be more confident it
won't corrupt data if it crashes partway through writing, but <code>crontab</code> won't
let you write to anything but the file itself, in-place. To get around this,
add to <code>~/.vimrc</code>:</p>
<div class="language-vim codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-vim codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token builtin">autocmd</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">filetype</span><span class="token plain"> crontab </span><span class="token keyword" style="color:#00009f">setlocal</span><span class="token plain"> </span><span class="token builtin">nobackup</span><span class="token plain"> </span><span class="token builtin">nowritebackup</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="cron-doesnt-have-a-lot-of-things-i-took-for-granted-about-the-shell-environment"><code>cron</code> doesn't have a lot of things I took for granted about the shell environment<a href="https://ambirdsall.com/blog/cron-legacy#cron-doesnt-have-a-lot-of-things-i-took-for-granted-about-the-shell-environment" class="hash-link" aria-label="Direct link to cron-doesnt-have-a-lot-of-things-i-took-for-granted-about-the-shell-environment" title="Direct link to cron-doesnt-have-a-lot-of-things-i-took-for-granted-about-the-shell-environment">​</a></h2>
<p>This isn't that bad to deal with once you get your head around it, but it took
me a while to realize just how much implicit environment I rely on when working
in a terminal. The main one is the <code>$PATH</code> variable: for every command that
isn't built-in shell syntax, odds are good you'll need to prepend the <code>/bin/</code>
or <code>/usr/local/bin/</code> or <code>/usr/sbin/</code> or what have you. If you don't know the
full path of some command you use a lot, for example, <code>git</code>, pop open a
terminal and run <code>which git</code>.</p>
<p>My first instinct was to make one of my <code>crontab</code> file's first lines something like</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token assign-left variable environment constant" style="color:#36acaa">PATH</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">/Users/ambirdsall/bin:/usr/local/bin:/usr/bin:/bin:/I/dunno/maybe/sbin:/other/things/I'm/used/to/also</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>If my crontab environment has access to all the same stuff I use everyday in my
terminal, then writing a cron command is just like writing any old terminal
command. But I think that's the wrong approach, for two reasons:</p>
<ol>
<li>Anything more complicated than a one-liner (and even many of those), you're
better off just saving in a shell script</li>
<li>If you succeed, you've just hidden from yourself how things work under the
hood AND made it easier for part of your terminal-based life to get out of
sync.</li>
</ol>
<p>If you feel a little lost when working with the full absolute paths of programs
and would like a better handle on why different programs live in <code>/bin</code> vs
'/sbin' vs <code>/usr/sbin</code> vs <code>/usr/local/bin</code>—or even why some programs live in
more than one of those places—just run <code>man hier</code> in your terminal and give it
a quick read.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="lets-put-almost-all-of-it-together">Let's put almost all of it together<a href="https://ambirdsall.com/blog/cron-legacy#lets-put-almost-all-of-it-together" class="hash-link" aria-label="Direct link to Let's put almost all of it together" title="Direct link to Let's put almost all of it together">​</a></h2>
<p>Disclaimer: we're skipping over some hoops I had to jump through to send actual
emails to my gmail account from the command line (google it) and the way
thornier issue of how to authenticate an SSH connection with github (which is
where <code>brew</code> searches for updates) in a bare-bones scripting environment
(google "askpass" or go <em>really</em> HAM and learn to use <code>expect</code>). So:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token number" style="color:#36acaa">0</span><span class="token plain"> * * * * /usr/local/bin/brew update</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>will run <code>brew update</code> every hour on the hour, every single day, with zero
conscious effort on my part. Awesome! Awesome.</p>
<p>Wait, this <em>is</em> actually awesome, right?</p>
<p><img decoding="async" loading="lazy" alt="A dumb cron error email" src="https://ambirdsall.com/assets/images/dumb-cron-error-email-09e0a81e08dcd2a9eef201241afc1ff7.png" width="676" height="204" class="img_ev3q"></p>
<p>Goddamn it.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="okay-lets-just-go-through-one-of-the-dumb-problems">Okay, let's just go through <em>one</em> of the dumb problems<a href="https://ambirdsall.com/blog/cron-legacy#okay-lets-just-go-through-one-of-the-dumb-problems" class="hash-link" aria-label="Direct link to okay-lets-just-go-through-one-of-the-dumb-problems" title="Direct link to okay-lets-just-go-through-one-of-the-dumb-problems">​</a></h2>
<p>Here's what was going on:</p>
<ol>
<li>If everything is up to date, <code>brew</code> exits with a heads-up to <code>$STDERR</code></li>
<li>Seeing a message in the error stream, <code>cron</code> emailed me</li>
<li>I don't want email alerts every hour that things are still up-to-date</li>
</ol>
<p>So:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">/usr/local/bin/brew update </span><span class="token operator file-descriptor important" style="color:#393A34">2</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token file-descriptor important">&amp;1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> /dev/null </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">grep</span><span class="token plain"> </span><span class="token parameter variable" style="color:#36acaa">-v</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'up-to-date'</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token file-descriptor important">&amp;2</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>First, a quick note: I use <code>zsh</code>, not <code>bash</code>, and there are a few differences
in how the two shells handle redirection, so if you use <code>bash</code>, you might
need to make a few changes to get it working properly
<sup><a href="https://ambirdsall.com/blog/cron-legacy#user-content-fn-3-a9de95" id="user-content-fnref-3-a9de95" data-footnote-ref="true" aria-describedby="footnote-label">3</a></sup>. Let's break this down:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token operator file-descriptor important" style="color:#393A34">2</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token file-descriptor important">&amp;1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> /dev/null</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The <code>2&gt;&amp;1</code> redirects <code>$STDERR</code> to <code>$STDOUT</code>. The <code>&gt; /dev/null</code> redirects
<code>$STDOUT</code> to the Pit of Despair. If you think this seems like it will redirect
EVERYTHING to <code>/dev/null</code>, leaving you nothing useful to work with, you think
like I do. But it doesn't! Whatever redirections you specify don't take effect
until the next pipe (or the end of the pipeline if there is no next pipe). It
makes sense: this system lets you redirect a bunch of things
<sup><a href="https://ambirdsall.com/blog/cron-legacy#user-content-fn-4-a9de95" id="user-content-fnref-4-a9de95" data-footnote-ref="true" aria-describedby="footnote-label">4</a></sup> to each
others' old handles at the same time without having to worry too much about
overwriting important data streams because of accidental collisions along the
way.</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">grep</span><span class="token plain"> </span><span class="token parameter variable" style="color:#36acaa">-v</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'up-to-date'</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>So it's the contents of <code>$STDERR</code> alone going through that pipe. Nice. <code>grep</code>'s
<code>-v</code> flag reverses the pattern, meaning lines that DON'T contain 'up-to-date'
are printed. Effectively, this filters out the 'up-to-date' error while letting
other errors pass through.</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token operator" style="color:#393A34">&gt;</span><span class="token file-descriptor important">&amp;2</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The last token there, <code>&gt;&amp;2</code>, redirects this filtered error stream from <code>$STDOUT</code>
back to <code>$STDERR</code>; if anything else goes wrong, <code>cron</code> will email as it should,
but it won't spam my inbox with nonsense just because I'm already good.</p>
<h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="nice">NICE.<a href="https://ambirdsall.com/blog/cron-legacy#nice" class="hash-link" aria-label="Direct link to NICE." title="Direct link to NICE.">​</a></h3>
<p>Depending on your operating system, there might be both system-wide
crontabs and user-specific crontab files; I'm only going to discuss systems
with a single crontab file here.</p>
<p>Setting <code>$SHELL</code>, <code>$PATH</code>, and <code>$MAILTO</code> correctly is quite important, and
worth some googling if you have questions.</p>
<p>If you don't know what shell you're using, it's probably <code>bash</code>, but you
can check by running <code>echo $SHELL</code>.</p>
<p>There's no rule that says <code>$STDIN</code>, <code>$STDOUT</code>, and <code>$STDERR</code> are the only
<a href="https://en.wikipedia.org/wiki/File_descriptor" target="_blank" rel="noopener noreferrer">file descriptors</a> your
process can have open, after all.</p>
<!-- -->
<section data-footnotes="true" class="footnotes"><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5 sr-only" id="footnote-label">Footnotes<a href="https://ambirdsall.com/blog/cron-legacy#footnote-label" class="hash-link" aria-label="Direct link to Footnotes" title="Direct link to Footnotes">​</a></h2>
<ol>
<li id="user-content-fn-1-a9de95">
<a href="https://ambirdsall.com/blog/cron-legacy#user-content-fnref-1-a9de95" data-footnote-backref="" aria-label="Back to reference 1" class="data-footnote-backref">↩</a>
</li>
<li id="user-content-fn-2-a9de95">
<a href="https://ambirdsall.com/blog/cron-legacy#user-content-fnref-2-a9de95" data-footnote-backref="" aria-label="Back to reference 2" class="data-footnote-backref">↩</a>
</li>
<li id="user-content-fn-3-a9de95">
<a href="https://ambirdsall.com/blog/cron-legacy#user-content-fnref-3-a9de95" data-footnote-backref="" aria-label="Back to reference 3" class="data-footnote-backref">↩</a>
</li>
<li id="user-content-fn-4-a9de95">
<a href="https://ambirdsall.com/blog/cron-legacy#user-content-fnref-4-a9de95" data-footnote-backref="" aria-label="Back to reference 4" class="data-footnote-backref">↩</a>
</li>
</ol>
</section>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[What Does It Even Mean For The Media To Be Objective]]></title>
            <link>https://ambirdsall.com/blog/what-does-it-even-mean-for-the-media-to-be-objective</link>
            <guid>https://ambirdsall.com/blog/what-does-it-even-mean-for-the-media-to-be-objective</guid>
            <pubDate>Tue, 04 Oct 2016 00:00:00 GMT</pubDate>
            <description><![CDATA[This]]></description>
            <content:encoded><![CDATA[<p><a href="http://www.theestablishment.co/2016/09/29/the-dangerous-myth-of-media-objectivity/" target="_blank" rel="noopener noreferrer">This</a>
is a timely and important article, and it drove me absolutely crazy. Before I
quote anything, I think I need to do some conceptual prep work. The problem, you
see, is that the article suffers from a fatal fault—in calling out a false
notion of objectivity, it leaves unquestioned its right to be framed as
"objectivity". Look, I know I might sound ridiculous, but goddamn it, ideas
matter. It's not so much a problem because that false objectivity is bad per se
(though it is); it's a problem because a better alternative exists and I think
getting it right is really, really important.</p>
<!-- -->
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="science-is-not-what-but-how">Science is not what, but how<a href="https://ambirdsall.com/blog/what-does-it-even-mean-for-the-media-to-be-objective#science-is-not-what-but-how" class="hash-link" aria-label="Direct link to Science is not what, but how" title="Direct link to Science is not what, but how">​</a></h2>
<blockquote>
<p>"The first principle is that you must not fool yourself–and you are the easiest person
to fool."</p>
<p>–Richard Feynman</p>
</blockquote>
<p>Human brains have all sorts of shortcuts for finding patterns. It's our greatest talent,
and it's what's behind the best of us. Here are some ways to conceive of various shortcuts
for finding patterns: jumping to a conclusion; conceptual leaps, both the creative
parallel kind and the brilliant insight kind; optical illusions; artistic license;
intuition; suspicions; logical fallacies; madness.</p>
<p>Basically every social interaction we have, every use of language, is running on hardware
that, when you get down to it, is just doing a bunch of sloppy pattern matching<sup><a href="https://ambirdsall.com/blog/what-does-it-even-mean-for-the-media-to-be-objective#user-content-fn-1-fdd078" id="user-content-fnref-1-fdd078" data-footnote-ref="true" aria-describedby="footnote-label">1</a></sup>. And
we're ridiculously good at it! It has literally taken us to <a href="http://joshworth.com/dev/pixelspace/pixelspace_solarsystem.html" target="_blank" rel="noopener noreferrer">the
moon</a>. But if jumping to
conclusions is fundamental to being an alive human, it means we're never going to not be
wrong about some stuff. You, me, Einstein, Pedro Martinez, Aristotle, Lupita Nyong'o:
everyone who ever has or will live is wrong about a ton of shit.</p>
<p>This is almost all you need to acquire a deep understanding of science. The other part is
a way out: using statistics and measurements of the actual world to verify
stuff. Human perception isn't perfect, but it's still pretty good, and the
physical universe makes sense. You take your flawed conceptions as a starting
point, and you see which ones you can try to disprove. I say "try", because a
lot of times, you can't even do that: the world is full of questions that have
a single true, reality-based answer that there's no way to find out. Got to
hope there's Wikipedia in Heaven. But sometimes you CAN check. So you do.</p>
<p>Here's the last catch: you can't really prove anything is true, but sometimes, when the
facts cooperate, you can prove things false. So you try to prove everything you believe to
be true to be false. Occasionally, to your chagrin, you will be successful. And for
centuries, this has been the method of human progress: shuffling painfully towards the
truth by discarding convincing bullshit one piece at a time.</p>
<p>That's the whole trick. That's how we got spaceships and vaccines. Until you go measure
the real world, everybody's words are just words, and, as previously discussed, we are all
wrong about a lot of things. Shit, we didn't even need to bring up intentional lying or
willful ignorance: even if everyone is trying their very best, people alone can't be
relied on for truth. No folk tradition managed to invent antibiotics, you know?</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="what-that-article-means-when-it-says-objectivity">What that article means when it says "objectivity"<a href="https://ambirdsall.com/blog/what-does-it-even-mean-for-the-media-to-be-objective#what-that-article-means-when-it-says-objectivity" class="hash-link" aria-label="Direct link to What that article means when it says &quot;objectivity&quot;" title="Direct link to What that article means when it says &quot;objectivity&quot;">​</a></h2>
<p>Defining "objectivity" in terms of empirical truth, the following paragraph
becomes absurd:</p>
<blockquote>
<p>Is it the media’s responsibility to cover groups or persons who purposefully use hateful
and provocative speech as a means to gain attention? In what way should this coverage
manifest? And, perhaps most importantly—at what point are journalists obligated to
repudiate notions of objectivity for the sake of humanity and morality?</p>
</blockquote>
<p>Humanity and morality are, in general, best served by dilligent, unassuming
respect for empirical truth. Furthermore, whether a thing is true or false has
little to do with whether it's good or bad<sup><a href="https://ambirdsall.com/blog/what-does-it-even-mean-for-the-media-to-be-objective#user-content-fn-2-fdd078" id="user-content-fnref-2-fdd078" data-footnote-ref="true" aria-describedby="footnote-label">2</a></sup>, and vice versa.</p>
<p>The most frustrating part of writing this is that I haven't found a way not to
come down too harshly. The article is talking about the same problem I am, and
in many ways it's doing quite a good job of it. While it doesn't properly name
the concept it targets, it pins it down precisely through a series of incisive
and well-sourced takedowns of media uncritically airing people who are
demonstrably in the wrong:</p>
<blockquote>
<p>The Milo profile was far from the first time that an outlet has, I’d argue, favored an
obscure notion of objectivity over the protection of human rights and civil liberties. In
May, USA Today <a href="http://www.usatoday.com/story/opinion/2016/05/02/boycott-target-american-family-association-editorials-debates/83848878/" target="_blank" rel="noopener noreferrer">printed</a> an op-ed written by the president of the American Family
Association (AFA), Tim Wildmon, urging readers to boycott the discount retailer Target due
to their inclusive bathroom <a href="https://corporate.target.com/article/2016/04/target-stands-inclusivity#sf45842864" target="_blank" rel="noopener noreferrer">policy</a>.
USA Today neglected to inform its readers that AFA is
<a href="https://www.splcenter.org/fighting-hate/extremist-files/group/american-family-association" target="_blank" rel="noopener noreferrer">an anti-LGBT hate group</a>, while also providing a space for Wildmon to perpetuate the
“bathroom predator” myth. Not only has this virulent lie been <a href="http://mediamatters.org/research/2016/05/05/comprehensive-guide-debunked-bathroom-predator-myth/210200" target="_blank" rel="noopener noreferrer">disproven</a>, its infectious
reach has had a documented <a href="http://www.advocate.com/transgender/2016/7/13/survey-shows-how-trans-bathroom-predator-myth-hurts-real-people" target="_blank" rel="noopener noreferrer">impact</a> on the psychological and physical safety of the
transgender community.</p>
</blockquote>
<p>The problem is that that "obscure notion of objectivity" is neither obscure nor,
I would argue, objectivity. I suspect, if asked to define "media objectivity", a
lot of Americans would sketch out a concept similar to this: an objective media
does not try to shape events, it merely reports on them. I suspect FAR more
strongly that this is how the American media itself sees its mission. If the
pitfall to be avoided is a thumb on the scales, then you're at the mercy of the
existing terms of debate; which is at the mercy of what humans believe; which,
c'mon, we've been over that already. Like <a href="https://www.gutenberg.org/files/5500/5500-h/5500-h.htm" target="_blank" rel="noopener noreferrer">400 years
ago</a> already. But for
all the "obscure notion" shade it's trying to throw, the article doesn't
challenge that as the framework for judging "objectivity". And as long as that's
in place, journalists either have to err on the side of not being to critical or
they need to get rid of "objectivity" as the primary standard. And that's
hogwash.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="why-thats-a-problem">Why that's a problem<a href="https://ambirdsall.com/blog/what-does-it-even-mean-for-the-media-to-be-objective#why-thats-a-problem" class="hash-link" aria-label="Direct link to Why that's a problem" title="Direct link to Why that's a problem">​</a></h2>
<p>That definition needs to be demoted to the second concern: the primary metric by which the
media's objectivity should be measured is integrity with objective reality as best we can
measure it. Often that means statistics. It means fact-checking is not a "nice-to-have",
it is fundamental to the whole operation. Really, it means doing some fucking reporting.</p>
<p>The article quotes <a href="https://thesocietypages.org/socimages/2015/04/09/racial-bias-and-media-coverage-of-violent-crime/" target="_blank" rel="noopener noreferrer">Lisa
Wade</a>,
a sociology professor at Occidental:</p>
<blockquote>
<p>“Each time we see a black person on TV who is linked with a violent crime or portrayed
as a criminal, the neurons in our brain that link blackness with criminality fire. The
more often a link is triggered, the stronger it becomes. Disproportionate reporting . . .
make the neural links in our brain—its actual physical structure—reflect the racism
inherent in the reporting itself.”</p>
</blockquote>
<p>The argument, which I find quite compelling, is that repeating socially-backed but
damaging, false, or repugnant rhetoric, ESPECIALLY uncritically, reinforces it in the
audience's minds, corroding truth and/or the common good. But that logic seems awfully
open to extension: repeating this implicit notion that objective balance in a conflict is
primarily determined by the social force of one or another "side", rather than by its
verifiable truth<sup><a href="https://ambirdsall.com/blog/what-does-it-even-mean-for-the-media-to-be-objective#user-content-fn-3-fdd078" id="user-content-fnref-3-fdd078" data-footnote-ref="true" aria-describedby="footnote-label">3</a></sup> literally builds that link in
readers' minds. People use words the same way the folks around them do: for the sake of
the people around us, America has to step up at using them in service of truth.</p>
<p>European philosophy has spent lifetimes failing to get around this fact,
which is why it is so <a href="http://www.fullbooks.com/The-Ethics.html" target="_blank" rel="noopener noreferrer">beautiful</a>
and so
<a href="https://tractatus-online.appspot.com/Tractatus/jonathan/index.html" target="_blank" rel="noopener noreferrer">tedious</a>.</p>
<p>The most pernicious form this takes is "we can't change <code>$THING</code> because
that's just the way things are". Beyond the surface-level problem of
squelching analysis of <code>$THING</code> in good/bad terms because of a tautological
assertion of its truth value, it nihilistically sweeps away any reasonable
question of the upside risk of attempting to change <code>$THING</code> <em>and</em> it's
almost always wrong, historically speaking.</p>
<!-- -->
<section data-footnotes="true" class="footnotes"><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5 sr-only" id="footnote-label">Footnotes<a href="https://ambirdsall.com/blog/what-does-it-even-mean-for-the-media-to-be-objective#footnote-label" class="hash-link" aria-label="Direct link to Footnotes" title="Direct link to Footnotes">​</a></h2>
<ol>
<li id="user-content-fn-1-fdd078">
<a href="https://ambirdsall.com/blog/what-does-it-even-mean-for-the-media-to-be-objective#user-content-fnref-1-fdd078" data-footnote-backref="" aria-label="Back to reference 1" class="data-footnote-backref">↩</a>
</li>
<li id="user-content-fn-2-fdd078">
<a href="https://ambirdsall.com/blog/what-does-it-even-mean-for-the-media-to-be-objective#user-content-fnref-2-fdd078" data-footnote-backref="" aria-label="Back to reference 2" class="data-footnote-backref">↩</a>
</li>
<li id="user-content-fn-3-fdd078">
<p>It is always both, of course, for we are awash in a sea of opinions. <a href="https://ambirdsall.com/blog/what-does-it-even-mean-for-the-media-to-be-objective#user-content-fnref-3-fdd078" data-footnote-backref="" aria-label="Back to reference 3" class="data-footnote-backref">↩</a></p>
</li>
</ol>
</section>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Backticks Are Fantastic Because Typing Is The Worst]]></title>
            <link>https://ambirdsall.com/blog/backticks-are-fantastic-because-typing-is-the-worst</link>
            <guid>https://ambirdsall.com/blog/backticks-are-fantastic-because-typing-is-the-worst</guid>
            <pubDate>Tue, 20 Sep 2016 00:00:00 GMT</pubDate>
            <description><![CDATA[Backticks Are Fantastic]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="backticks-are-fantastic">Backticks Are Fantastic<a href="https://ambirdsall.com/blog/backticks-are-fantastic-because-typing-is-the-worst#backticks-are-fantastic" class="hash-link" aria-label="Direct link to Backticks Are Fantastic" title="Direct link to Backticks Are Fantastic">​</a></h2>
<p>I mean, <a href="http://www.refining-linux.org/archives/44/ZSH-Gem-10-Backtick-expansion/" target="_blank" rel="noopener noreferrer">legit
awesome</a>.
Here's a contrived recreation of a real-world example I encountered:</p>
<p><img decoding="async" loading="lazy" alt="animated demonstration of backtick expansion in zsh" src="https://ambirdsall.com/assets/images/ln_backticks-c0ac8e5d8c7d21c8aa79dce0aa0258e0.gif" width="537" height="351" class="img_ev3q"></p>
<p>Let's break this down. <!-- --> When making a symbolic link, you should type out the absolute path to the
link target. There are valid reasons for that behavior (though I'd prefer <code>ln</code> just
expanded relative links before making the symlink, tbh), but a lot of directory names are
a hassle to type out. Everyone who's worked in a JVM language feels me.</p>
<p>Two things help:</p>
<ol>
<li>If, as is often the case, you want to link to go in your current directory, you can totally omit the second argument</li>
<li>Typing some shell expression inside backticks which generates the path. If you use <code>bash</code>, you just have to trust your short-term memory, but hitting <code>tab</code> expands that expression interactively in <code>zsh</code>. You use <code>zsh</code>, right?</li>
</ol>
<p>Some would argue that the <code>$()</code> subshell operator has strictly more powerful semantics than
backticks because it can be nested; they are, of course, correct. Other people like subshells
because when you nest them, it reads just like lisp code; they are, of course, nerds<sup><a href="https://ambirdsall.com/blog/backticks-are-fantastic-because-typing-is-the-worst#user-content-fn-1-9dbe01" id="user-content-fnref-1-9dbe01" data-footnote-ref="true" aria-describedby="footnote-label">1</a></sup>. When you don't
have to nest anything, though, backticks have a killer advantage over subshells:</p>
<ol>
<li>33% fewer keystrokes</li>
</ol>
<p>Choose your own adventure.</p>
<p>When it comes to lisp, I am, of course, <a href="https://github.com/ambirdsall/moon-phase" target="_blank" rel="noopener noreferrer">a gigantic
nerd</a> myself.</p>
<!-- -->
<section data-footnotes="true" class="footnotes"><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5 sr-only" id="footnote-label">Footnotes<a href="https://ambirdsall.com/blog/backticks-are-fantastic-because-typing-is-the-worst#footnote-label" class="hash-link" aria-label="Direct link to Footnotes" title="Direct link to Footnotes">​</a></h2>
<ol>
<li id="user-content-fn-1-9dbe01">
<a href="https://ambirdsall.com/blog/backticks-are-fantastic-because-typing-is-the-worst#user-content-fnref-1-9dbe01" data-footnote-backref="" aria-label="Back to reference 1" class="data-footnote-backref">↩</a>
</li>
</ol>
</section>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Locks Are Some Shit]]></title>
            <link>https://ambirdsall.com/blog/locks-are-some-shit</link>
            <guid>https://ambirdsall.com/blog/locks-are-some-shit</guid>
            <pubDate>Thu, 01 Sep 2016 00:00:00 GMT</pubDate>
            <description><![CDATA[I've been reading [Operating Systems: Three Easy]]></description>
            <content:encoded><![CDATA[<p>I've been reading <a href="http://pages.cs.wisc.edu/~remzi/OSTEP" target="_blank" rel="noopener noreferrer">Operating Systems: Three Easy
Pieces</a>. I highly recommend the book if
you're cool fiddling with C a bit. Actually, scratch that: I recommend the book
if you ever write code that runs on a server or any other linux/osx environment,
<em>especially</em> if you feel a little out of your depth with C. The code examples
are not that intimidating, even if you don't know from typecasting or a pointer
(okay, learning the difference between <code>foo</code>, <code>*foo</code> and <code>&amp;foo</code> is useful, but
not knowing it doesn't prevent you from getting the gist of the code samples),
and getting a deeper understanding of the environment your code works in will
make a lot of known unknowns come into a bit more focus. Honest.</p>
<!-- -->
<p>The first of the three parts was memory virtualization: that is, how computing
time and resources get divvied up amongst processes. There was some fascinating
stuff in there: the API for forking a new process, for instance, is weirder and
cooler than I expected, and learning the topography of the boundary between the
OS and application code (such as <code>ls</code> or <code>Google Chrome.app</code>) is rad. And then
there are parts that are totally internal, though vital, to the kernel. Nothing
against free space management, segmentation, or the five whole chapters on
memory paging, but I'm just not as interested in the kernel's implementation as
its interface.</p>
<p>I kept wondering if I would be better off just jumping straight to concurrency,
because that's what I was really pumped to learn. Would I be missing out on some
logically necessary information if I skipped them?? (Nope.) Learn from my
mistake and jump to the shit you find interesting, because someday you're going
to die. So: <a href="http://pages.cs.wisc.edu/~remzi/OSTEP/threads-locks.pdf" target="_blank" rel="noopener noreferrer">locks</a>!</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="i-dont-need-no-stinkin-lock">I Don't Need No Stinkin' Lock<a href="https://ambirdsall.com/blog/locks-are-some-shit#i-dont-need-no-stinkin-lock" class="hash-link" aria-label="Direct link to I Don't Need No Stinkin' Lock" title="Direct link to I Don't Need No Stinkin' Lock">​</a></h2>
<p>Locks are what keep multiple threads, running in parallel, from fucking each
other up when dealing with a shared bit of state. There is almost no operation
too small for these little bastards to mess up, given the chance. Take this:</p>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">volatile</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> counter </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token function" style="color:#d73a49">mythread</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">arg</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">100000</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    counter</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Because I had to look it up: <code>volatile</code> is a keyword that prevents certain
compiler optimizations from happening, specifically for things like this shared
counter.</p>
<p>So, there's a shared counter and there's a procedure that uses it suitable for
giving to a couple threads. I extracted all the code dealing with that shared
bit of state:</p>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">counter</span><span class="token operator" style="color:#393A34">++</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>That's it! A single line, with a single unary operator. How unsafe can THAT be?
Let's add some logging and fire up a couple threads:</p>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">include</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property string" style="color:#e3116c">&lt;stdio.h&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">include</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property string" style="color:#e3116c">&lt;pthread.h&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">volatile</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> counter </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token function" style="color:#d73a49">mythread</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">arg</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">printf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"%s: begin\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> arg</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">100000</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    counter</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">printf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"%s: end\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> arg</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">main</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> argc</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">argv</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token class-name">pthread_t</span><span class="token plain"> p1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> p2</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">printf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"main: begin (counter = %d)\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> counter</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">pthread_create</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">p1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> mythread</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"A"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">pthread_create</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">p2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> mythread</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"B"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// wait for them fucks to finish</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">pthread_join</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">p1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">pthread_join</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">p2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">printf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"main: done with both (counter = %d)"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> counter</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>So. <code>counter</code> starts at 0, and then two threads each run <code>counter++</code> 100,000
times apiece. That makes 200,000, right?</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">main: begin (counter = 0)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">A: begin</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">B: begin</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">B: end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">A: end</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">main: done with both (counter = 100745)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>INTERESTING.</p>
<p>The trouble is that <code>counter++</code> is <em>three</em> operations, not one:</p>
<ol>
<li>Get the value of <code>counter</code> out of whatever register it's stored in</li>
<li>Increment that value by one</li>
<li>Store the new value in that register</li>
</ol>
<p>So <code>p2</code> reads the value of <code>counter</code>'s register at, e.g., 17; then it increments
the value to 18; at the same time as <code>p2</code> is doing that incrementing, one core
over, <code>p1</code> reads that same register, which is still 17. In parallel, each adds
one to the value it read and stores that new value in the register, and lo: 17 +
1 + 1 = 18.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="lock-that-shit-down">Lock That Shit Down<a href="https://ambirdsall.com/blog/locks-are-some-shit#lock-that-shit-down" class="hash-link" aria-label="Direct link to Lock That Shit Down" title="Direct link to Lock That Shit Down">​</a></h2>
<p>So let's suppose you give a shit about the integrity of basic arithmetic in
your code. The above nonsense won't do at all. I ran it eight times (you can,
too! Just stick the code above in a file (say, <code>bad_math.c</code>), compile it with
something like <code>gcc -o bad_math bad_math.c</code>, and go hog wild), with the following
results:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">ABAB 127499</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ABAB 144926</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ABAB 116942</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ABBA 102988</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ABBA 100745</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ABAB 114188</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">AABB 200000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ABBA 104161</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">avg. 126431</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>I'm honestly pretty shocked that one run actually got 200,000. (As a sidenote,
it looks like the <code>ABAB</code> pattern of thread starts/finishes performs better than
<code>ABBA</code>, with respective averages of 125888 and 102631. <code>AABB</code>, of course, will
always get 200,000 (as would <code>BBAA</code>, but <code>A</code> gets kicked off first by
synchronous code).)</p>
<p>So let's lock this shit down. <code>main</code> doesn't need to change at all: we just need
to initialize a commonly available lock, and use it in the <code>mythread</code> procedure
to ensure that only one thread at a time can access the critical section (that's
the term, coined by Dijkstra, for a section of code dealing with shared memory;
here, <code>counter++</code>). Here's the most vanilla implementation for a POSIX system:</p>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">volatile</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> counter </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token class-name">pthread_mutex_t</span><span class="token plain"> lock </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> PTHREAD_MUTEX_INITIALIZER</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token function" style="color:#d73a49">mythread</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">arg</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">printf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"%s: begin\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> arg</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">100000</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">pthread_mutex_lock</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">lock</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    counter </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">pthread_mutex_unlock</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">lock</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">printf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"%s: end\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> arg</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NULL</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>No need for extra headers; as you probably gathered from the naming, that
locking mechanism is part of <code>pthread.h</code>. When any thread calls
<code>pthread_mutex_lock(&amp;foo)</code> for a lock <code>foo</code>, one of two things happens: if no
one else has the lock, it runs the critical section; or, if another thread has
the lock, it waits for that thread to call <code>pthread_mutex_unlock(&amp;foo)</code> and THEN
does its thing.</p>
<p>As you might expect, this version gets 200,000 every time (but don't believe
me...). So what's going on under the hood?</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="under-the-hood">Under The Hood<a href="https://ambirdsall.com/blog/locks-are-some-shit#under-the-hood" class="hash-link" aria-label="Direct link to Under The Hood" title="Direct link to Under The Hood">​</a></h2>
<p>A huge disclaimer before we start playing around with implementing our own
locks: this shit does not work. Checking some value to determine if a lock is in
use and updating that value to secure that lock takes multiple operations, and
at the application level, there's no way to ensure that that happens atomically.
In a real lock, the hardware exposes a prebundled set of operations that can be
called from a C API.</p>
<p>Depending on your machine, those prebundled operations might look, if you
squint, a little something like this:</p>
<div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">typedef</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token class-name">__lock_t</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> flag</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token class-name">lock_t</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">lock_t</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">lock</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// 0 =&gt; lock is available, 1 =&gt; lock is held</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  lock</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">flag </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">compare_and_swap</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">old_ptr</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> expected</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> new</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> actual </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">old_ptr</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">actual </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> expected</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">old_ptr </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> new</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> actual</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">lock</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">lock_t</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">lock</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">/* while (compare_and_swap(&amp;lock-&gt;flag, 0, 1) == 1) */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">compare_and_swap</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">lock</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">flag</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// do butt-ass nothing until that lock gets released</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">unlock</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">lock_t</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">lock</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  lock</span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain">flag </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This is a shitty lock for a few reasons:</p>
<ol>
<li>If the lock is taken, the thread just wastes CPU cycles until the CPU
scheduler decides to let the locking thread finish its work</li>
<li>It's possible to have a thread that "starves": i.e. never, ever gets the lock</li>
<li>It does not work.</li>
</ol>
<p>But <em>how badly</em> does it not work?</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">ABAB 156000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ABAB 103114</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ABAB 129168</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ABBA 101519</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ABBA 114152</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ABAB 103095</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ABBA 100576</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ABAB 101809</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">avg. 113679</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>So, I mean, that's a worse average than no lock at all, but there was that fluky
200,000 in there. Without the outlier, it would look a lot wors-</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">avg. 115921</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Oh. From an analytical perspective, there are more steps in <code>compare_and_swap</code>
than in <code>counter++</code>, so there are more places for a malicious CPU scheduler to
fuck with things; from a statistical perspective, we're nowhere near solid
ground for declaring a winner in the contest of "no locks vs useless locks";
from an engineering perspective, please just use <code>pthread_mutex_t</code> locks.</p>
<p>There is a glimmer of hope in the book before we totally close the book on
software locking:</p>
<p><img decoding="async" loading="lazy" alt="A lock written from x86 assembly instructions" src="https://ambirdsall.com/assets/images/better_lock-786c63554cb3a5cc75918550d8a01ad8.png" width="1074" height="464" class="img_ev3q"></p>
<p>Seems easy enough. Take the busted lock, swap in the new <code>CompareAndSwap</code>
implementation, however the fuck that works (looks like its evaluating literal
strings as assembly language, but I'm in way over my head here), and give that a
test run:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">ABAB 141034</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ABAB 128868</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ABAB 149149</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ABAB 133336</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ABAB 165496</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ABAB 130632</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ABAB 163608</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ABAB 163309</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">avg. 146929</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Not half bad*!</p>
<p>* Almost exactly half bad</p>
<p>That's all I got rght now on locks.</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="a-brief-aside-about-c">A Brief Aside About C<a href="https://ambirdsall.com/blog/locks-are-some-shit#a-brief-aside-about-c" class="hash-link" aria-label="Direct link to A Brief Aside About C" title="Direct link to A Brief Aside About C">​</a></h2>
<p>Working in C feels like working with a database to me: the fundamental way to
define the shape of your data is a struct: a behaviorless mapping of typed data
fields to names, just like a table in a relational database.</p>
<p>Now, it's more complicated than that, of course, and C is a good bit more
expressive than SQL. For instance, you could use the convention of pointing
certain fields at integers that are pointers to the memory address of functions
and use them to call those functions (I believe that's how C++ classes work
under the hood, but don't quote me on that as an authority).</p>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="stuff-in-this-chapter-that-i-left-out">Stuff In This Chapter That I Left Out<a href="https://ambirdsall.com/blog/locks-are-some-shit#stuff-in-this-chapter-that-i-left-out" class="hash-link" aria-label="Direct link to Stuff In This Chapter That I Left Out" title="Direct link to Stuff In This Chapter That I Left Out">​</a></h2>
<ul>
<li>Various tradeoffs in balancing fairness and performance while maintaining
mutual exclusion (thus, incidentally, the term "mutex")</li>
<li>Some interesting historical locking mechanisms</li>
<li>Some background on what the hardware does and doesn't do, and what that means
for the OS</li>
<li>A cool-ass locking implementation from the linux kernel that tracks both the
status of the lock and the size of its queue with a single integer</li>
</ul>]]></content:encoded>
            <category>operating_systems</category>
            <category>concurrency</category>
            <category>locks</category>
        </item>
        <item>
            <title><![CDATA[Berkely DB Design Lessons]]></title>
            <link>https://ambirdsall.com/blog/berkely-db-design-lessons</link>
            <guid>https://ambirdsall.com/blog/berkely-db-design-lessons</guid>
            <pubDate>Wed, 31 Aug 2016 00:00:00 GMT</pubDate>
            <description><![CDATA[Notes taken while reading the Berkeley DB section]]></description>
            <content:encoded><![CDATA[<p>Notes taken while reading the <a href="http://www.aosabook.org/en/bdb.html" target="_blank" rel="noopener noreferrer">Berkeley DB</a> section
of <a href="http://www.aosabook.org/en/index.html" target="_blank" rel="noopener noreferrer">The Architecture of Open-Source Applications</a>,
which breaks up its discussion of the application's specific architecture with general
lessons and aphorisms. Read the whole thing, it's great.</p>
<!-- -->
<p>There's a grimness to these that I find utterly charming: <a href="https://ambirdsall.com/blog/berkely-db-design-lessons#design-lesson-3">lesson
3</a> warns "[s]oftware architecture degrades in direct
proportion to the number of changes made to the software: bug fixes corrode the
layering and new features stress design." It's an approach that treats software
design in general and object orientation in specific (OO as in "code that goes
'not my job, you figure it out'", not as in "code that is organized with
classes") not like a matter of artistic composition so much as intellectual
sanitation. It's a dirty world out there: wash your ass.</p>
<hr>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="design-lesson-1">Design Lesson 1<a href="https://ambirdsall.com/blog/berkely-db-design-lessons#design-lesson-1" class="hash-link" aria-label="Direct link to Design Lesson 1" title="Direct link to Design Lesson 1">​</a></h2>
<blockquote>
<p>It is vital for any complex software package's testing and maintenance that the
software be designed and built as a cooperating set of modules with
well-defined API boundaries. The boundaries can (and should!) shift as needs
dictate, but they always need to be there. The existence of those boundaries
prevents the software from becoming an unmaintainable pile of spaghetti. Butler
Lampson once said that all problems in computer science can be solved by
another level of indirection. More to the point, when asked what it meant for
something to be object-oriented, Lampson said it meant being able to have
multiple implementations behind an API. The Berkeley DB design and
implementation embody this approach of permitting multiple implementations
behind a common interface, providing an object-oriented look and feel, even
though the library is written in C.</p>
</blockquote>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="design-lesson-2">Design Lesson 2<a href="https://ambirdsall.com/blog/berkely-db-design-lessons#design-lesson-2" class="hash-link" aria-label="Direct link to Design Lesson 2" title="Direct link to Design Lesson 2">​</a></h2>
<blockquote>
<p>A software design is simply one of several ways to force yourself to think
through the entire problem before attempting to solve it. Skilled programmers
use different techniques to this end: some write a first version and throw it
away, some write extensive manual pages or design documents, others fill out a
code template where every requirement is identified and assigned to a specific
function or comment. For example, in Berkeley DB, we created a complete set of
Unix-style manual pages for the access methods and underlying components before
writing any code. Regardless of the technique used, it's difficult to think
clearly about program architecture after code debugging begins, not to mention
that large architectural changes often waste previous debugging effort.
Software architecture requires a different mind set from debugging code, and
the architecture you have when you begin debugging is usually the architecture
you'll deliver in that release.</p>
</blockquote>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="design-lesson-3">Design Lesson 3<a href="https://ambirdsall.com/blog/berkely-db-design-lessons#design-lesson-3" class="hash-link" aria-label="Direct link to Design Lesson 3" title="Direct link to Design Lesson 3">​</a></h2>
<blockquote>
<p>Software architecture does not age gracefully. Software architecture degrades
in direct proportion to the number of changes made to the software: bug fixes
corrode the layering and new features stress design. Deciding when the software
architecture has degraded sufficiently that you should re-design or re-write a
module is a hard decision. On one hand, as the architecture degrades,
maintenance and development become more difficult and at the end of that path
is a legacy piece of software maintainable only by having an army of
brute-force testers for every release, because nobody understands how the
software works inside. On the other hand, users will bitterly complain over the
instability and incompatibilities that result from fundamental changes. As a
software architect, your only guarantee is that someone will be angry with you
no matter which path you choose.</p>
</blockquote>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="design-lesson-4">Design Lesson 4<a href="https://ambirdsall.com/blog/berkely-db-design-lessons#design-lesson-4" class="hash-link" aria-label="Direct link to Design Lesson 4" title="Direct link to Design Lesson 4">​</a></h2>
<blockquote>
<p>It doesn't matter how you name your variables, methods, functions, or what
comments or code style you use; that is, there are a large number of formats
and styles that are "good enough." What does matter, and matters very much, is
that naming and style be consistent. Skilled programmers derive a tremendous
amount of information from code format and object naming. You should view
naming and style inconsistencies as some programmers investing time and effort
to lie to the other programmers, and vice versa. Failing to follow house coding
conventions is a firing offense.</p>
</blockquote>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="design-lesson-5">Design Lesson 5<a href="https://ambirdsall.com/blog/berkely-db-design-lessons#design-lesson-5" class="hash-link" aria-label="Direct link to Design Lesson 5" title="Direct link to Design Lesson 5">​</a></h2>
<blockquote>
<p>Software architects must choose their upgrade battles carefully: users will
accept minor changes to upgrade to new releases (if you guarantee compile-time
errors, that is, obvious failures until the upgrade is complete; upgrade
changes should never fail in subtle ways). But to make truly fundamental
changes, you must admit it's a new code base and requires a port of your user
base. Obviously, new code bases and application ports are not cheap in time or
resources, but neither is angering your user base by telling them a huge
overhaul is really a minor upgrade.</p>
</blockquote>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="design-lesson-6">Design Lesson 6<a href="https://ambirdsall.com/blog/berkely-db-design-lessons#design-lesson-6" class="hash-link" aria-label="Direct link to Design Lesson 6" title="Direct link to Design Lesson 6">​</a></h2>
<blockquote>
<p>In library design, respect for the namespace is vital. Programmers who use your
library should not need to memorize dozens of reserved names for functions,
constants, structures, and global variables to avoid naming collisions between
an application and the library.</p>
</blockquote>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="design-lesson-7">Design Lesson 7<a href="https://ambirdsall.com/blog/berkely-db-design-lessons#design-lesson-7" class="hash-link" aria-label="Direct link to Design Lesson 7" title="Direct link to Design Lesson 7">​</a></h2>
<blockquote>
<p>Before we wrote a shared-memory linked-list package, Berkeley DB engineers
hand-coded a variety of different data structures in shared memory, and these
implementations were fragile and difficult to debug. The shared-memory list
package, modeled after the BSD list package (queue.h), replaced all of those
efforts. Once it was debugged, we never had to debug another shared memory
linked-list problem. This illustrates three important design principles: First,
if you have functionality that appears more than once, write the shared
functions and use them, because the mere existence of two copies of any
specific functionality in your code guarantees that one of them is incorrectly
implemented. Second, when you develop a set of general purpose routines, write
a test suite for the set of routines, so you can debug them in isolation.
Third, the harder code is to write, the more important for it to be separately
written and maintained; it's almost impossible to keep surrounding code from
infecting and corroding a piece of code.</p>
</blockquote>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="design-lesson-8">Design Lesson 8<a href="https://ambirdsall.com/blog/berkely-db-design-lessons#design-lesson-8" class="hash-link" aria-label="Direct link to Design Lesson 8" title="Direct link to Design Lesson 8">​</a></h2>
<blockquote>
<p>Write-ahead logging is another example of providing encapsulation and layering,
even when the functionality is never going to be useful to another piece of
software: after all, how many programs care about LSNs in the cache?
Regardless, the discipline is useful and makes the software easier to maintain,
test, debug and extend.</p>
</blockquote>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="design-lesson-9">Design Lesson 9<a href="https://ambirdsall.com/blog/berkely-db-design-lessons#design-lesson-9" class="hash-link" aria-label="Direct link to Design Lesson 9" title="Direct link to Design Lesson 9">​</a></h2>
<blockquote>
<p>Berkeley DB's choice to use page-level locking was made for good reasons, but
we've found that choice to be problematic at times. Page-level locking limits
the concurrency of the application as one thread of control modifying a record
on a database page will prevent other threads of control from modifying other
records on the same page, while record-level locks permit such concurrency as
long as the two threads of control are not modifying the same record.
Page-level locking enhances stability as it limits the number of recovery paths
that are possible (a page is always in one of a couple of states during
recovery, as opposed to the infinite number of possible states a page might be
in if multiple records are being added and deleted to a page). As Berkeley DB
was intended for use as an embedded system where no database administrator
would be available to fix things should there be corruption, we chose stability
over increased concurrency.</p>
</blockquote>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="design-lesson-10">Design Lesson 10<a href="https://ambirdsall.com/blog/berkely-db-design-lessons#design-lesson-10" class="hash-link" aria-label="Direct link to Design Lesson 10" title="Direct link to Design Lesson 10">​</a></h2>
<blockquote>
<p>Berkeley DB's general-purpose design was well rewarded when we added concurrent
data store functionality. Initially Berkeley DB provided only two modes of
operation: either you ran without any write concurrency or with full
transaction support. Transaction support carries a certain degree of complexity
for the developer and we found some applications wanted improved concurrency
without the overhead of full transactional support. To provide this feature, we
added support for API-level locking that allows concurrency, while guaranteeing
no deadlocks. This required a new and different lock mode to work in the
presence of cursors. Rather than adding special purpose code to the lock
manager, we were able to create an alternate lock matrix that supported only
the lock modes necessary for the API-level locking. Thus, simply by configuring
the lock manager differently, we were able provide the locking support we
needed. (Sadly, it was not as easy to change the access methods; there are
still significant parts of the access method code to handle this special mode
of concurrent access.)</p>
</blockquote>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="design-lesson-11">Design Lesson 11<a href="https://ambirdsall.com/blog/berkely-db-design-lessons#design-lesson-11" class="hash-link" aria-label="Direct link to Design Lesson 11" title="Direct link to Design Lesson 11">​</a></h2>
<blockquote>
<p>When you find an architectural problem you don't want to fix "right now" and
that you're inclined to just let go, remember that being nibbled to death by
ducks will kill you just as surely as being trampled by elephants. Don't be too
hesitant to change entire frameworks to improve software structure, and when
you make the changes, don't make a partial change with the idea that you'll
clean up later—do it all and then move forward. As has been often repeated, "If
you don't have the time to do it right now, you won't find the time to do it
later." And while you're changing the framework, write the test structure as
well.</p>
</blockquote>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="design-lesson-12">Design Lesson 12<a href="https://ambirdsall.com/blog/berkely-db-design-lessons#design-lesson-12" class="hash-link" aria-label="Direct link to Design Lesson 12" title="Direct link to Design Lesson 12">​</a></h2>
<blockquote>
<p>Mpool and Log use internal handle methods to facilitate write-ahead logging,
and in some cases, the method declaration is longer than the code it runs,
since the code is often comparing two integral values and nothing more. Why
bother with such insignificant methods, just to maintain consistent layering?
Because if your code is not so object-oriented as to make your teeth hurt, it
is not object-oriented enough. Every piece of code should do a small number of
things and there should be a high-level design encouraging programmers to build
functionality out of smaller chunks of functionality, and so on. If there's
anything we have learned about software development in the past few decades, it
is that our ability to build and maintain significant pieces of software is
fragile. Building and maintaining significant pieces of software is difficult
and error-prone, and as the software architect, you must do everything that you
can, as early as you can, as often as you can, to maximize the information
conveyed in the structure of your software.</p>
</blockquote>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="design-lesson-13">Design Lesson 13<a href="https://ambirdsall.com/blog/berkely-db-design-lessons#design-lesson-13" class="hash-link" aria-label="Direct link to Design Lesson 13" title="Direct link to Design Lesson 13">​</a></h2>
<blockquote>
<p>There is rarely such thing as an unimportant bug. Sure, there's a typo now and
then, but usually a bug implies somebody didn't fully understand what they were
doing and implemented the wrong thing. When you fix a bug, don't look for the
symptom: look for the underlying cause, the misunderstanding, if you will,
because that leads to a better understanding of the program's architecture as
well as revealing fundamental underlying flaws in the design itself.</p>
</blockquote>
<h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="design-lesson-14">Design Lesson 14<a href="https://ambirdsall.com/blog/berkely-db-design-lessons#design-lesson-14" class="hash-link" aria-label="Direct link to Design Lesson 14" title="Direct link to Design Lesson 14">​</a></h2>
<blockquote>
<p>Database recovery is a complex topic, difficult to write and harder to debug
because recovery simply shouldn't happen all that often. In his Turing Award
Lecture, Edsger Dijkstra argued that programming was inherently difficult and
the beginning of wisdom is to admit we are unequal to the task. Our goal as
architects and programmers is to use the tools at our disposal: design, problem
decomposition, review, testing, naming and style conventions, and other good
habits, to constrain programming problems to problems we can solve.</p>
</blockquote>]]></content:encoded>
            <category>quotes</category>
            <category>design</category>
            <category>architecture</category>
        </item>
    </channel>
</rss>
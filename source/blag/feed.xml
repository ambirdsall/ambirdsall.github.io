<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/blag</id>
  <link href="http://blog.url.com/blag"/>
  <link href="http://blog.url.com/source/blag/feed.xml" rel="self"/>
  <updated>2016-12-09T00:12:22-08:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Zero-friction testing in rails</title>
    <link rel="alternate" href="http://blog.url.com/blag/zero-friction-testing-in-rails/"/>
    <id>http://blog.url.com/blag/zero-friction-testing-in-rails/</id>
    <published>2016-12-09T00:12:22-08:00</published>
    <updated>2016-12-12T15:56:46-08:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;hr&gt;

&lt;p&gt;title: Zero-friction testing in rails
topic: Testing
date: 2016-12-09 08:12:22 UTC
&amp;hellip;&lt;/p&gt;

&lt;p&gt;So. It wasn&amp;rsquo;t until a few months ago that I finally worked on a software
project with full test coverage. Now that I have, I&amp;rsquo;m a little shocked and
horrified it took this long: the quality of life is drastically better on
this side. The project in question is &lt;a href="https://law.cornell.edu/rio"&gt;RIO&lt;/a&gt;, an
ES6 legal citation parser I&amp;rsquo;ve been building for Cornell Law&amp;rsquo;s LII. I&amp;rsquo;ve been
developing that solo, so I had the liberty of setting the testing mantle up to
suit my own workflow: heavily terminal-based, using vim and tmux.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve found that it&amp;rsquo;s a massive help to be able to have tests constantly
rerunning in a splitscreen with vim every time I save a file. The constant
feedback means I don&amp;rsquo;t need to keep switching mental context to see if my code
is correct: I can, while still in my editor, just glance over at a current test
run. This has utterly revolutionized how I feel about refactoring: knowing
exactly when my code breaks and unbreaks as I rearrange things is a massive
help for refactoring, and reveals bugs pretty much the instant they are
introduced. I haven&amp;rsquo;t had to write a &lt;code&gt;debugger&lt;/code&gt; in anger in a shockingly long
time. I want that confidence and speed when I work on rails projects, too.&lt;/p&gt;

&lt;p&gt;So, to recap, I want&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;fast tests that&lt;/li&gt;
&lt;li&gt;run automatically on file save&lt;/li&gt;
&lt;li&gt;run by a persistent server I can ogle in a tmux split while I vim away in
the same terminal window.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;h3 id="fast-tests"&gt;
  Fast tests
  &lt;a class="section__title" href="#fast-tests"&gt;§&lt;/a&gt;
&lt;/h2&gt;&lt;/p&gt;

&lt;p&gt;The speed can be helped by &lt;code&gt;spring&lt;/code&gt;, a gem that comes in rails&amp;rsquo; default
&lt;code&gt;Gemfile&lt;/code&gt; but which takes a bit of setup. Once you &lt;em&gt;have&lt;/em&gt; set it up, though,
it&amp;rsquo;s brilliant. After the first command which requires loading your rails app,
&lt;code&gt;spring&lt;/code&gt; keeps running as a background process, with your application
environment loaded into memory. This means that the next time you run a command
that requires a loaded app, like your test suite, you get to skip the
several-second wait for rails to bootstrap itself­you only need to run
the test files themselves. Out of the box, &lt;code&gt;spring&lt;/code&gt; only knows how to wrap the
&lt;code&gt;rails&lt;/code&gt; and &lt;code&gt;rake&lt;/code&gt; commands to use the preloaded app, but the
&lt;code&gt;spring-commands-rspec&lt;/code&gt; gem expands that set to also wrap &lt;code&gt;rspec&lt;/code&gt;, which I&amp;rsquo;m
using for my tests.&lt;/p&gt;

&lt;p&gt;Incidentally, I&amp;rsquo;ve read things which assert that &lt;code&gt;minitest&lt;/code&gt; is a good bit
faster than &lt;code&gt;rspec&lt;/code&gt;; but &lt;code&gt;rspec&lt;/code&gt; has quite a lot of community support, and I&amp;rsquo;ve
been writing a ton of &lt;code&gt;jasmine&lt;/code&gt; tests lately, which has wicked similar syntax.
The point of this is to lower the cognitive load of testing, after all. With a
massive test suite, though, the time savings might be worth switching over. As
always, measure: the old command-line standby &lt;code&gt;time&lt;/code&gt; is your friend.&lt;/p&gt;

&lt;p&gt;&lt;h3 id="running-automatically-on-file-save"&gt;
  Running automatically on file save
  &lt;a class="section__title" href="#running-automatically-on-file-save"&gt;§&lt;/a&gt;
&lt;/h2&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;guard&lt;/code&gt; is the gem of choice here. It reads a &lt;code&gt;Guardfile&lt;/code&gt; in the root of your
project: in that &lt;code&gt;Guardfile&lt;/code&gt;, which is written in a ruby DSL, you define what
actions &lt;code&gt;guard&lt;/code&gt; should run for given project files and which files to ignore.
If you, like I, are on osx, you should also install &lt;code&gt;rb-fsevent&lt;/code&gt;, which makes
&lt;code&gt;guard&lt;/code&gt; listen to osx&amp;rsquo;s native FSEvents API instead of having to poll the disk
for changes (which is slower and takes more work from your CPU). You can
specify any command-line callback you like in your &lt;code&gt;Guardfile&lt;/code&gt; with backticks,
but there are quite a few guard plugins that automatically set up conventional
rules for a conventional rails configuration and tool-specific configuration
options. Enter &lt;code&gt;guard-rspec&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here are the versions of all the gems I used when I went through this myself,
if you&amp;rsquo;re into that sort of thing:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;guard 2.14.0
guard-rspec 4.7.3
rails 4.2.5
rb-fsevent 0.9.8
ruby 2.3.1
spring 2.0.0
spring-command-rspec 1.0.4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;h3 id="lets-set-these-bad-not-specifically-gendered-children-up"&gt;
  Let&amp;rsquo;s set these bad not-specifically-gendered children up
  &lt;a class="section__title" href="#lets-set-these-bad-not-specifically-gendered-children-up"&gt;§&lt;/a&gt;
&lt;/h2&gt;&lt;/p&gt;

&lt;p&gt;In your &lt;code&gt;Gemfile&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;group&lt;/span&gt; &lt;span class="ss"&gt;:development&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:test&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;'spring-commands-rspec'&lt;/span&gt;
  &lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;'rspec-rails'&lt;/span&gt;
  &lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;'guard-rspec'&lt;/span&gt;
  &lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;'rb-fsevent'&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="sb"&gt;`uname`&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="sr"&gt;/Darwin/&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;bundle
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;h3 id="setup-spring"&gt;
  Setup Spring
  &lt;a class="section__title" href="#setup-spring"&gt;§&lt;/a&gt;
&lt;/h2&gt;&lt;/p&gt;

&lt;p&gt;To generate the command wrappers necessary to use the preloaded app, run&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;spring binstub --all
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which should generate some output along the lines of&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="k"&gt;*&lt;/span&gt; bin/rake: spring inserted
&lt;span class="k"&gt;*&lt;/span&gt; bin/rspec: spring inserted
&lt;span class="k"&gt;*&lt;/span&gt; bin/rails: spring inserted
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you forgot to rebundle before running this or otherwise need to change the
configuration for &lt;code&gt;spring&lt;/code&gt;, you&amp;rsquo;ll need to stop and restart &lt;code&gt;spring&lt;/code&gt; with&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;spring stop
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Otherwise, it will keep reusing the old outdated preloaded environment. And, if you&amp;rsquo;re paranoid:&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;spring status
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For those quick tests I mentioned, just run&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;bin/rspec
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;bin/rspec&lt;/code&gt; is the wrapper script genreated back in the &lt;code&gt;spring binstub --all&lt;/code&gt;
step. You could also run &lt;code&gt;rspec&lt;/code&gt; through &lt;code&gt;spring&lt;/code&gt; manually with&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;spring rspec
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Life is full of choices, and many of them don&amp;rsquo;t matter. I timed both on some
empty spec files I scaffolded (with test output truncated, of course):&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="gp"&gt;% &lt;/span&gt;spring stop
Spring stopped.

&lt;span class="gp"&gt;% &lt;/span&gt;&lt;span class="nb"&gt;time &lt;/span&gt;bin/rspec

&lt;span class="o"&gt;[&lt;/span&gt;...]
Finished &lt;span class="k"&gt;in &lt;/span&gt;0.66145 seconds &lt;span class="o"&gt;(&lt;/span&gt;files took 0.61181 seconds to load&lt;span class="o"&gt;)&lt;/span&gt;
32 examples, 0 failures, 18 pending

bin/rspec  0.25s user 0.06s system 4% cpu 6.348 total

&lt;span class="gp"&gt;% &lt;/span&gt;&lt;span class="nb"&gt;time &lt;/span&gt;bin/rspec

&lt;span class="o"&gt;[&lt;/span&gt;...]
Finished &lt;span class="k"&gt;in &lt;/span&gt;0.59806 seconds &lt;span class="o"&gt;(&lt;/span&gt;files took 0.58837 seconds to load&lt;span class="o"&gt;)&lt;/span&gt;
32 examples, 0 failures, 18 pending

bin/rspec  0.27s user 0.09s system 19% cpu 1.864 total

&lt;span class="gp"&gt;% &lt;/span&gt;spring stop
Spring stopped.

&lt;span class="gp"&gt;% &lt;/span&gt;&lt;span class="nb"&gt;time &lt;/span&gt;spring rspec

&lt;span class="o"&gt;[&lt;/span&gt;...]
Finished &lt;span class="k"&gt;in &lt;/span&gt;0.58927 seconds &lt;span class="o"&gt;(&lt;/span&gt;files took 0.36102 seconds to load&lt;span class="o"&gt;)&lt;/span&gt;
32 examples, 0 failures, 18 pending

spring rspec  0.27s user 0.09s system 5% cpu 5.996 total

&lt;span class="gp"&gt;% &lt;/span&gt;&lt;span class="nb"&gt;time &lt;/span&gt;spring rspec

&lt;span class="o"&gt;[&lt;/span&gt;...]
Finished &lt;span class="k"&gt;in &lt;/span&gt;0.57317 seconds &lt;span class="o"&gt;(&lt;/span&gt;files took 0.34346 seconds to load&lt;span class="o"&gt;)&lt;/span&gt;
32 examples, 0 failures, 18 pending

spring rspec  0.27s user 0.08s system 25% cpu 1.398 total
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Either way, &lt;code&gt;spring&lt;/code&gt; made the tests &lt;em&gt;much&lt;/em&gt; faster after the first run, and
those savings persist so long as the spring server is running.&lt;/p&gt;

&lt;p&gt;&lt;h3 id="setup-guard"&gt;
  Setup Guard
  &lt;a class="section__title" href="#setup-guard"&gt;§&lt;/a&gt;
&lt;/h2&gt;&lt;/p&gt;

&lt;p&gt;I assume you already ran&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;rails g rspec:install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;but if you didn&amp;rsquo;t yet, do. Then run&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="gp"&gt;% &lt;/span&gt;guard init

01:34:28 - INFO - Writing new Guardfile to /Users/ambirdsall/code/rails/event_scheduler/Guardfile
01:34:28 - INFO - rspec guard added to Guardfile, feel free to edit it
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Find this line of your new &lt;code&gt;Guardfile&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;guard&lt;/span&gt; &lt;span class="ss"&gt;:rspec&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;cmd: &lt;/span&gt;&lt;span class="s2"&gt;"bundle exec rspec"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and change it to&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;guard&lt;/span&gt; &lt;span class="ss"&gt;:rspec&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;cmd: &lt;/span&gt;&lt;span class="s2"&gt;"bin/rspec"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NICE.&lt;/p&gt;

&lt;p&gt;&lt;h3 id="there-you-go"&gt;
  There you go
  &lt;a class="section__title" href="#there-you-go"&gt;§&lt;/a&gt;
&lt;/h2&gt;&lt;/p&gt;

&lt;p&gt;Now just fire up &lt;code&gt;guard&lt;/code&gt; with the command &lt;code&gt;guard&lt;/code&gt;. Shazam! Your tests will run on save.&lt;/p&gt;

&lt;p&gt;The little prompt &lt;code&gt;guard&lt;/code&gt; gives you is an interactive ruby console, too, which
is really handy for double-checking the syntax of quick snippets when fixing
test failures. Use Ctrl-d to kill it, or just close your terminal.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Building An Adequate Wedding Gallery</title>
    <link rel="alternate" href="http://blog.url.com/blag/building-an-adequate-wedding-gallery/"/>
    <id>http://blog.url.com/blag/building-an-adequate-wedding-gallery/</id>
    <published>2016-11-29T01:02:38-08:00</published>
    <updated>2017-01-09T18:08:51-08:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;hr&gt;

&lt;p&gt;title: Building An Adequate Wedding Gallery
topic: Ruby
date: 2016-11-29 09:02:38 UTC
&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;h3 id="a-cool-ass-photo-album"&gt;
  A Cool-ass photo album
  &lt;a class="section__title" href="#a-cool-ass-photo-album"&gt;§&lt;/a&gt;
&lt;/h2&gt;&lt;/p&gt;

&lt;p&gt;Our wedding photographer was a little slow in getting us our images, so I got
to thinking about what to do. I decided I wanted a static image gallery, and I
wanted it to be easy for anyone who came to get copies of photos they like,
whether for online use or making prints. For prints, people should be able to
download the high-resolution originals, and those are such big files, it makes
sense to zip the files before downloading. For digital use, there should be
smaller image files for download&lt;span class="sidenote__mark"&gt;*&lt;/span&gt;&lt;span class="sidenote"&gt;I whipped up some &lt;code&gt;imagemagick&lt;/code&gt; scripts to do batch resizing and optimizing, and hosted all the photos as public-read files in an s3 bucket&lt;/span&gt;
,
but that could easily be handled entirely client-side.&lt;/p&gt;

&lt;p&gt;I decided that, in addition to normal &amp;ldquo;download this photo&amp;rdquo; usage, I wanted the
ability to&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Select any given subset of the images easily; and&lt;/li&gt;
&lt;li&gt;Download that set of images as a zip file&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is a kinda fun UI problem AND has a fun backend problem despite dealing
with static data. Which is great: since we&amp;rsquo;re not barring our photos from
anyone, there&amp;rsquo;s no need to implement any auth, which simplifies things.&lt;/p&gt;

&lt;p&gt;The zipping part means there needs to be some server code running; I decided to use
a rails app hosted on elastic beanstalk. I was already hosting the images on
s3, and AWS designs all their services for easy interop (naturally, to keep all
your money going their way); besides, I had never hosted an app that way and I
wanted to learn.&lt;/p&gt;

&lt;p&gt;Admittedly, for the initial version of this gallery, rails was overkill: just
within the world of ruby development, Sinatra would be plenty for just an image
gallery and a single zipping endpoint. But server-side overkill isn&amp;rsquo;t
necessarily bad: as lost as it&amp;rsquo;s fast and I don&amp;rsquo;t mind paying for it (let&amp;rsquo;s be
real, my family photos aren&amp;rsquo;t going to get millions of distinct views any day
soon), there&amp;rsquo;s no real downside&lt;span class="sidenote__mark"&gt;*&lt;/span&gt;&lt;span class="sidenote"&gt;Certainly nothing compared to sites
that make you download megabytes of javascript before the first paint on
mobile&lt;/span&gt;
. Besides:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;I have notions of extending the app with the ability to search and filter by
name, and rails makes building out the additional models down the line quite
straightforward; and&lt;/li&gt;
&lt;li&gt;I wanted to practice working in and testing rails code for professional reasons&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So fuck it, rails it is.&lt;/p&gt;

&lt;p&gt;&lt;h3 id="open-zipper"&gt;
  Open zipper?
  &lt;a class="section__title" href="#open-zipper"&gt;§&lt;/a&gt;
&lt;/h2&gt;&lt;/p&gt;

&lt;p&gt;I searched for &amp;ldquo;zip&amp;rdquo; on &lt;a href="https://www.ruby-toolbox.com/search?q=zip"&gt;Ruby
Toolbox&lt;/a&gt;, and found two projects
that seemed to actually be intended for zipping files:&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/rubyzip-gem-stats.png" class="post-img" alt="Rubyzip gem stats" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/zip-gem-stats.png" class="post-img" alt="Zip gem stats" /&gt;&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t know how a popularity rating is calculated, but it has a Science Beaker
icon, so it must be important. &lt;a href="https://github.com/rubyzip/rubyzip"&gt;Rubyzip&lt;/a&gt;,
it seems, is the gem for me.&lt;/p&gt;

&lt;p&gt;&lt;h3 id="zip-it-up"&gt;
  Zip it up.
  &lt;a class="section__title" href="#zip-it-up"&gt;§&lt;/a&gt;
&lt;/h2&gt;&lt;/p&gt;

&lt;p&gt;That repo&amp;rsquo;s &lt;code&gt;README.md&lt;/code&gt; has some intro-type example code:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'rubygems'&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'zip'&lt;/span&gt;

&lt;span class="n"&gt;folder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Users/me/Desktop/stuff_to_zip"&lt;/span&gt;
&lt;span class="n"&gt;input_filenames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'image.jpg'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'description.txt'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'stats.csv'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;zipfile_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"/Users/me/Desktop/archive.zip"&lt;/span&gt;

&lt;span class="no"&gt;Zip&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;zipfile_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;Zip&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;CREATE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;zipfile&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;input_filenames&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="c1"&gt;# Two arguments:&lt;/span&gt;
    &lt;span class="c1"&gt;# - The name of the file as it will appear in the archive&lt;/span&gt;
    &lt;span class="c1"&gt;# - The original file, including the path to find it&lt;/span&gt;
    &lt;span class="n"&gt;zipfile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;folder&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'/'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="n"&gt;zipfile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;get_output_stream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"myFile"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;write&lt;/span&gt; &lt;span class="s2"&gt;"myFile contains just this"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It&amp;rsquo;s not clear from the example alone what files do and don&amp;rsquo;t need to already
exist to get this to work. I fiddled around until I got a minimal POC working,
which looked something like this:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# In the Gemfile, mind, you need&lt;/span&gt;
&lt;span class="c1"&gt;#   gem 'rubyzip'&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'zip'&lt;/span&gt;

&lt;span class="n"&gt;folder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"/Users/ambirdsall/Desktop/actual_preexisting_directory"&lt;/span&gt;
&lt;span class="n"&gt;input_filenames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'actual_preexisting_file.png'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;zipfile_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"/Users/ambirdsall/Desktop/not_yet_existing_archive_file.zip"&lt;/span&gt;

&lt;span class="no"&gt;Zip&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;zipfile_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;Zip&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;CREATE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;zipfile&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;input_filenames&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="c1"&gt;# Two arguments:&lt;/span&gt;
    &lt;span class="c1"&gt;# - The name of the file as it will appear in the archive&lt;/span&gt;
    &lt;span class="c1"&gt;# - The original file, including the path to find it&lt;/span&gt;
    &lt;span class="n"&gt;zipfile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;folder&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'/'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="n"&gt;zipfile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;get_output_stream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"new_filename_for_streamed_data.txt"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;write&lt;/span&gt; &lt;span class="s2"&gt;"I'm a dynamically-created plain text file"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To work inside a filesystem like this, &lt;code&gt;rubyzip&lt;/code&gt; needs a full path to the
source files and the zipfile&amp;rsquo;s directory (that all throws a big error if the
path given to &lt;code&gt;zipfile.add&lt;/code&gt; isn&amp;rsquo;t valid); but the &lt;code&gt;zipfile_name&lt;/code&gt; doesn&amp;rsquo;t need to
exist yet.&lt;/p&gt;

&lt;p&gt;More significantly, that &lt;code&gt;&amp;quot;new_filename_for_streamed_data&amp;quot;&lt;/code&gt; business implies
that the filesystem can be skipped altogether for data which can be
streamed—from a database, say, &lt;a href="https://github.com/ambirdsall/wedding_photos/blob/383ddcb249c657bfbf944533373d7d560cea11ab/app/actors/photo_fetcher.rb#L12-L16"&gt;or s3&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is plenty to work with: just get a list of selected images from the UI;
use that list to generate the corresponding s3 URLs; and then stream the
contents of each photo into a zipfile which is then sent to the user&amp;rsquo;s browser
for download. The &lt;code&gt;zipfile.get_output_stream&lt;/code&gt; trick can be used for a friendly
index.txt file down the line, after I&amp;rsquo;ve mapped each photo to the names of the
people in it.&lt;/p&gt;

&lt;p&gt;&lt;h3 id="coming-soon"&gt;
  Coming Soon&amp;hellip;
  &lt;a class="section__title" href="#coming-soon"&gt;§&lt;/a&gt;
&lt;/h2&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll dive into the design of the UI and of the server code soon, each in its own post.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Cron: Legacy</title>
    <link rel="alternate" href="http://blog.url.com/blag/cron/"/>
    <id>http://blog.url.com/blag/cron/</id>
    <published>2016-10-11T15:15:35-07:00</published>
    <updated>2016-12-21T19:10:47-08:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;hr&gt;

&lt;p&gt;title: &amp;lsquo;Cron: Legacy&amp;rsquo;
topic: OSX &amp;lt; UNIX
date: 2016-10-11 22:15:35 UTC
&amp;hellip;&lt;/p&gt;

&lt;p&gt;I thought it would be cool to get my computer to automatically run &lt;code&gt;brew
update&lt;/code&gt; every so often in the background and email me if anything went wrong. I
thought it would be pretty simple! It was not, in fact, prety simple: I ran
into a bunch of super frustrating errors, usually because I was taking some
aspect of my normal terminal environment for granted (the &lt;code&gt;$PATH&lt;/code&gt; variable that
tells the shell where to look to find commands; email protocols and
authentication; ssh authentication; error handling in the shell; etc etc etc).&lt;/p&gt;

&lt;p&gt;But I learned a bunch in the process! So kick back, pour yourself a drink, and
learn about &lt;code&gt;cron&lt;/code&gt;, the old-school unix tool you can use to run programs behind
your own back.&lt;/p&gt;

&lt;p&gt;&lt;h3 id="what-is-a-cron-and-how-does-it-cron"&gt;
  What is a &lt;code&gt;cron&lt;/code&gt; and how does it&amp;hellip; cron?
  &lt;a class="section__title" href="#what-is-a-cron-and-how-does-it-cron"&gt;§&lt;/a&gt;
&lt;/h2&gt;&lt;/p&gt;

&lt;p&gt;Cron is an old unix program used to run commands repeatedly on a schedule.
There are two main parts to the cron system: there is the cron daemon, a
program that (once set up) is constantly running in the background; and there
is the crontab file, which keeps the schedule of programs to run &lt;span class="sidenote__mark"&gt;*&lt;/span&gt;&lt;span class="sidenote"&gt;Depending on your operating system, there might be both system-wide
crontabs and user-specific crontab files; I&amp;rsquo;m only going to discuss systems
with a single crontab file here.&lt;/span&gt;
. Once every minute on the minute,
assuming your computer is awake and running, the cron daemon (the system
automatically launches &lt;code&gt;cron&lt;/code&gt; after you save your first valid crontab file, and
on boot afterwards) evaluates each line of all of the relevant installed
crontab files, running any commands whose schedules match on the current
minute. Any output to &lt;code&gt;$STDERR&lt;/code&gt; is assumed to be an error and is mailed to you:
&lt;code&gt;cron&lt;/code&gt;&amp;rsquo;s default mailing strategy is a local &amp;ldquo;mailbox&amp;rdquo; originally used for
pre-internet user-to-user messages within a multi-user system, but if you&amp;rsquo;re
fancy with the google, it&amp;rsquo;s pretty manageable to teach it to use something like
gmail instead.&lt;/p&gt;

&lt;p&gt;&lt;h3 id="the-crontab-file"&gt;
  The &lt;code&gt;crontab&lt;/code&gt; file
  &lt;a class="section__title" href="#the-crontab-file"&gt;§&lt;/a&gt;
&lt;/h2&gt;&lt;/p&gt;

&lt;p&gt;You edit the crontab file with the command &lt;code&gt;crontab -e&lt;/code&gt;, regardless of where
you are in the filesystem. You need to do some config to use this; more on that
later.&lt;/p&gt;

&lt;p&gt;Each line either contains a shell variable definition, in which case &lt;code&gt;cron&lt;/code&gt;
updates its environment accordingly&lt;span class="sidenote__mark"&gt;*&lt;/span&gt;&lt;span
class="sidenote"&gt;Setting &lt;code&gt;$SHELL&lt;/code&gt;, &lt;code&gt;$PATH&lt;/code&gt;, and &lt;code&gt;$MAILTO&lt;/code&gt; correctly is quite
important, and worth some googling if you have questions.&lt;/span&gt;, or a
scheduled command. Scheduled commands look a bit like this:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;* * * * *  /absolute/path/of/command/to/execute
│ │ │ │ │
│ │ │ │ └─── day of week (0 - 7) (0 to 6 are Sunday to Saturday, or use names; 7 is Sunday, the same as 0)
│ │ │ └──────── month (1 - 12)
│ │ └───────────── day of month (1 - 31)
│ └────────────────── hour (0 - 23)
└─────────────────────── min (0 - 59)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For any element of a schedule (hours, minutes, etc), you can use:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;*  matches every value
-  defines a range, like `9-17` for every hour from 9AM to 5PM
,  separates multiple individual values, such as `MON,WED,FRI`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, for example &lt;code&gt;0 9-17 * * 1-5&lt;/code&gt; matches each hour from 9AM to 5PM on the hour,
each weekday, with no restrictions by month or day of month.&lt;/p&gt;

&lt;p&gt;&lt;h3 id="editing-crontab-takes-special-config-because-life-is-suffering"&gt;
  Editing &lt;code&gt;crontab&lt;/code&gt; takes special config, because life is suffering
  &lt;a class="section__title" href="#editing-crontab-takes-special-config-because-life-is-suffering"&gt;§&lt;/a&gt;
&lt;/h2&gt;&lt;/p&gt;

&lt;p&gt;So &lt;code&gt;crontab -e&lt;/code&gt; opens the file with whatever your have set to &lt;code&gt;$EDITOR&lt;/code&gt; in your
shell session. I use vim, which is secretly a problem: the &lt;code&gt;crontab&lt;/code&gt; program
sets some rules about how you save the file, and vim&amp;rsquo;s defaults work
differently.&lt;/p&gt;

&lt;p&gt;Specifically, when vim writes changes to a file, it first saves them as a
backup file, then overwrites the original. This helps vim be more confident it
won&amp;rsquo;t corrupt data if it crashes partway through writing, but &lt;code&gt;crontab&lt;/code&gt; won&amp;rsquo;t
let you write to anything but the file itself, in-place. To get around this,
add to &lt;code&gt;~/.vimrc&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;autocmd &lt;span class="k"&gt;filetype&lt;/span&gt; crontab &lt;span class="k"&gt;setlocal&lt;/span&gt; nobackup nowritebackup
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;h3 id="cron-doesnt-have-a-lot-of-things-i-took-for-granted-about-the-shell-environment"&gt;
  &lt;code&gt;cron&lt;/code&gt; doesn&amp;rsquo;t have a lot of things I took for granted about the shell environment
  &lt;a class="section__title" href="#cron-doesnt-have-a-lot-of-things-i-took-for-granted-about-the-shell-environment"&gt;§&lt;/a&gt;
&lt;/h2&gt;&lt;/p&gt;

&lt;p&gt;This isn&amp;rsquo;t that bad to deal with once you get your head around it, but it took
me a while to realize just how much implicit environment I rely on when working
in a terminal. The main one is the &lt;code&gt;$PATH&lt;/code&gt; variable: for every command that
isn&amp;rsquo;t built-in shell syntax, odds are good you&amp;rsquo;ll need to prepend the &lt;code&gt;/bin/&lt;/code&gt;
or &lt;code&gt;/usr/local/bin/&lt;/code&gt; or &lt;code&gt;/usr/sbin/&lt;/code&gt; or what have you. If you don&amp;rsquo;t know the
full path of some command you use a lot, for example, &lt;code&gt;git&lt;/code&gt;, pop open a
terminal and run &lt;code&gt;which git&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;My first instinct was to make one of my &lt;code&gt;crontab&lt;/code&gt; file&amp;rsquo;s first lines something like&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/Users/ambirdsall/bin:/usr/local/bin:/usr/bin:/bin:/I/dunno/maybe/sbin:/other/things/I&lt;span class="s1"&gt;'m/used/to/also
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If my crontab environment has access to all the same stuff I use everyday in my
terminal, then writing a cron command is just like writing any old terminal
command. But I think that&amp;rsquo;s the wrong approach, for two reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Anything more complicated than a one-liner (and even many of those), you&amp;rsquo;re
better off just saving in a shell script&lt;/li&gt;
&lt;li&gt;If you succeed, you&amp;rsquo;ve just hidden from yourself how things work under the
hood AND made it easier for part of your terminal-based life to get out of
sync.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you feel a little lost when working with the full absolute paths of programs
and would like a better handle on why different programs live in &lt;code&gt;/bin&lt;/code&gt; vs
&amp;rsquo;/sbin&amp;rsquo; vs &lt;code&gt;/usr/sbin&lt;/code&gt; vs &lt;code&gt;/usr/local/bin&lt;/code&gt;—or even why some programs live in
more than one of those places—just run &lt;code&gt;man hier&lt;/code&gt; in your terminal and give it
a quick read.&lt;/p&gt;

&lt;p&gt;&lt;h3 id="lets-put-almost-all-of-it-together"&gt;
  Let&amp;rsquo;s put almost all of it together
  &lt;a class="section__title" href="#lets-put-almost-all-of-it-together"&gt;§&lt;/a&gt;
&lt;/h2&gt;&lt;/p&gt;

&lt;p&gt;Disclaimer: we&amp;rsquo;re skipping over some hoops I had to jump through to send actual
emails to my gmail account from the command line (google it) and the way
thornier issue of how to authenticate an SSH connection with github (which is
where &lt;code&gt;brew&lt;/code&gt; searches for updates) in a bare-bones scripting environment
(google &amp;ldquo;askpass&amp;rdquo; or go &lt;em&gt;really&lt;/em&gt; HAM and learn to use &lt;code&gt;expect&lt;/code&gt;). So:&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;0 &lt;span class="k"&gt;*&lt;/span&gt; &lt;span class="k"&gt;*&lt;/span&gt; &lt;span class="k"&gt;*&lt;/span&gt; &lt;span class="k"&gt;*&lt;/span&gt; /usr/local/bin/brew update
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;will run &lt;code&gt;brew update&lt;/code&gt; every hour on the hour, every single day, with zero
conscious effort on my part. Awesome! Awesome.&lt;/p&gt;

&lt;p&gt;Wait, this &lt;em&gt;is&lt;/em&gt; actually awesome, right?&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/dumb-cron-error-email.png" alt="Dumb cron error email" /&gt;&lt;/p&gt;

&lt;p&gt;Goddamn it.&lt;/p&gt;

&lt;p&gt;&lt;h3 id="okay-lets-just-go-through-one-of-the-dumb-problems"&gt;
  Okay, let&amp;rsquo;s just go through &lt;em&gt;one&lt;/em&gt; of the dumb problems
  &lt;a class="section__title" href="#okay-lets-just-go-through-one-of-the-dumb-problems"&gt;§&lt;/a&gt;
&lt;/h2&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s what was going on:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If everything is up to date, &lt;code&gt;brew&lt;/code&gt; exits with a heads-up to &lt;code&gt;$STDERR&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Seeing a message in the error stream, &lt;code&gt;cron&lt;/code&gt; emailed me&lt;/li&gt;
&lt;li&gt;I don&amp;rsquo;t want email alerts every hour that things are still up-to-date&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So:&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;/usr/local/bin/brew update 2&amp;gt;&amp;amp;1 &amp;gt; /dev/null | grep -v &lt;span class="s1"&gt;'up-to-date'&lt;/span&gt; &amp;gt;&amp;amp;2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First, a quick note: I use &lt;code&gt;zsh&lt;/code&gt;, not &lt;code&gt;bash&lt;/code&gt;, and there are a few differences
in how the two shells handle redirection, so if you use &lt;code&gt;bash&lt;/code&gt;, you might
need to make a few changes to get it working properly
&lt;span class="sidenote__mark"&gt;*&lt;/span&gt;&lt;span class="sidenote"&gt;If you don&amp;rsquo;t know what shell you&amp;rsquo;re using, it&amp;rsquo;s probably &lt;code&gt;bash&lt;/code&gt;,
but you can check by running &lt;code&gt;echo $SHELL&lt;/code&gt;.&lt;/span&gt;
.  Let&amp;rsquo;s break this down:&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;2&amp;gt;&amp;amp;1 &amp;gt; /dev/null
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;2&amp;gt;&amp;amp;1&lt;/code&gt; redirects &lt;code&gt;$STDERR&lt;/code&gt; to &lt;code&gt;$STDOUT&lt;/code&gt;. The &lt;code&gt;&amp;gt; /dev/null&lt;/code&gt; redirects
&lt;code&gt;$STDOUT&lt;/code&gt; to the Pit of Despair. If you think this seems like it will redirect
EVERYTHING to &lt;code&gt;/dev/null&lt;/code&gt;, leaving you nothing useful to work with, you think
like I do. But it doesn&amp;rsquo;t! Whatever redirections you specify don&amp;rsquo;t take effect
until the next pipe (or the end of the pipeline if there is no next pipe). It
makes sense: this system lets you redirect a bunch of things
&lt;span class="sidenote__mark"&gt;*&lt;/span&gt;&lt;span class="sidenote"&gt;There&amp;rsquo;s no rule that says &lt;code&gt;$STDIN&lt;/code&gt;, &lt;code&gt;$STDOUT&lt;/code&gt;, and &lt;code&gt;$STDERR&lt;/code&gt; are the
only &lt;a href='https://en.wikipedia.org/wiki/File_descriptor'&gt;file
descriptors&lt;/a&gt; your process can have open, after all.&lt;/span&gt;
 to each
others&amp;rsquo; old handles at the same time without having to worry too much about
overwriting important data streams because of accidental collisions along the
way.&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;grep -v &lt;span class="s1"&gt;'up-to-date'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So it&amp;rsquo;s the contents of &lt;code&gt;$STDERR&lt;/code&gt; alone going through that pipe. Nice. &lt;code&gt;grep&lt;/code&gt;&amp;rsquo;s
&lt;code&gt;-v&lt;/code&gt; flag reverses the pattern, meaning lines that DON&amp;rsquo;T contain &amp;#39;up-to-date&amp;rsquo;
are printed. Effectively, this filters out the &amp;#39;up-to-date&amp;rsquo; error while letting
other errors pass through.&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&amp;gt;&amp;amp;2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The last token there, &lt;code&gt;&amp;gt;&amp;amp;2&lt;/code&gt;, redirects this filtered error stream from &lt;code&gt;$STDOUT&lt;/code&gt;
back to &lt;code&gt;$STDERR&lt;/code&gt;; if anything else goes wrong, &lt;code&gt;cron&lt;/code&gt; will email as it should,
but it won&amp;rsquo;t spam my inbox with nonsense just because I&amp;rsquo;m already good.&lt;/p&gt;

&lt;h3&gt;NICE.&lt;/h3&gt;

&lt;p&gt;Nice. Now go forth and automate the fuck out of some stuff!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>What Does It Even Mean For The Media To Be Objective</title>
    <link rel="alternate" href="http://blog.url.com/blag/what-does-it-even-mean-for-the-media-to-be-objective/"/>
    <id>http://blog.url.com/blag/what-does-it-even-mean-for-the-media-to-be-objective/</id>
    <published>2016-10-03T21:23:06-07:00</published>
    <updated>2016-11-06T20:39:22-08:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;hr&gt;

&lt;p&gt;title: What Does It Even Mean For The Media To Be Objective
topic: Epistemology
date: 2016-10-04 04:23:06 UTC
&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.theestablishment.co/2016/09/29/the-dangerous-myth-of-media-objectivity/"&gt;This&lt;/a&gt;
is a timely and important article, and it drove me absolutely crazy. Before I quote
anything, I think I need to do some conceptual prep work. The problem, you see, is that
the article suffers from a fatal fault—in calling out a perversion of objectivity, it
keeps calling it &amp;ldquo;objectivity&amp;rdquo;, which, okay, I know I sound ridiculous, but goddamn it,
ideas matter. It&amp;rsquo;s not so much a problem because that false objectivity is bad per se;
it&amp;rsquo;s a problem because the alternative exists and I think getting it right is really,
really important.&lt;/p&gt;

&lt;p&gt;&lt;h3 id="science-is-not-what-but-how"&gt;
  Science is not what, but how
  &lt;a class="section__title" href="#science-is-not-what-but-how"&gt;§&lt;/a&gt;
&lt;/h2&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;The first principle is that you must not fool yourself – and you are the easiest person
to fool.&amp;rdquo;
- Richard Feynman&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Human brains have all sorts of shortcuts for finding patterns. It&amp;rsquo;s our greatest talent,
and it&amp;rsquo;s what&amp;rsquo;s behind the best of us. Here are some ways to conceive of various shortcuts
for finding patterns: jumping to a conclusion; conceptual leaps, both the creative
parallel kind and the brilliant insight kind; optical illusions; artistic license;
intuition; suspicions; logical fallacies; madness.&lt;/p&gt;

&lt;p&gt;Basically every social interaction we have, every use of language, is running on hardware
that, when you get down to it, is just doing a bunch of sloppy pattern matching&lt;span
class="sidenote__mark"&gt;*&lt;/span&gt;&lt;span class="sidenote"&gt;European philosophy has spent
lifetimes failing to get around this fact, which is why it is so
&lt;a href="http://www.fullbooks.com/The-Ethics.html"&gt;beautiful&lt;/a&gt; and so
&lt;a href="https://tractatus-online.appspot.com/Tractatus/jonathan/index.html"&gt;tedious&lt;/a&gt;.&lt;/span&gt;. And
we&amp;rsquo;re ridiculously good at it! It has literally taken us to &lt;a href="http://joshworth.com/dev/pixelspace/pixelspace_solarsystem.html"&gt;the
moon&lt;/a&gt;. But if jumping to
conclusions is fundamental to being an alive human, it means we&amp;rsquo;re never going to not be
wrong about some stuff. You, me, Einstein, Pedro Martinez, Aristotle, Lupita Nyong&amp;#39;o:
everyone who ever has or will live is wrong about a ton of shit.&lt;/p&gt;

&lt;p&gt;This is almost all you need to acquire a deep understanding of science. The other part is
a way out: using statistics and measurements of the actual world to verify
stuff. Human perception isn&amp;rsquo;t perfect, but it&amp;rsquo;s still pretty good, and the
physical universe makes sense. You take your flawed conceptions as a starting
point, and you see which ones you can try to disprove. I say &amp;ldquo;try&amp;rdquo;, because a
lot of times, you can&amp;rsquo;t even do that: the world is full of questions that have
a single true, reality-based answer that there&amp;rsquo;s no way to find out. Got to
hope there&amp;rsquo;s Wikipedia in Heaven. But sometimes you CAN check. So you do.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the last catch: you can&amp;rsquo;t really prove anything is true, but sometimes, when the
facts cooperate, you can prove things false. So you try to prove everything you believe to
be true to be false. Occasionally, to your chagrin, you will be successful. And for
centuries, this has been the method of human progress: shuffling painfully towards the
truth by discarding convincing bullshit one piece at a time.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s the whole trick. That&amp;rsquo;s how we got spaceships and vaccines. Until you go measure
the real world, everybody&amp;rsquo;s words are just words, and, as previously discussed, we are all
wrong about a lot of things. Shit, we didn&amp;rsquo;t even need to bring up intentional lying or
willful ignorance: even if everyone is trying their very best, people alone can&amp;rsquo;t be
relied on for truth. No folk tradition managed to invent antibiotics, you know?&lt;/p&gt;

&lt;p&gt;&lt;h3 id="what-that-article-means-when-it-says-objectivity"&gt;
  What that article means when it says &amp;ldquo;objectivity&amp;rdquo;
  &lt;a class="section__title" href="#what-that-article-means-when-it-says-objectivity"&gt;§&lt;/a&gt;
&lt;/h2&gt;&lt;/p&gt;

&lt;p&gt;Considering this definition of &amp;ldquo;objectivity&amp;rdquo;, the following paragraph becomes absurd:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Is it the media’s responsibility to cover groups or persons who purposefully use hateful
and provocative speech as a means to gain attention? In what way should this coverage
manifest? And, perhaps most importantly—at what point are journalists obligated to
repudiate notions of objectivity for the sake of humanity and morality?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What the fuck kind of objectivity can you consider opposed to humanity and morality? It
makes no sense. Whether a thing is true or false has nothing to do with whether it&amp;rsquo;s good
or bad&lt;span class="sidenote__mark"&gt;*&lt;/span&gt;&lt;span class="sidenote"&gt;
Don&amp;rsquo;t EVER tell me we can&amp;rsquo;t change capitalism because of consensus unless we&amp;rsquo;re talking
tactics. You can tell me we can&amp;rsquo;t change it because the alternative would be worse, and if
you do, I&amp;rsquo;ll want to take a good hard look at what the best measurements are and whether
they suggest otherwise. If you want me to come down off this high horse you&amp;rsquo;re going to
have to make me.&lt;/span&gt;, and vice versa.&lt;/p&gt;

&lt;p&gt;The most frustrating part of writing this is that I haven&amp;rsquo;t found a way not to come down
too harshly. The article is talking about the same problem I am, and in many ways it&amp;rsquo;s
doing an astonishingly good job of it. While it doesn&amp;rsquo;t properly name the concept it
targets, it pins it down precisely through a series of incisive and well-sourced takedowns
of media uncritically airing people who are demonstrably in the wrong:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Milo profile was far from the first time that an outlet has, I’d argue, favored an
obscure notion of objectivity over the protection of human rights and civil liberties. In
May, USA Today &lt;a href="http://www.usatoday.com/story/opinion/2016/05/02/boycott-target-american-family-association-editorials-debates/83848878/"&gt;printed&lt;/a&gt; an op-ed written by the president of the American Family
Association (AFA), Tim Wildmon, urging readers to boycott the discount retailer Target due
to their inclusive bathroom &lt;a href="https://corporate.target.com/article/2016/04/target-stands-inclusivity#sf45842864"&gt;policy&lt;/a&gt;.
USA Today neglected to inform its readers that AFA is
&lt;a href="https://www.splcenter.org/fighting-hate/extremist-files/group/american-family-association"&gt;an anti-LGBT hate group&lt;/a&gt;, while also providing a space for Wildmon to perpetuate the
“bathroom predator” myth. Not only has this virulent lie been &lt;a href="http://mediamatters.org/research/2016/05/05/comprehensive-guide-debunked-bathroom-predator-myth/210200"&gt;disproven&lt;/a&gt;, its infectious
reach has had a documented &lt;a href="http://www.advocate.com/transgender/2016/7/13/survey-shows-how-trans-bathroom-predator-myth-hurts-real-people"&gt;impact&lt;/a&gt; on the psychological and physical safety of the
transgender community.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The problem is that that &amp;ldquo;obscure notion of objectivity&amp;rdquo; is neither obscure nor, I would
argue, objectivity. I suspect, if asked to define &amp;ldquo;media objectivity&amp;rdquo;, a lot of Americans
would sketch out a concept similar to this: an objective media does not try to shape
events, it merely reports on them. I suspect FAR more strongly that this is how the
American media itself sees its mission. If the pitfall to be avoided is a thumb on the
scales, then you&amp;rsquo;re at the mercy of the existing terms of debate; which is at the mercy of
what humans believe; which, c&amp;#39;mon, we&amp;rsquo;ve been over that already. Like &lt;a href="https://www.gutenberg.org/files/5500/5500-h/5500-h.htm"&gt;400 years
ago&lt;/a&gt;. But for all the &amp;ldquo;obscure
notion&amp;rdquo; shade it&amp;rsquo;s trying to throw, the article doesn&amp;rsquo;t challenge that as the framework
for judging &amp;ldquo;objectivity&amp;rdquo;. And as long as that&amp;rsquo;s in place, journalists either have to err
on the side of not being to critical or they need to get rid of &amp;ldquo;objectivity&amp;rdquo; as the
primary standard. And that&amp;rsquo;s hogwash.&lt;/p&gt;

&lt;p&gt;&lt;h3 id="why-thats-a-problem"&gt;
  Why that&amp;rsquo;s a problem
  &lt;a class="section__title" href="#why-thats-a-problem"&gt;§&lt;/a&gt;
&lt;/h2&gt;&lt;/p&gt;

&lt;p&gt;That definition needs to be demoted to the second concern: the primary metric by which the
media&amp;rsquo;s objectivity should be measured is integrity with objective reality as best we can
measure it. Often that means statistics. It means fact-checking is not a &amp;ldquo;nice-to-have&amp;rdquo;,
it is fundamental to the whole operation. Really, it means doing some fucking reporting.&lt;/p&gt;

&lt;p&gt;The article quotes &lt;a href="https://thesocietypages.org/socimages/2015/04/09/racial-bias-and-media-coverage-of-violent-crime/"&gt;Lisa
Wade&lt;/a&gt;,
a sociology professor at Occidental:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Each time we see a black person on TV who is linked with a violent crime or portrayed
as a criminal, the neurons in our brain that link blackness with criminality fire. The
more often a link is triggered, the stronger it becomes. Disproportionate reporting &amp;hellip;
make the neural links in our brain—its actual physical structure—reflect the racism
inherent in the reporting itself.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The argument, which I find quite compelling, is that repeating socially-backed but
damaging, false, or repugnant rhetoric, ESPECIALLY uncritically, reinforces it in the
audience&amp;rsquo;s minds, corroding truth and/or the common good. But that logic seems awfully
open to extension: repeating this implicit notion that objective balance in a conflict is
primarily determined by the social force of one or another &amp;ldquo;side&amp;rdquo;, rather than by its
verifiable truth&lt;span class="sidenote__mark"&gt;*&lt;/span&gt; &lt;span class="sidenote"&gt;It is always
both, of course, for we are awash in a sea of opinions.&lt;/span&gt; literally builds that link in
readers&amp;rsquo; minds. People use words the same way the folks around them do: for the sake of
the people around us, America has to step up at using them in service of truth.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Backticks Are Fantastic Because Typing Is The Worst</title>
    <link rel="alternate" href="http://blog.url.com/blag/backticks-in-zsh-are-fantastic/"/>
    <id>http://blog.url.com/blag/backticks-in-zsh-are-fantastic/</id>
    <published>2016-09-19T20:47:25-07:00</published>
    <updated>2016-09-28T16:22:01-07:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;hr&gt;

&lt;p&gt;title: Backticks Are Fantastic Because Typing Is The Worst
category: Dev Environment
topic: Zsh
date: 2016-09-20 03:47:25 UTC
&amp;hellip;&lt;/p&gt;

&lt;h2&gt;Backticks Are Fantastic&lt;/h2&gt;

&lt;p&gt;I mean, &lt;a href="http://www.refining-linux.org/archives/44/ZSH-Gem-10-Backtick-expansion/"&gt;legit
awesome&lt;/a&gt;.
An example:&lt;/p&gt;

&lt;p&gt;So, when making a symbolic link, you have to type out the absolute path to the
link target. There are, I assume, good reasons for that, but having to actually
do it kind of sucks. Two things help:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If, as is often the case, you want to link to go in your current directory, you can totally omit the second argument&lt;/li&gt;
&lt;li&gt;Typing some shell expression inside backticks and then hitting &lt;code&gt;tab&lt;/code&gt; expands that expression interactively&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You could use the &lt;code&gt;$()&lt;/code&gt; subshell operator with an expression and it would be
logically equivalent to backticks, but backticks have one killer advantage over
subshells:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;33% fewer keystrokes (seriously, I hate unnecessary typing)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;e. fuckin&amp;rsquo; g.:&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/ln_backticks.gif" class="post-img" alt="Ln backticks" /&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Locks are Some Shit</title>
    <link rel="alternate" href="http://blog.url.com/blag/locks/"/>
    <id>http://blog.url.com/blag/locks/</id>
    <published>2016-09-01T00:20:17-07:00</published>
    <updated>2016-09-28T23:16:27-07:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;hr&gt;

&lt;p&gt;title: Locks are Some Shit
category: operating&lt;em&gt;systems
topic: concurrency
date: 2016-09-01 07:20:17 UTC
tags: operating&lt;/em&gt;systems, concurrency, locks
&amp;hellip;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been reading &lt;a href="http://pages.cs.wisc.edu/~remzi/OSTEP"&gt;Operating Systems: Three Easy
Pieces&lt;/a&gt;. I highly recommend the book if
you&amp;rsquo;re cool fiddling with C a bit.  Actually, scratch that: I recommend the book
if you ever write code that runs on a server or any other linux/osx environment,
&lt;em&gt;especially&lt;/em&gt; if you feel a little out of your depth with C. The code examples
are not that intimidating, even if you don&amp;rsquo;t know from typecasting or a pointer
(okay, learning the difference between &lt;code&gt;foo&lt;/code&gt;, &lt;code&gt;*foo&lt;/code&gt; and &lt;code&gt;&amp;amp;foo&lt;/code&gt; is useful, but
not knowing it doesn&amp;rsquo;t prevent you from getting the gist of the code samples),
and getting a deeper understanding of the environment your code works in will
make a lot of known unknowns come into a bit more focus. Honest.&lt;/p&gt;

&lt;p&gt;The first of the three parts was memory virtualization: that is, how computing
time and resources get divvied up amongst processes. There was some fascinating
stuff in there: the API for forking a new process, for instance, is weirder and
cooler than I expected, and learning the topography of the boundary between the
OS and application code (such as &lt;code&gt;ls&lt;/code&gt; or &lt;code&gt;Google Chrome.app&lt;/code&gt;) is rad. And then
there are parts that are totally internal, though vital, to the kernel. Nothing
against free space management, segmentation, or the five whole chapters on
memory paging, but I&amp;rsquo;m just not as interested in the kernel&amp;rsquo;s implementation as
its interface.&lt;/p&gt;

&lt;p&gt;I kept wondering if I would be better off just jumping straight to concurrency,
because that&amp;rsquo;s what I was really pumped to learn. Would I be missing out on some
logically necessary information if I skipped them?? (Nope.) Learn from my
mistake and jump to the shit you find interesting, because someday you&amp;rsquo;re going
to die. So: &lt;a href="http://pages.cs.wisc.edu/~remzi/OSTEP/threads-locks.pdf"&gt;locks&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;h3 id="i-dont-need-no-stinkin-lock"&gt;
  I Don&amp;rsquo;t Need No Stinkin&amp;rsquo; Lock
  &lt;a class="section__title" href="#i-dont-need-no-stinkin-lock"&gt;§&lt;/a&gt;
&lt;/h2&gt;&lt;/p&gt;

&lt;p&gt;Locks are what keep multiple threads, running in parallel, from fucking each
other up when dealing with a shared bit of state. There is almost no operation
too small for these little bastards to mess up, given the chance. Take this:&lt;/p&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;volatile&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;mythread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;100000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Because I had to look it up: &lt;code&gt;volatile&lt;/code&gt; is a keyword that prevents certain
compiler optimizations from happening, specifically for things like this shared
counter.&lt;/p&gt;

&lt;p&gt;So, there&amp;rsquo;s a shared counter and there&amp;rsquo;s a procedure that uses it suitable for
giving to a couple threads. I extracted all the code dealing with that shared
bit of state:&lt;/p&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&amp;rsquo;s it! A single line, with a single unary operator. How unsafe can THAT be?
Let&amp;rsquo;s add some logging and fire up a couple threads:&lt;/p&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;pthread.h&amp;gt;
&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;volatile&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;mythread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%s: begin&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;100000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%s: end&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;pthread_t&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"main: begin (counter = %d)&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="n"&gt;pthread_create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mythread&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"A"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;pthread_create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mythread&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"B"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// wait for them fucks to finish
&lt;/span&gt;  &lt;span class="n"&gt;pthread_join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;pthread_join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"main: done with both (counter = %d)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So. &lt;code&gt;counter&lt;/code&gt; starts at 0, and then two threads each run &lt;code&gt;counter++&lt;/code&gt; 100,000
times apiece. That makes 200,000, right?&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;main: begin (counter = 0)
A: begin
B: begin
B: end
A: end
main: done with both (counter = 100745)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;INTERESTING.&lt;/p&gt;

&lt;p&gt;The trouble is that &lt;code&gt;counter++&lt;/code&gt; is &lt;em&gt;three&lt;/em&gt; operations, not one:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Get the value of &lt;code&gt;counter&lt;/code&gt; out of whatever register it&amp;rsquo;s stored in&lt;/li&gt;
&lt;li&gt;Increment that value by one&lt;/li&gt;
&lt;li&gt;Store the new value in that register&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So &lt;code&gt;p2&lt;/code&gt; reads the value of &lt;code&gt;counter&lt;/code&gt;&amp;rsquo;s register at, e.g., 17; then it increments
the value to 18; at the same time as &lt;code&gt;p2&lt;/code&gt; is doing that incrementing, one core
over, &lt;code&gt;p1&lt;/code&gt; reads that same register, which is still 17. In parallel, each adds
one to the value it read and stores that new value in the register, and lo: 17 +
1 + 1 = 18.&lt;/p&gt;

&lt;p&gt;&lt;h3 id="lock-that-shit-down"&gt;
  Lock That Shit Down
  &lt;a class="section__title" href="#lock-that-shit-down"&gt;§&lt;/a&gt;
&lt;/h2&gt;&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s suppose you give a shit about the integrity of basic arithmetic in
your code. The above nonsense won&amp;rsquo;t do at all. I ran it eight times (you can,
too! Just stick the code above in a file (say, &lt;code&gt;bad_math.c&lt;/code&gt;), compile it with
something like &lt;code&gt;gcc -o bad_math bad_math.c&lt;/code&gt;, and go hog wild), with the following
results:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ABAB 127499
ABAB 144926
ABAB 116942
ABBA 102988
ABBA 100745
ABAB 114188
AABB 200000
ABBA 104161

avg. 126431
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I&amp;rsquo;m honestly pretty shocked that one run actually got 200,000. (As a sidenote,
it looks like the &lt;code&gt;ABAB&lt;/code&gt; pattern of thread starts/finishes performs better than
&lt;code&gt;ABBA&lt;/code&gt;, with respective averages of 125888 and 102631. &lt;code&gt;AABB&lt;/code&gt;, of course, will
always get 200,000 (as would &lt;code&gt;BBAA&lt;/code&gt;, but &lt;code&gt;A&lt;/code&gt; gets kicked off first by
synchronous code).)&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s lock this shit down. &lt;code&gt;main&lt;/code&gt; doesn&amp;rsquo;t need to change at all: we just need
to initialize a commonly available lock, and use it in the &lt;code&gt;mythread&lt;/code&gt; procedure
to ensure that only one thread at a time can access the critical section (that&amp;rsquo;s
the term, coined by Dijkstra, for a section of code dealing with shared memory;
here, &lt;code&gt;counter++&lt;/code&gt;).  Here&amp;rsquo;s the most vanilla implementation for a POSIX system:&lt;/p&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;volatile&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;pthread_mutex_t&lt;/span&gt; &lt;span class="n"&gt;lock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PTHREAD_MUTEX_INITIALIZER&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;mythread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%s: begin&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;100000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;pthread_mutex_lock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;pthread_mutex_unlock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%s: end&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;No need for extra headers; as you probably gathered from the naming, that
locking mechanism is part of &lt;code&gt;pthread.h&lt;/code&gt;. When any thread calls
&lt;code&gt;pthread_mutex_lock(&amp;amp;foo)&lt;/code&gt; for a lock &lt;code&gt;foo&lt;/code&gt;, one of two things happens: if no
one else has the lock, it runs the critical section; or, if another thread has
the lock, it waits for that thread to call &lt;code&gt;pthread_mutex_unlock(&amp;amp;foo)&lt;/code&gt; and THEN
does its thing.&lt;/p&gt;

&lt;p&gt;As you might expect, this version gets 200,000 every time (but don&amp;rsquo;t believe
me&amp;hellip;). So what&amp;rsquo;s going on under the hood?&lt;/p&gt;

&lt;p&gt;&lt;h3 id="under-the-hood"&gt;
  Under The Hood
  &lt;a class="section__title" href="#under-the-hood"&gt;§&lt;/a&gt;
&lt;/h2&gt;&lt;/p&gt;

&lt;p&gt;A huge disclaimer before we start playing around with implementing our own
locks: this shit does not work. Checking some value to determine if a lock is in
use and updating that value to secure that lock takes multiple operations, and
at the application level, there&amp;rsquo;s no way to ensure that that happens atomically.
In a real lock, the hardware exposes a prebundled set of operations that can be
called from a C API.&lt;/p&gt;

&lt;p&gt;Depending on your machine, those prebundled operations might look, if you
squint, a little something like this:&lt;/p&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;__lock_t&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;lock_t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lock_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// 0 =&amp;gt; lock is available, 1 =&amp;gt; lock is held
&lt;/span&gt;  &lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;flag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;compare_and_swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;old_ptr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;actual&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;old_ptr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actual&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;old_ptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;actual&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lock_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/* while (compare_and_swap(&amp;amp;lock-&amp;gt;flag, 0, 1) == 1) */&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;compare_and_swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// do butt-ass nothing until that lock gets released
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;unlock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lock_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;flag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a shitty lock for a few reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If the lock is taken, the thread just wastes CPU cycles until the CPU
scheduler decides to let the locking thread finish its work&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s possible to have a thread that &amp;ldquo;starves&amp;rdquo;: i.e. never, ever gets the lock&lt;/li&gt;
&lt;li&gt;It does not work.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;But &lt;em&gt;how badly&lt;/em&gt; does it not work?&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ABAB 156000
ABAB 103114
ABAB 129168
ABBA 101519
ABBA 114152
ABAB 103095
ABBA 100576
ABAB 101809

avg. 113679
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, I mean, that&amp;rsquo;s a worse average than no lock at all, but there was that fluky
200,000 in there. Without the outlier, it would look a lot wors-&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;avg. 115921
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Oh. From an analytical perspective, there are more steps in &lt;code&gt;compare_and_swap&lt;/code&gt;
than in &lt;code&gt;counter++&lt;/code&gt;, so there are more places for a malicious CPU scheduler to
fuck with things; from a statistical perspective, we&amp;rsquo;re nowhere near solid
ground for declaring a winner in the contest of &amp;ldquo;no locks vs useless locks&amp;rdquo;;
from an engineering perspective, please just use &lt;code&gt;pthread_mutex_t&lt;/code&gt; locks.&lt;/p&gt;

&lt;p&gt;There is a glimmer of hope in the book before we totally close the book on
software locking:&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/better_lock.png" class="post-img" alt="Better lock" /&gt;&lt;/p&gt;

&lt;p&gt;Seems easy enough. Take the busted lock, swap in the new &lt;code&gt;CompareAndSwap&lt;/code&gt;
implementation, however the fuck that works (looks like it&amp;rsquo;s evaluating literal
strings as assembly language, but I&amp;rsquo;m in way over my head here), and give that a
test run:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ABAB 141034
ABAB 128868
ABAB 149149
ABAB 133336
ABAB 165496
ABAB 130632
ABAB 163608
ABAB 163309

avg. 146929
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Not half bad*!&lt;/p&gt;

&lt;p&gt;* Almost exactly half bad&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s all I got rght now on locks.&lt;/p&gt;

&lt;p&gt;&lt;h3 id="a-brief-aside-about-c"&gt;
  A Brief Aside About C
  &lt;a class="section__title" href="#a-brief-aside-about-c"&gt;§&lt;/a&gt;
&lt;/h2&gt;&lt;/p&gt;

&lt;p&gt;Working in C feels like working with a database to me: the fundamental way to
define the shape of your data is a struct: a behaviorless mapping of typed data
fields to names, just like a table in a relational database.&lt;/p&gt;

&lt;p&gt;Now, it&amp;rsquo;s more complicated than that, of course, and C is a good bit more
expressive than SQL. For instance, you could use the convention of pointing
certain fields at integers that are pointers to the memory address of functions
and use them to call those functions (I believe that&amp;rsquo;s how C++ classes work
under the hood, but don&amp;rsquo;t quote me on that as an authority).&lt;/p&gt;

&lt;p&gt;&lt;h3 id="stuff-in-this-chapter-that-i-left-out"&gt;
  Stuff In This Chapter That I Left Out
  &lt;a class="section__title" href="#stuff-in-this-chapter-that-i-left-out"&gt;§&lt;/a&gt;
&lt;/h2&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Various tradeoffs in balancing fairness and performance while maintaining
mutual exclusion (thus, incidentally, the term &amp;ldquo;mutex&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;Some interesting historical locking mechanisms&lt;/li&gt;
&lt;li&gt;Some background on what the hardware does and doesn&amp;rsquo;t do, and what that means
for the OS&lt;/li&gt;
&lt;li&gt;A cool-ass locking implementation from the linux kernel that tracks both the
status of the lock and the size of its queue with a single integer&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
</feed>

(function () {
'use strict';

// Draws a sierpinski triangle in response to mouse/device movement,
// using the chaos game algorithm: a good rundown can be found (where else)
// in wikipedia: https://en.wikipedia.org/wiki/Sierpinski_triangle#Chaos_game
// 
// A quick google search turned up a simple implementation by Aaron Patterson,
// which I adapted to my own purposes. The original lives (or lived, as of this
// writing) at https://gist.github.com/tenderlove/5898231

function triangleBuilder(scale, selector, color) {
  var w = 433 * scale,
      h = 300 * scale,
      padding = 10,
      page = d3.select(window),

  // Create SVG element in which to draw triangle
  svg = d3.select(selector).insert("svg", ".name").attr("width", w).attr("height", h).classed("triangle", true),
      xScale = d3.scale.linear().domain([0, w]).range([padding, w - padding]),
      yScale = d3.scale.linear().domain([0, w]).range([padding, w - padding]),


  // start with the three vertices of the triangle
  dataset = [[0, 0], [w, 0], [w / 2, h]],
      triangle = dataset.slice(0),


  // Seed the triangle with a starting point in the middle
  point = [w / 2, h / 2];
  dataset.push(point);

  function draw(dataset) {
    var circles = svg.selectAll("circle").data(dataset);

    //Create circles
    circles.enter().append("circle").attr("cx", function (d) {
      return xScale(d[0]);
    }).attr("cy", function (d) {
      return yScale(d[1]);
    }).attr("r", 1).style("fill", color);
  }

  function genpoint(triangle, point) {
    var vertex = triangle[Math.floor(Math.random() * triangle.length)];
    var x = (vertex[0] + point[0]) / 2;
    var y = (vertex[1] + point[1]) / 2;
    return [x, y];
  }

  // triangle
  // - 
  return function buildGivenTriangle() {
    for (var i = 0; i < 8; ++i) {
      point = genpoint(triangle, point);
      dataset.push(point);
    }
    draw(dataset);
  };
}

function setIntervalX(callback, delay, repetitions) {
    var x = 0;
    var intervalID = window.setInterval(function () {

        callback();

        if (++x === repetitions) {
            window.clearInterval(intervalID);
        }
    }, delay);
}

// import { once } from 'lodash-es'

var populateMainTriangle = triangleBuilder(0.5, '#triangle', "#aa9668");
var populateMiniTriangle = triangleBuilder(0.3, '#mini-triangle', '#224466');

var page = d3.select(window);
page.on("mousemove", populateMainTriangle);
page.on("devicemotion", populateMainTriangle);
page.on('load', () => {
  setIntervalX(populateMiniTriangle, 20, 200);
});

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbImRyYXdfdHJpYW5nbGUuanMiLCJpbnRlcnZhbF9uX3RpbWVzLmpzIiwidHJpYW5nbGVfbS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBEcmF3cyBhIHNpZXJwaW5za2kgdHJpYW5nbGUgaW4gcmVzcG9uc2UgdG8gbW91c2UvZGV2aWNlIG1vdmVtZW50LFxuLy8gdXNpbmcgdGhlIGNoYW9zIGdhbWUgYWxnb3JpdGhtOiBhIGdvb2QgcnVuZG93biBjYW4gYmUgZm91bmQgKHdoZXJlIGVsc2UpXG4vLyBpbiB3aWtpcGVkaWE6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1NpZXJwaW5za2lfdHJpYW5nbGUjQ2hhb3NfZ2FtZVxuLy8gXG4vLyBBIHF1aWNrIGdvb2dsZSBzZWFyY2ggdHVybmVkIHVwIGEgc2ltcGxlIGltcGxlbWVudGF0aW9uIGJ5IEFhcm9uIFBhdHRlcnNvbixcbi8vIHdoaWNoIEkgYWRhcHRlZCB0byBteSBvd24gcHVycG9zZXMuIFRoZSBvcmlnaW5hbCBsaXZlcyAob3IgbGl2ZWQsIGFzIG9mIHRoaXNcbi8vIHdyaXRpbmcpIGF0IGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL3RlbmRlcmxvdmUvNTg5ODIzMVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0cmlhbmdsZUJ1aWxkZXIoc2NhbGUsIHNlbGVjdG9yLCBjb2xvcikge1xuICB2YXIgdyA9IDQzMyAqIHNjYWxlLFxuICAgICAgaCA9IDMwMCAqIHNjYWxlLFxuICAgICAgcGFkZGluZyA9IDEwLFxuICAgICAgcGFnZSA9IGQzLnNlbGVjdCh3aW5kb3cpLFxuICAgICAgLy8gQ3JlYXRlIFNWRyBlbGVtZW50IGluIHdoaWNoIHRvIGRyYXcgdHJpYW5nbGVcbiAgICAgIHN2ZyA9IGQzLnNlbGVjdChzZWxlY3RvcilcbiAgICAgICAgICAgICAgLmluc2VydChcInN2Z1wiLCBcIi5uYW1lXCIpXG4gICAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgdylcbiAgICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgaClcbiAgICAgICAgICAgICAgLmNsYXNzZWQoXCJ0cmlhbmdsZVwiLCB0cnVlKSxcblxuICAgICAgeFNjYWxlID0gZDMuc2NhbGUubGluZWFyKClcbiAgICAgICAgICAgICAgICAgICAgICAuZG9tYWluKFswLCB3XSlcbiAgICAgICAgICAgICAgICAgICAgICAucmFuZ2UoW3BhZGRpbmcsIHcgLSBwYWRkaW5nXSksXG4gICAgICB5U2NhbGUgPSBkMy5zY2FsZS5saW5lYXIoKVxuICAgICAgICAgICAgICAgICAgICAgIC5kb21haW4oWzAsIHddKVxuICAgICAgICAgICAgICAgICAgICAgIC5yYW5nZShbcGFkZGluZywgdyAtIHBhZGRpbmddKSxcblxuICAgICAgLy8gc3RhcnQgd2l0aCB0aGUgdGhyZWUgdmVydGljZXMgb2YgdGhlIHRyaWFuZ2xlXG4gICAgICBkYXRhc2V0ID0gW1swLCAwXSwgW3csIDBdLCBbdyAvIDIsIGhdXSxcbiAgICAgIHRyaWFuZ2xlID0gZGF0YXNldC5zbGljZSgwKSxcblxuICAgICAgLy8gU2VlZCB0aGUgdHJpYW5nbGUgd2l0aCBhIHN0YXJ0aW5nIHBvaW50IGluIHRoZSBtaWRkbGVcbiAgICAgIHBvaW50ID0gW3cgLyAyLCBoIC8gMl1cbiAgZGF0YXNldC5wdXNoKHBvaW50KVxuXG5cbiAgZnVuY3Rpb24gZHJhdyhkYXRhc2V0KSB7XG4gICAgdmFyIGNpcmNsZXMgPSBzdmcuc2VsZWN0QWxsKFwiY2lyY2xlXCIpLmRhdGEoZGF0YXNldClcblxuICAgIC8vQ3JlYXRlIGNpcmNsZXNcbiAgICBjaXJjbGVzLmVudGVyKClcbiAgICAgIC5hcHBlbmQoXCJjaXJjbGVcIilcbiAgICAgIC5hdHRyKFwiY3hcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4geFNjYWxlKGRbMF0pOyB9KVxuICAgICAgLmF0dHIoXCJjeVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiB5U2NhbGUoZFsxXSk7IH0pXG4gICAgICAuYXR0cihcInJcIiwgMSlcbiAgICAgIC5zdHlsZShcImZpbGxcIiwgY29sb3IpXG4gIH1cblxuICBmdW5jdGlvbiBnZW5wb2ludCh0cmlhbmdsZSwgcG9pbnQpIHtcbiAgICB2YXIgdmVydGV4ID0gdHJpYW5nbGVbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogdHJpYW5nbGUubGVuZ3RoKV1cbiAgICB2YXIgeCA9ICh2ZXJ0ZXhbMF0gKyBwb2ludFswXSkgLyAyXG4gICAgdmFyIHkgPSAodmVydGV4WzFdICsgcG9pbnRbMV0pIC8gMlxuICAgIHJldHVybiBbeCwgeV1cbiAgfVxuXG4gIC8vIHRyaWFuZ2xlXG4gIC8vIC0gXG4gIHJldHVybiBmdW5jdGlvbiBidWlsZEdpdmVuVHJpYW5nbGUoKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCA4OyArK2kpIHtcbiAgICAgIHBvaW50ID0gZ2VucG9pbnQodHJpYW5nbGUsIHBvaW50KVxuICAgICAgZGF0YXNldC5wdXNoKHBvaW50KVxuICAgIH1cbiAgICBkcmF3KGRhdGFzZXQpXG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNldEludGVydmFsWChjYWxsYmFjaywgZGVsYXksIHJlcGV0aXRpb25zKSB7XG4gICAgdmFyIHggPSAwXG4gICAgdmFyIGludGVydmFsSUQgPSB3aW5kb3cuc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuXG4gICAgICAgY2FsbGJhY2soKVxuXG4gICAgICAgaWYgKCsreCA9PT0gcmVwZXRpdGlvbnMpIHtcbiAgICAgICAgICAgd2luZG93LmNsZWFySW50ZXJ2YWwoaW50ZXJ2YWxJRClcbiAgICAgICB9XG4gICAgfSwgZGVsYXkpXG59XG4iLCJpbXBvcnQgdHJpYW5nbGVCdWlsZGVyIGZyb20gJy4vZHJhd190cmlhbmdsZS5qcydcbmltcG9ydCBzZXRJbnRlcnZhbFggZnJvbSAnLi9pbnRlcnZhbF9uX3RpbWVzLmpzJ1xuLy8gaW1wb3J0IHsgb25jZSB9IGZyb20gJ2xvZGFzaC1lcydcblxudmFyIHBvcHVsYXRlTWFpblRyaWFuZ2xlID0gdHJpYW5nbGVCdWlsZGVyKDAuNSwgJyN0cmlhbmdsZScsICBcIiNhYTk2NjhcIilcbnZhciBwb3B1bGF0ZU1pbmlUcmlhbmdsZSA9IHRyaWFuZ2xlQnVpbGRlcigwLjMsICcjbWluaS10cmlhbmdsZScsICcjMjI0NDY2JylcblxudmFyIHBhZ2UgPSBkMy5zZWxlY3Qod2luZG93KVxucGFnZS5vbihcIm1vdXNlbW92ZVwiLCAgICBwb3B1bGF0ZU1haW5UcmlhbmdsZSlcbnBhZ2Uub24oXCJkZXZpY2Vtb3Rpb25cIiwgcG9wdWxhdGVNYWluVHJpYW5nbGUpXG5wYWdlLm9uKCdsb2FkJywgKCkgPT4geyBzZXRJbnRlcnZhbFgocG9wdWxhdGVNaW5pVHJpYW5nbGUsIDIwLCAyMDApIH0pXG4iXSwibmFtZXMiOlsidHJpYW5nbGVCdWlsZGVyIiwic2NhbGUiLCJzZWxlY3RvciIsImNvbG9yIiwidyIsImgiLCJwYWRkaW5nIiwicGFnZSIsImQzIiwic2VsZWN0Iiwid2luZG93IiwiaW5zZXJ0IiwiYXR0ciIsImNsYXNzZWQiLCJ4U2NhbGUiLCJsaW5lYXIiLCJkb21haW4iLCJyYW5nZSIsInlTY2FsZSIsInRyaWFuZ2xlIiwiZGF0YXNldCIsInNsaWNlIiwicHVzaCIsInBvaW50IiwiZHJhdyIsImNpcmNsZXMiLCJzdmciLCJzZWxlY3RBbGwiLCJkYXRhIiwiZW50ZXIiLCJhcHBlbmQiLCJkIiwic3R5bGUiLCJnZW5wb2ludCIsInZlcnRleCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsImxlbmd0aCIsIngiLCJ5IiwiYnVpbGRHaXZlblRyaWFuZ2xlIiwiaSIsInNldEludGVydmFsWCIsImNhbGxiYWNrIiwiZGVsYXkiLCJyZXBldGl0aW9ucyIsImludGVydmFsSUQiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJwb3B1bGF0ZU1haW5UcmlhbmdsZSIsInBvcHVsYXRlTWluaVRyaWFuZ2xlIiwib24iXSwibWFwcGluZ3MiOiI7OztBQUFBOzs7Ozs7OztBQVFBLEFBQWUsU0FBU0EsZUFB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

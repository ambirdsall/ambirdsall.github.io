(function () {
'use strict';

// Draws a sierpinski triangle in response to mouse/device movement,
// using the chaos game algorithm: a good rundown can be found (where else)
// in wikipedia: https://en.wikipedia.org/wiki/Sierpinski_triangle#Chaos_game
// 
// A quick google search turned up a simple implementation by Aaron Patterson,
// which I adapted to my own purposes. The original lives (or lived, as of this
// writing) at https://gist.github.com/tenderlove/5898231

function triangleBuilder(scale, selector, color) {
  var w = 433 * scale,
      h = 300 * scale,
      padding = 10,
      page = d3.select(window),

  // Create SVG element in which to draw triangle
  svg = d3.select(selector).insert("svg", ".name").attr("width", w).attr("height", h).classed("triangle", true),
      xScale = d3.scale.linear().domain([0, w]).range([padding, w - padding]),
      yScale = d3.scale.linear().domain([0, w]).range([padding, w - padding]),


  // start with the three vertices of the triangle
  dataset = [[0, 0], [w, 0], [w / 2, h]],
      triangle = dataset.slice(0),


  // Seed the triangle with a starting point in the middle
  point = [w / 2, h / 2];
  dataset.push(point);

  function draw(dataset) {
    var circles = svg.selectAll("circle").data(dataset);

    //Create circles
    circles.enter().append("circle").attr("cx", function (d) {
      return xScale(d[0]);
    }).attr("cy", function (d) {
      return yScale(d[1]);
    }).attr("r", 1).style("fill", color);
  }

  function genpoint(triangle, point) {
    var vertex = triangle[Math.floor(Math.random() * triangle.length)];
    var x = (vertex[0] + point[0]) / 2;
    var y = (vertex[1] + point[1]) / 2;
    return [x, y];
  }

  // triangle
  // - 
  return function buildGivenTriangle() {
    for (var i = 0; i < 8; ++i) {
      point = genpoint(triangle, point);
      dataset.push(point);
    }
    draw(dataset);
  };
}

function setIntervalX(callback, delay, repetitions) {
    var x = 0;
    var intervalID = window.setInterval(function () {

        callback();

        if (++x === repetitions) {
            window.clearInterval(intervalID);
        }
    }, delay);
}

var populateMainTriangle = triangleBuilder(0.5, '#triangle', "#aa9668");
var populateMiniTriangle = triangleBuilder(0.2, '#mini-triangle', '#224466');

var page = d3.select(window);
page.on("mousemove", populateMainTriangle);
page.on("devicemotion", populateMainTriangle);
setIntervalX(populateMiniTriangle, 80, 100);

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbImRyYXdfdHJpYW5nbGUuanMiLCJpbnRlcnZhbF9uX3RpbWVzLmpzIiwidHJpYW5nbGVfbS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBEcmF3cyBhIHNpZXJwaW5za2kgdHJpYW5nbGUgaW4gcmVzcG9uc2UgdG8gbW91c2UvZGV2aWNlIG1vdmVtZW50LFxuLy8gdXNpbmcgdGhlIGNoYW9zIGdhbWUgYWxnb3JpdGhtOiBhIGdvb2QgcnVuZG93biBjYW4gYmUgZm91bmQgKHdoZXJlIGVsc2UpXG4vLyBpbiB3aWtpcGVkaWE6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1NpZXJwaW5za2lfdHJpYW5nbGUjQ2hhb3NfZ2FtZVxuLy8gXG4vLyBBIHF1aWNrIGdvb2dsZSBzZWFyY2ggdHVybmVkIHVwIGEgc2ltcGxlIGltcGxlbWVudGF0aW9uIGJ5IEFhcm9uIFBhdHRlcnNvbixcbi8vIHdoaWNoIEkgYWRhcHRlZCB0byBteSBvd24gcHVycG9zZXMuIFRoZSBvcmlnaW5hbCBsaXZlcyAob3IgbGl2ZWQsIGFzIG9mIHRoaXNcbi8vIHdyaXRpbmcpIGF0IGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL3RlbmRlcmxvdmUvNTg5ODIzMVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0cmlhbmdsZUJ1aWxkZXIoc2NhbGUsIHNlbGVjdG9yLCBjb2xvcikge1xuICB2YXIgdyA9IDQzMyAqIHNjYWxlLFxuICAgICAgaCA9IDMwMCAqIHNjYWxlLFxuICAgICAgcGFkZGluZyA9IDEwLFxuICAgICAgcGFnZSA9IGQzLnNlbGVjdCh3aW5kb3cpLFxuICAgICAgLy8gQ3JlYXRlIFNWRyBlbGVtZW50IGluIHdoaWNoIHRvIGRyYXcgdHJpYW5nbGVcbiAgICAgIHN2ZyA9IGQzLnNlbGVjdChzZWxlY3RvcilcbiAgICAgICAgICAgICAgLmluc2VydChcInN2Z1wiLCBcIi5uYW1lXCIpXG4gICAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgdylcbiAgICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgaClcbiAgICAgICAgICAgICAgLmNsYXNzZWQoXCJ0cmlhbmdsZVwiLCB0cnVlKSxcblxuICAgICAgeFNjYWxlID0gZDMuc2NhbGUubGluZWFyKClcbiAgICAgICAgICAgICAgICAgICAgICAuZG9tYWluKFswLCB3XSlcbiAgICAgICAgICAgICAgICAgICAgICAucmFuZ2UoW3BhZGRpbmcsIHcgLSBwYWRkaW5nXSksXG4gICAgICB5U2NhbGUgPSBkMy5zY2FsZS5saW5lYXIoKVxuICAgICAgICAgICAgICAgICAgICAgIC5kb21haW4oWzAsIHddKVxuICAgICAgICAgICAgICAgICAgICAgIC5yYW5nZShbcGFkZGluZywgdyAtIHBhZGRpbmddKSxcblxuICAgICAgLy8gc3RhcnQgd2l0aCB0aGUgdGhyZWUgdmVydGljZXMgb2YgdGhlIHRyaWFuZ2xlXG4gICAgICBkYXRhc2V0ID0gW1swLCAwXSwgW3csIDBdLCBbdyAvIDIsIGhdXSxcbiAgICAgIHRyaWFuZ2xlID0gZGF0YXNldC5zbGljZSgwKSxcblxuICAgICAgLy8gU2VlZCB0aGUgdHJpYW5nbGUgd2l0aCBhIHN0YXJ0aW5nIHBvaW50IGluIHRoZSBtaWRkbGVcbiAgICAgIHBvaW50ID0gW3cgLyAyLCBoIC8gMl1cbiAgZGF0YXNldC5wdXNoKHBvaW50KVxuXG5cbiAgZnVuY3Rpb24gZHJhdyhkYXRhc2V0KSB7XG4gICAgdmFyIGNpcmNsZXMgPSBzdmcuc2VsZWN0QWxsKFwiY2lyY2xlXCIpLmRhdGEoZGF0YXNldClcblxuICAgIC8vQ3JlYXRlIGNpcmNsZXNcbiAgICBjaXJjbGVzLmVudGVyKClcbiAgICAgIC5hcHBlbmQoXCJjaXJjbGVcIilcbiAgICAgIC5hdHRyKFwiY3hcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4geFNjYWxlKGRbMF0pOyB9KVxuICAgICAgLmF0dHIoXCJjeVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiB5U2NhbGUoZFsxXSk7IH0pXG4gICAgICAuYXR0cihcInJcIiwgMSlcbiAgICAgIC5zdHlsZShcImZpbGxcIiwgY29sb3IpXG4gIH1cblxuICBmdW5jdGlvbiBnZW5wb2ludCh0cmlhbmdsZSwgcG9pbnQpIHtcbiAgICB2YXIgdmVydGV4ID0gdHJpYW5nbGVbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogdHJpYW5nbGUubGVuZ3RoKV1cbiAgICB2YXIgeCA9ICh2ZXJ0ZXhbMF0gKyBwb2ludFswXSkgLyAyXG4gICAgdmFyIHkgPSAodmVydGV4WzFdICsgcG9pbnRbMV0pIC8gMlxuICAgIHJldHVybiBbeCwgeV1cbiAgfVxuXG4gIC8vIHRyaWFuZ2xlXG4gIC8vIC0gXG4gIHJldHVybiBmdW5jdGlvbiBidWlsZEdpdmVuVHJpYW5nbGUoKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCA4OyArK2kpIHtcbiAgICAgIHBvaW50ID0gZ2VucG9pbnQodHJpYW5nbGUsIHBvaW50KVxuICAgICAgZGF0YXNldC5wdXNoKHBvaW50KVxuICAgIH1cbiAgICBkcmF3KGRhdGFzZXQpXG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNldEludGVydmFsWChjYWxsYmFjaywgZGVsYXksIHJlcGV0aXRpb25zKSB7XG4gICAgdmFyIHggPSAwXG4gICAgdmFyIGludGVydmFsSUQgPSB3aW5kb3cuc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuXG4gICAgICAgY2FsbGJhY2soKVxuXG4gICAgICAgaWYgKCsreCA9PT0gcmVwZXRpdGlvbnMpIHtcbiAgICAgICAgICAgd2luZG93LmNsZWFySW50ZXJ2YWwoaW50ZXJ2YWxJRClcbiAgICAgICB9XG4gICAgfSwgZGVsYXkpXG59XG4iLCJpbXBvcnQgdHJpYW5nbGVCdWlsZGVyIGZyb20gJy4vZHJhd190cmlhbmdsZS5qcydcbmltcG9ydCBzZXRJbnRlcnZhbFggZnJvbSAnLi9pbnRlcnZhbF9uX3RpbWVzLmpzJ1xuLy8gaW1wb3J0IHsgYmVmb3JlIH0gZnJvbSAnbG9kYXNoLWVzJ1xuXG52YXIgcG9wdWxhdGVNYWluVHJpYW5nbGUgPSB0cmlhbmdsZUJ1aWxkZXIoMC41LCAnI3RyaWFuZ2xlJywgIFwiI2FhOTY2OFwiKVxudmFyIHBvcHVsYXRlTWluaVRyaWFuZ2xlID0gdHJpYW5nbGVCdWlsZGVyKDAuMiwgJyNtaW5pLXRyaWFuZ2xlJywgJyMyMjQ0NjYnKVxuXG52YXIgcGFnZSA9IGQzLnNlbGVjdCh3aW5kb3cpXG5wYWdlLm9uKFwibW91c2Vtb3ZlXCIsICAgIHBvcHVsYXRlTWFpblRyaWFuZ2xlKVxucGFnZS5vbihcImRldmljZW1vdGlvblwiLCBwb3B1bGF0ZU1haW5UcmlhbmdsZSlcbnNldEludGVydmFsWChwb3B1bGF0ZU1pbmlUcmlhbmdsZSwgODAsIDEwMClcbiJdLCJuYW1lcyI6WyJ0cmlhbmdsZUJ1aWxkZXIiLCJzY2FsZSIsInNlbGVjdG9yIiwiY29sb3IiLCJ3IiwiaCIsInBhZGRpbmciLCJwYWdlIiwiZDMiLCJzZWxlY3QiLCJ3aW5kb3ciLCJpbnNlcnQiLCJhdHRyIiwiY2xhc3NlZCIsInhTY2FsZSIsImxpbmVhciIsImRvbWFpbiIsInJhbmdlIiwieVNjYWxlIiwidHJpYW5nbGUiLCJkYXRhc2V0Iiwic2xpY2UiLCJwdXNoIiwicG9pbnQiLCJkcmF3IiwiY2lyY2xlcyIsInN2ZyIsInNlbGVjdEFsbCIsImRhdGEiLCJlbnRlciIsImFwcGVuZCIsImQiLCJzdHlsZSIsImdlbnBvaW50IiwidmVydGV4IiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwibGVuZ3RoIiwieCIsInkiLCJidWlsZEdpdmVuVHJpYW5nbGUiLCJpIiwic2V0SW50ZXJ2YWxYIiwiY2FsbGJhY2siLCJkZWxheSIsInJlcGV0aXRpb25zIiwiaW50ZXJ2YWxJRCIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsInBvcHVsYXRlTWFpblRyaWFuZ2xlIiwicG9wdWxhdGVNaW5pVHJpYW5nbGUiLCJvbiJdLCJtYXBwaW5ncyI6Ijs7O0FBQUE7Ozs7Ozs7O0FBUUEsQUFBZSxTQUFTQSxlQUFULENBQXlCQyxLQUF6QixFQUFnQ0MsUUFB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

(function () {
'use strict';

// Draws a sierpinski triangle in response to mouse/device movement,
// using the chaos game algorithm: a good rundown can be found (where else)
// in wikipedia: https://en.wikipedia.org/wiki/Sierpinski_triangle#Chaos_game
// 
// A quick google search turned up a simple implementation by Aaron Patterson,
// which I adapted to my own purposes. The original lives (or lived, as of this
// writing) at https://gist.github.com/tenderlove/5898231

function triangleBuilder(scale, selector, color) {
  var w = 433 * scale,
      h = 300 * scale,
      padding = 10,
      page = d3.select(window),

  // Create SVG element in which to draw triangle
  svg = d3.select(selector).insert("svg", ".name").attr("width", w).attr("height", h).classed("triangle", true),
      xScale = d3.scale.linear().domain([0, w]).range([padding, w - padding]),
      yScale = d3.scale.linear().domain([0, w]).range([padding, w - padding]),


  // start with the three vertices of the triangle
  dataset = [[0, 0], [w, 0], [w / 2, h]],
      triangle = dataset.slice(0),


  // Seed the triangle with a starting point in the middle
  point = [w / 2, h / 2];
  dataset.push(point);

  function draw(dataset) {
    var circles = svg.selectAll("circle").data(dataset);

    //Create circles
    circles.enter().append("circle").attr("cx", function (d) {
      return xScale(d[0]);
    }).attr("cy", function (d) {
      return yScale(d[1]);
    }).attr("r", 1).style("fill", color);
  }

  function genpoint(triangle, point) {
    var vertex = triangle[Math.floor(Math.random() * triangle.length)];
    var x = (vertex[0] + point[0]) / 2;
    var y = (vertex[1] + point[1]) / 2;
    return [x, y];
  }

  // triangle
  // - 
  return function buildGivenTriangle() {
    for (var i = 0; i < 8; ++i) {
      point = genpoint(triangle, point);
      dataset.push(point);
    }
    draw(dataset);
  };
}

// import { once } from 'lodash-es'

var populateMainTriangle = triangleBuilder(0.5, '#triangle', "#aa9668");
// var populateMiniTriangle = triangleBuilder(0.3, '#mini-triangle', '#224466')

var page = d3.select(window);
page.on("mousemove", populateMainTriangle);
page.on("devicemotion", populateMainTriangle);

// to draw a whole triangle on an event
// page.on('load', () => { setIntervalX(populateMiniTriangle, 20, 200) })

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbImRyYXdfdHJpYW5nbGUuanMiLCJ0cmlhbmdsZV9tLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIERyYXdzIGEgc2llcnBpbnNraSB0cmlhbmdsZSBpbiByZXNwb25zZSB0byBtb3VzZS9kZXZpY2UgbW92ZW1lbnQsXG4vLyB1c2luZyB0aGUgY2hhb3MgZ2FtZSBhbGdvcml0aG06IGEgZ29vZCBydW5kb3duIGNhbiBiZSBmb3VuZCAod2hlcmUgZWxzZSlcbi8vIGluIHdpa2lwZWRpYTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU2llcnBpbnNraV90cmlhbmdsZSNDaGFvc19nYW1lXG4vLyBcbi8vIEEgcXVpY2sgZ29vZ2xlIHNlYXJjaCB0dXJuZWQgdXAgYSBzaW1wbGUgaW1wbGVtZW50YXRpb24gYnkgQWFyb24gUGF0dGVyc29uLFxuLy8gd2hpY2ggSSBhZGFwdGVkIHRvIG15IG93biBwdXJwb3Nlcy4gVGhlIG9yaWdpbmFsIGxpdmVzIChvciBsaXZlZCwgYXMgb2YgdGhpc1xuLy8gd3JpdGluZykgYXQgaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vdGVuZGVybG92ZS81ODk4MjMxXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRyaWFuZ2xlQnVpbGRlcihzY2FsZSwgc2VsZWN0b3IsIGNvbG9yKSB7XG4gIHZhciB3ID0gNDMzICogc2NhbGUsXG4gICAgICBoID0gMzAwICogc2NhbGUsXG4gICAgICBwYWRkaW5nID0gMTAsXG4gICAgICBwYWdlID0gZDMuc2VsZWN0KHdpbmRvdyksXG4gICAgICAvLyBDcmVhdGUgU1ZHIGVsZW1lbnQgaW4gd2hpY2ggdG8gZHJhdyB0cmlhbmdsZVxuICAgICAgc3ZnID0gZDMuc2VsZWN0KHNlbGVjdG9yKVxuICAgICAgICAgICAgICAuaW5zZXJ0KFwic3ZnXCIsIFwiLm5hbWVcIilcbiAgICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCB3KVxuICAgICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBoKVxuICAgICAgICAgICAgICAuY2xhc3NlZChcInRyaWFuZ2xlXCIsIHRydWUpLFxuXG4gICAgICB4U2NhbGUgPSBkMy5zY2FsZS5saW5lYXIoKVxuICAgICAgICAgICAgICAgICAgICAgIC5kb21haW4oWzAsIHddKVxuICAgICAgICAgICAgICAgICAgICAgIC5yYW5nZShbcGFkZGluZywgdyAtIHBhZGRpbmddKSxcbiAgICAgIHlTY2FsZSA9IGQzLnNjYWxlLmxpbmVhcigpXG4gICAgICAgICAgICAgICAgICAgICAgLmRvbWFpbihbMCwgd10pXG4gICAgICAgICAgICAgICAgICAgICAgLnJhbmdlKFtwYWRkaW5nLCB3IC0gcGFkZGluZ10pLFxuXG4gICAgICAvLyBzdGFydCB3aXRoIHRoZSB0aHJlZSB2ZXJ0aWNlcyBvZiB0aGUgdHJpYW5nbGVcbiAgICAgIGRhdGFzZXQgPSBbWzAsIDBdLCBbdywgMF0sIFt3IC8gMiwgaF1dLFxuICAgICAgdHJpYW5nbGUgPSBkYXRhc2V0LnNsaWNlKDApLFxuXG4gICAgICAvLyBTZWVkIHRoZSB0cmlhbmdsZSB3aXRoIGEgc3RhcnRpbmcgcG9pbnQgaW4gdGhlIG1pZGRsZVxuICAgICAgcG9pbnQgPSBbdyAvIDIsIGggLyAyXVxuICBkYXRhc2V0LnB1c2gocG9pbnQpXG5cblxuICBmdW5jdGlvbiBkcmF3KGRhdGFzZXQpIHtcbiAgICB2YXIgY2lyY2xlcyA9IHN2Zy5zZWxlY3RBbGwoXCJjaXJjbGVcIikuZGF0YShkYXRhc2V0KVxuXG4gICAgLy9DcmVhdGUgY2lyY2xlc1xuICAgIGNpcmNsZXMuZW50ZXIoKVxuICAgICAgLmFwcGVuZChcImNpcmNsZVwiKVxuICAgICAgLmF0dHIoXCJjeFwiLCBmdW5jdGlvbihkKSB7IHJldHVybiB4U2NhbGUoZFswXSk7IH0pXG4gICAgICAuYXR0cihcImN5XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIHlTY2FsZShkWzFdKTsgfSlcbiAgICAgIC5hdHRyKFwiclwiLCAxKVxuICAgICAgLnN0eWxlKFwiZmlsbFwiLCBjb2xvcilcbiAgfVxuXG4gIGZ1bmN0aW9uIGdlbnBvaW50KHRyaWFuZ2xlLCBwb2ludCkge1xuICAgIHZhciB2ZXJ0ZXggPSB0cmlhbmdsZVtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiB0cmlhbmdsZS5sZW5ndGgpXVxuICAgIHZhciB4ID0gKHZlcnRleFswXSArIHBvaW50WzBdKSAvIDJcbiAgICB2YXIgeSA9ICh2ZXJ0ZXhbMV0gKyBwb2ludFsxXSkgLyAyXG4gICAgcmV0dXJuIFt4LCB5XVxuICB9XG5cbiAgLy8gdHJpYW5nbGVcbiAgLy8gLSBcbiAgcmV0dXJuIGZ1bmN0aW9uIGJ1aWxkR2l2ZW5UcmlhbmdsZSgpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDg7ICsraSkge1xuICAgICAgcG9pbnQgPSBnZW5wb2ludCh0cmlhbmdsZSwgcG9pbnQpXG4gICAgICBkYXRhc2V0LnB1c2gocG9pbnQpXG4gICAgfVxuICAgIGRyYXcoZGF0YXNldClcbiAgfVxufVxuIiwiaW1wb3J0IHRyaWFuZ2xlQnVpbGRlciBmcm9tICcuL2RyYXdfdHJpYW5nbGUuanMnXG5pbXBvcnQgc2V0SW50ZXJ2YWxYIGZyb20gJy4vaW50ZXJ2YWxfbl90aW1lcy5qcydcbi8vIGltcG9ydCB7IG9uY2UgfSBmcm9tICdsb2Rhc2gtZXMnXG5cbnZhciBwb3B1bGF0ZU1haW5UcmlhbmdsZSA9IHRyaWFuZ2xlQnVpbGRlcigwLjUsICcjdHJpYW5nbGUnLCAgXCIjYWE5NjY4XCIpXG4vLyB2YXIgcG9wdWxhdGVNaW5pVHJpYW5nbGUgPSB0cmlhbmdsZUJ1aWxkZXIoMC4zLCAnI21pbmktdHJpYW5nbGUnLCAnIzIyNDQ2NicpXG5cbnZhciBwYWdlID0gZDMuc2VsZWN0KHdpbmRvdylcbnBhZ2Uub24oXCJtb3VzZW1vdmVcIiwgICAgcG9wdWxhdGVNYWluVHJpYW5nbGUpXG5wYWdlLm9uKFwiZGV2aWNlbW90aW9uXCIsIHBvcHVsYXRlTWFpblRyaWFuZ2xlKVxuXG4vLyB0byBkcmF3IGEgd2hvbGUgdHJpYW5nbGUgb24gYW4gZXZlbnRcbi8vIHBhZ2Uub24oJ2xvYWQnLCAoKSA9PiB7IHNldEludGVydmFsWChwb3B1bGF0ZU1pbmlUcmlhbmdsZSwgMjAsIDIwMCkgfSlcbiJdLCJuYW1lcyI6WyJ0cmlhbmdsZUJ1aWxkZXIiLCJzY2FsZSIsInNlbGVjdG9yIiwiY29sb3IiLCJ3IiwiaCIsInBhZGRpbmciLCJwYWdlIiwiZDMiLCJzZWxlY3QiLCJ3aW5kb3ciLCJpbnNlcnQiLCJhdHRyIiwiY2xhc3NlZCIsInhTY2FsZSIsImxpbmVhciIsImRvbWFpbiIsInJhbmdlIiwieVNjYWxlIiwidHJpYW5nbGUiLCJkYXRhc2V0Iiwic2xpY2UiLCJwdXNoIiwicG9pbnQiLCJkcmF3IiwiY2lyY2xlcyIsInN2ZyIsInNlbGVjdEFsbCIsImRhdGEiLCJlbnRlciIsImFwcGVuZCIsImQiLCJzdHlsZSIsImdlbnBvaW50IiwidmVydGV4IiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwibGVuZ3RoIiwieCIsInkiLCJidWlsZEdpdmVuVHJpYW5nbGUiLCJpIiwicG9wdWxhdGVNYWluVHJpYW5nbGUiLCJvbiJdLCJtYXBwaW5ncyI6Ijs7O0FBQUE7Ozs7Ozs7O0FBUUEsQUFBZSxTQUFTQSxlQUFULENBQXlCQyxLQUF6QixFQUFnQ0MsUUFBaEMsRUFBMENDLEtBQTFDLEVBQWlEO01BQzFEQyxJQUFJLE1BQU1ILEtBQWQ7TUFDSUksSUFBSSxNQUFNSixLQURkO01BRUlLLFVBQVUsRUFGZDtNQUdJQyxPQUFPQyxHQUFHQyxNQUFILENBQVVDLE1BQVYsQ0FIWDs7O1FBS1VGLEdBQUdDLE1BQUgsQ0FBVVAsUUFBVixFQUNHUyxNQURILENBQ1UsS0FEVixFQUNpQixPQURqQixFQUVHQyxJQUZILENBRVEsT0FGUixFQUVpQlIsQ0FGakIsRUFHR1EsSUFISCxDQUdRLFFBSFIsRUFHa0JQLENBSGxCLEVBSUdRLE9BSkgsQ0FJVyxVQUpYLEVBSXVCLElBSnZCLENBTFY7TUFXSUMsU0FBU04sR0FBR1AsS0FBSCxDQUFTYyxNQUFULEdBQ1FDLE1BRFIsQ0FDZSxDQUFDLENBQUQsRUFBSVosQ0FBSixDQURmLEVBRVFhLEtBRlIsQ0FFYyxDQUFDWCxPQUFELEVBQVVGLElBQUlFLE9BQWQsQ0FGZCxDQVhiO01BY0lZLFNBQVNWLEdBQUdQLEtBQUgsQ0FBU2MsTUFBVCxHQUNRQyxNQURSLENBQ2UsQ0FBQyxDQUFELEVBQUlaLENBQUosQ0FEZixFQUVRYSxLQUZSLENBRWMsQ0FBQ1gsT0FBRCxFQUFVRixJQUFJRSxPQUFkLENBRmQsQ0FkYjs7OztZQW1CYyxDQUFDLENBQUMsQ0FBRCxFQUFJLENBQUosQ0FBRCxFQUFTLENBQUNGLENBQUQsRUFBSSxDQUFKLENBQVQsRUFBaUIsQ0FBQ0EsSUFBSSxDQUFMLEVBQVFDLENBQVIsQ0FBakIsQ0FuQmQ7TUFvQkljLFdBQVdDLFFBQVFDLEtBQVIsQ0FBYyxDQUFkLENBcEJmOzs7O1VBdUJZLENBQUNqQixJQUFJLENBQUwsRUFBUUMsSUFBSSxDQUFaLENBdkJaO1VBd0JRaUIsSUFBUixDQUFhQyxLQUFiOztXQUdTQyxJQUFULENBQWNKLE9BQWQsRUFBdUI7UUFDakJLLFVBQVVDLElBQUlDLFNBQUosQ0FBYyxRQUFkLEVBQXdCQyxJQUF4QixDQUE2QlIsT0FBN0IsQ0FBZDs7O1lBR1FTLEtBQVIsR0FDR0MsTUFESCxDQUNVLFFBRFYsRUFFR2xCLElBRkgsQ0FFUSxJQUZSLEVBRWMsVUFBU21CLENBQVQsRUFBWTthQUFTakIsT0FBT2lCLEVBQUUsQ0FBRixDQUFQLENBQVA7S0FGNUIsRUFHR25CLElBSEgsQ0FHUSxJQUhSLEVBR2MsVUFBU21CLENBQVQsRUFBWTthQUFTYixPQUFPYSxFQUFFLENBQUYsQ0FBUCxDQUFQO0tBSDVCLEVBSUduQixJQUpILENBSVEsR0FKUixFQUlhLENBSmIsRUFLR29CLEtBTEgsQ0FLUyxNQUxULEVBS2lCN0IsS0FMakI7OztXQVFPOEIsUUFBVCxDQUFrQmQsUUFBbEIsRUFBNEJJLEtBQTVCLEVBQW1DO1FBQzdCVyxTQUFTZixTQUFTZ0IsS0FBS0MsS0FBTCxDQUFXRCxLQUFLRSxNQUFMLEtBQWdCbEIsU0FBU21CLE1BQXBDLENBQVQsQ0FBYjtRQUNJQyxJQUFJLENBQUNMLE9BQU8sQ0FBUCxJQUFZWCxNQUFNLENBQU4sQ0FBYixJQUF5QixDQUFqQztRQUNJaUIsSUFBSSxDQUFDTixPQUFPLENBQVAsSUFBWVgsTUFBTSxDQUFOLENBQWIsSUFBeUIsQ0FBakM7V0FDTyxDQUFDZ0IsQ0FBRCxFQUFJQyxDQUFKLENBQVA7Ozs7O1NBS0ssU0FBU0Msa0JBQVQsR0FBOEI7U0FDOUIsSUFBSUMsSUFBSSxDQUFiLEVBQWdCQSxJQUFJLENBQXBCLEVBQXVCLEVBQUVBLENBQXpCLEVBQTRCO2NBQ2xCVCxTQUFTZCxRQUFULEVBQW1CSSxLQUFuQixDQUFSO2NBQ1FELElBQVIsQ0FBYUMsS0FBYjs7U0FFR0gsT0FBTDtHQUxGOzs7QUN2REY7O0FBRUEsSUFBSXVCLHVCQUF1QjNDLGdCQUFnQixHQUFoQixFQUFxQixXQUFyQixFQUFtQyxTQUFuQyxDQUEzQjs7O0FBR0EsSUFBSU8sT0FBT0MsR0FBR0MsTUFBSCxDQUFVQyxNQUFWLENBQVg7QUFDQUgsS0FBS3FDLEVBQUwsQ0FBUSxXQUFSLEVBQXdCRCxvQkFBeEI7QUFDQXBDLEtBQUtxQyxFQUFMLENBQVEsY0FBUixFQUF3QkQsb0JBQXhCOzs7OzsifQ==

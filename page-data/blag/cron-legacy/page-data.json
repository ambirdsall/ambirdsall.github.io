{"componentChunkName":"component---src-templates-blog-template-js","path":"/blag/cron-legacy","result":{"data":{"markdownRemark":{"html":"<p>I thought it would be cool to get my computer to automatically run <code class=\"language-text\">brew\nupdate</code> every so often in the background and email me if anything went wrong. I\nthought it would be pretty simple! It was not, in fact, prety simple: I ran\ninto a bunch of super frustrating errors, usually because I was taking some\naspect of my normal terminal environment for granted (the <code class=\"language-text\">$PATH</code> variable that\ntells the shell where to look to find commands; email protocols and\nauthentication; ssh authentication; error handling in the shell; etc etc etc).</p>\n<p>But I learned a bunch in the process! So kick back, pour yourself a drink, and\nlearn about <code class=\"language-text\">cron</code>, the old-school unix tool you can use to run programs behind\nyour own back.</p>\n<h2 id=\"what-is-a-cron-and-how-does-it-cron\"><a href=\"#what-is-a-cron-and-how-does-it-cron\" aria-label=\"what is a cron and how does it cron permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is a <code class=\"language-text\">cron</code> and how does it... cron?</h2>\n<p>Cron is an old unix program used to run commands repeatedly on a schedule.\nThere are two main parts to the cron system: there is the cron daemon, a\nprogram that (once set up) is constantly running in the background; and there\nis the crontab file, which keeps the schedule of programs to run &#x3C;%=\n<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>. Once every minute on the minute,\nassuming your computer is awake and running, the cron daemon (the system\nautomatically launches <code class=\"language-text\">cron</code> after you save your first valid crontab file, and\non boot afterwards) evaluates each line of all of the relevant installed\ncrontab files, running any commands whose schedules match on the current\nminute. Any output to <code class=\"language-text\">$STDERR</code> is assumed to be an error and is mailed to you:\n<code class=\"language-text\">cron</code>'s default mailing strategy is a local \"mailbox\" originally used for\npre-internet user-to-user messages within a multi-user system, but if you're\nfancy with the google, it's pretty manageable to teach it to use something like\ngmail instead.</p>\n<h2 id=\"the-crontab-file\"><a href=\"#the-crontab-file\" aria-label=\"the crontab file permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The <code class=\"language-text\">crontab</code> file</h2>\n<p>You edit the crontab file with the command <code class=\"language-text\">crontab -e</code>, regardless of where\nyou are in the filesystem. You need to do some config to use this; more on that\nlater.</p>\n<p>Each line either contains a shell variable definition, in which case <code class=\"language-text\">cron</code>\nupdates its environment accordingly<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup>, or a\nscheduled command. Scheduled commands are structured like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">* * * * *  /absolute/path/of/command/to/execute\n│ │ │ │ │\n│ │ │ │ └─── day of week (0 - 7) (0 to 6 are Sunday to Saturday, or use names; 7 is Sunday, the same as 0)\n│ │ │ └──────── month (1 - 12)\n│ │ └───────────── day of month (1 - 31)\n│ └────────────────── hour (0 - 23)\n└─────────────────────── min (0 - 59)</code></pre></div>\n<p>For any element of a schedule (hours, minutes, etc), you can use:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">*  matches every value\n-  defines a range, like `9-17` for every hour from 9AM to 5PM\n,  separates multiple individual values, such as `MON,WED,FRI`</code></pre></div>\n<p>So, for example <code class=\"language-text\">0 9-17 * * 1-5</code> matches each hour from 9AM to 5PM on the hour,\neach weekday, with no restrictions by month or day of month.</p>\n<h2 id=\"editing-crontab-takes-special-config-because-life-is-suffering\"><a href=\"#editing-crontab-takes-special-config-because-life-is-suffering\" aria-label=\"editing crontab takes special config because life is suffering permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Editing <code class=\"language-text\">crontab</code> takes special config, because life is suffering</h2>\n<p>So <code class=\"language-text\">crontab -e</code> opens the file with whatever your have set to <code class=\"language-text\">$EDITOR</code> in your\nshell session. I use vim, which is secretly a problem: the <code class=\"language-text\">crontab</code> program\nsets some rules about how you save the file, and vim's defaults work\ndifferently.</p>\n<p>Specifically, when vim writes changes to a file, it first saves them as a\nbackup file, then overwrites the original. This helps vim be more confident it\nwon't corrupt data if it crashes partway through writing, but <code class=\"language-text\">crontab</code> won't\nlet you write to anything but the file itself, in-place. To get around this,\nadd to <code class=\"language-text\">~/.vimrc</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"vim\"><pre class=\"language-vim\"><code class=\"language-vim\"><span class=\"token builtin\">autocmd</span> <span class=\"token keyword\">filetype</span> crontab <span class=\"token keyword\">setlocal</span> <span class=\"token builtin\">nobackup</span> <span class=\"token builtin\">nowritebackup</span></code></pre></div>\n<p>&#x3C;%= section %q{<code class=\"language-text\">cron</code> doesn't have a lot of things I took for granted about the shell environment} %></p>\n<p>This isn't that bad to deal with once you get your head around it, but it took\nme a while to realize just how much implicit environment I rely on when working\nin a terminal. The main one is the <code class=\"language-text\">$PATH</code> variable: for every command that\nisn't built-in shell syntax, odds are good you'll need to prepend the <code class=\"language-text\">/bin/</code>\nor <code class=\"language-text\">/usr/local/bin/</code> or <code class=\"language-text\">/usr/sbin/</code> or what have you. If you don't know the\nfull path of some command you use a lot, for example, <code class=\"language-text\">git</code>, pop open a\nterminal and run <code class=\"language-text\">which git</code>.</p>\n<p>My first instinct was to make one of my <code class=\"language-text\">crontab</code> file's first lines something like</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span>/Users/ambirdsall/bin:/usr/local/bin:/usr/bin:/bin:/I/dunno/maybe/sbin:/other/things/I'm/used/to/also</code></pre></div>\n<p>If my crontab environment has access to all the same stuff I use everyday in my\nterminal, then writing a cron command is just like writing any old terminal\ncommand. But I think that's the wrong approach, for two reasons:</p>\n<ol>\n<li>Anything more complicated than a one-liner (and even many of those), you're\nbetter off just saving in a shell script</li>\n<li>If you succeed, you've just hidden from yourself how things work under the\nhood AND made it easier for part of your terminal-based life to get out of\nsync.</li>\n</ol>\n<p>If you feel a little lost when working with the full absolute paths of programs\nand would like a better handle on why different programs live in <code class=\"language-text\">/bin</code> vs\n'/sbin' vs <code class=\"language-text\">/usr/sbin</code> vs <code class=\"language-text\">/usr/local/bin</code>—or even why some programs live in\nmore than one of those places—just run <code class=\"language-text\">man hier</code> in your terminal and give it\na quick read.</p>\n<h2 id=\"lets-put-almost-all-of-it-together\"><a href=\"#lets-put-almost-all-of-it-together\" aria-label=\"lets put almost all of it together permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Let's put almost all of it together</h2>\n<p>Disclaimer: we're skipping over some hoops I had to jump through to send actual\nemails to my gmail account from the command line (google it) and the way\nthornier issue of how to authenticate an SSH connection with github (which is\nwhere <code class=\"language-text\">brew</code> searches for updates) in a bare-bones scripting environment\n(google \"askpass\" or go <em>really</em> HAM and learn to use <code class=\"language-text\">expect</code>). So:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token number\">0</span> * * * * /usr/local/bin/brew update</code></pre></div>\n<p>will run <code class=\"language-text\">brew update</code> every hour on the hour, every single day, with zero\nconscious effort on my part. Awesome! Awesome.</p>\n<p>Wait, this <em>is</em> actually awesome, right?</p>\n<p><img src=\"../../dumb-cron-error-email.png\" alt=\"A dumb cron error email\"></p>\n<p>Goddamn it.</p>\n<h2 id=\"okay-lets-just-go-through-one-of-the-dumb-problems\"><a href=\"#okay-lets-just-go-through-one-of-the-dumb-problems\" aria-label=\"okay lets just go through one of the dumb problems permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Okay, let's just go through <em>one</em> of the dumb problems</h2>\n<p>Here's what was going on:</p>\n<ol>\n<li>If everything is up to date, <code class=\"language-text\">brew</code> exits with a heads-up to <code class=\"language-text\">$STDERR</code></li>\n<li>Seeing a message in the error stream, <code class=\"language-text\">cron</code> emailed me</li>\n<li>I don't want email alerts every hour that things are still up-to-date</li>\n</ol>\n<p>So:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">/usr/local/bin/brew update <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span> <span class=\"token operator\">></span> /dev/null <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> -v <span class=\"token string\">'up-to-date'</span> <span class=\"token operator\">></span><span class=\"token file-descriptor important\">&amp;2</span></code></pre></div>\n<p>First, a quick note: I use <code class=\"language-text\">zsh</code>, not <code class=\"language-text\">bash</code>, and there are a few differences\nin how the two shells handle redirection, so if you use <code class=\"language-text\">bash</code>, you might\nneed to make a few changes to get it working properly\n<sup id=\"fnref-3\"><a href=\"#fn-3\" class=\"footnote-ref\">3</a></sup>.  Let's break this down:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span> <span class=\"token operator\">></span> /dev/null</code></pre></div>\n<p>The <code class=\"language-text\">2&gt;&amp;1</code> redirects <code class=\"language-text\">$STDERR</code> to <code class=\"language-text\">$STDOUT</code>. The <code class=\"language-text\">&gt; /dev/null</code> redirects\n<code class=\"language-text\">$STDOUT</code> to the Pit of Despair. If you think this seems like it will redirect\nEVERYTHING to <code class=\"language-text\">/dev/null</code>, leaving you nothing useful to work with, you think\nlike I do. But it doesn't! Whatever redirections you specify don't take effect\nuntil the next pipe (or the end of the pipeline if there is no next pipe). It\nmakes sense: this system lets you redirect a bunch of things\n<sup id=\"fnref-4\"><a href=\"#fn-4\" class=\"footnote-ref\">4</a></sup> to each\nothers' old handles at the same time without having to worry too much about\noverwriting important data streams because of accidental collisions along the\nway.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">grep</span> -v <span class=\"token string\">'up-to-date'</span></code></pre></div>\n<p>So it's the contents of <code class=\"language-text\">$STDERR</code> alone going through that pipe. Nice. <code class=\"language-text\">grep</code>'s\n<code class=\"language-text\">-v</code> flag reverses the pattern, meaning lines that DON'T contain 'up-to-date'\nare printed. Effectively, this filters out the 'up-to-date' error while letting\nother errors pass through.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span><span class=\"token file-descriptor important\">&amp;2</span></code></pre></div>\n<p>The last token there, <code class=\"language-text\">&gt;&amp;2</code>, redirects this filtered error stream from <code class=\"language-text\">$STDOUT</code>\nback to <code class=\"language-text\">$STDERR</code>; if anything else goes wrong, <code class=\"language-text\">cron</code> will email as it should,\nbut it won't spam my inbox with nonsense just because I'm already good.</p>\n<h3 id=\"nice\"><a href=\"#nice\" aria-label=\"nice permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>NICE.</h3>\n<p>Nice. Now go forth and automate the fuck out of some stuff!</p>\n\n      <div class=\"footnotes\">\n        <hr/>\n        <ol >\n    \n    <li class=\"footnote-list-item\" id=\"fn-1\" >\n          \n        <p class=\"footnote-paragraph\" style=\"display:inline; \">Depending on your operating system, there might be both system-wide\ncrontabs and user-specific crontab files; I'm only going to discuss systems\nwith a single crontab file here.</p>\n      <a href=\"#fnref-1\" class=\"footnote-backref\" style=\"display:inline;text-decoration: none;\">\n        ↩\n      </a>\n    \n      </li>\n      \n    \n\n    <li class=\"footnote-list-item\" id=\"fn-2\" >\n          \n        <p class=\"footnote-paragraph\" style=\"display:inline; \">Setting <code>$SHELL</code>, <code>$PATH</code>, and <code>$MAILTO</code> correctly is quite important, and\nworth some googling if you have questions.</p>\n      <a href=\"#fnref-2\" class=\"footnote-backref\" style=\"display:inline;text-decoration: none;\">\n        ↩\n      </a>\n    \n      </li>\n      \n    \n\n    <li class=\"footnote-list-item\" id=\"fn-3\" >\n          \n        <p class=\"footnote-paragraph\" style=\"display:inline; \">If you don't know what shell you're using, it's probably <code>bash</code>, but you\ncan check by running <code>echo $SHELL</code>.</p>\n      <a href=\"#fnref-3\" class=\"footnote-backref\" style=\"display:inline;text-decoration: none;\">\n        ↩\n      </a>\n    \n      </li>\n      \n    \n\n    <li class=\"footnote-list-item\" id=\"fn-4\" >\n          \n        <p class=\"footnote-paragraph\" style=\"display:inline; \">There's no rule that says <code>$STDIN</code>, <code>$STDOUT</code>, and <code>$STDERR</code> are the only\n<a href=\"https://en.wikipedia.org/wiki/File_descriptor\">file descriptors</a> your\nprocess can have open, after all.</p>\n      <a href=\"#fnref-4\" class=\"footnote-backref\" style=\"display:inline;text-decoration: none;\">\n        ↩\n      </a>\n    \n      </li>\n      \n    </ol></div>","frontmatter":{"date":"2016-10-11 22:15:35 UTC","path":"/blag/cron-legacy","title":"Cron: Legacy"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}
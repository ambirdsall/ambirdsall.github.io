{"componentChunkName":"component---src-templates-blog-template-js","path":"/blag/cut-out-the-middleman","result":{"data":{"markdownRemark":{"html":"<p>It came to pass that after 3 years of neglect, I wanted to revive my old\nwebsite. I figured I'd add a post or two, maybe tweak a few things about the\nHTML and CSS, and then I could rewrite it in a different stack at my leisure.\nI think a lot of things that are wrong, though.</p>\n<h2 id=\"problem-i-had-a-new-computer-and-my-webpage-had-a-fussy-development-env\"><a href=\"#problem-i-had-a-new-computer-and-my-webpage-had-a-fussy-development-env\" aria-label=\"problem i had a new computer and my webpage had a fussy development env permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Problem: I had a new computer and my webpage had a fussy development env;</h2>\n<p>I tried to run the development build, but ran into an error: I needed the right\nruby version. I've never done ruby development on this operating system, so I\ndon't have any tool in place to manage ruby versions. To fix things, I needed to\ninstall one of <code class=\"language-text\">chruby</code>/<code class=\"language-text\">rbenv</code>/<code class=\"language-text\">rvm</code>; setup <code class=\"language-text\">nix</code> or <code class=\"language-text\">guix</code> with <code class=\"language-text\">direnv</code>; or\nmaybe I could use <code class=\"language-text\">asdf</code> or fuck if I know what the cool kids are doing these\ndays. Oy, what a hassle. Still, I eventually got on the version of ruby\nspecified in the Gemfile and I got a different error. Progress, right?</p>\n<p>I needed to upgrade bundler, so I ran <code class=\"language-text\">bundle update --bundler</code>. This, it seems,\novershot the mark: I needed to downgrade bundler, which is a bigger hassle than\nupgrading. Whatever: I uninstalled the new version and installed the specific\nolder one that was compatible with the rest of the project.</p>\n<p>With this, I could actually run the site locally! All was not well, though: it\nlooked like crap. It turned out that only some of the stylesheets I was loading\nfrom a ruby gem were available in practice, and the icon font I had been using\nwas nowhere to be found<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>. At this point, I gave up: none of these problems were\ninsurmountable, but why go to all that effort when I wanted to rewrite it\nanyway?</p>\n<h2 id=\"and-having-been-exposed-to-jsx\"><a href=\"#and-having-been-exposed-to-jsx\" aria-label=\"and having been exposed to jsx permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>and, having been exposed to JSX,</h2>\n<p>In the ruby version, I used <code class=\"language-text\">.erb</code> files to handle dynamic data and a few bits\nof html boilerplate. The way <code class=\"language-text\">.erb</code> files treat the non-logic contents as a dumb\ntext stream, not something with a tree structure, makes it fundamentally a worse\nfit for modeling HTML than the tree structure of JSX templates<sup id=\"fnref-3\"><a href=\"#fn-3\" class=\"footnote-ref\">3</a></sup>. Having\nworked with react and angular, I don't want to go back to the bad old days of\nwrangling HTML as raw text, I want to compose and encapsulate HTML using\ncomponents; and having used JSX, embedding the structural logic of the template\nwithin the content has begun to feel inside out. I didn't want to use another\ntemplating system.</p>\n<h2 id=\"and-wanting-to-maintain-a-statically-generated-site\"><a href=\"#and-wanting-to-maintain-a-statically-generated-site\" aria-label=\"and wanting to maintain a statically generated site permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>and wanting to maintain a statically-generated site,</h2>\n<p>(While <code class=\"language-text\">create-react-app</code> is dope and all, there is zero dynamic content on this\nwhole site.)</p>\n<h2 id=\"the-choice-of-gatsby-seemed-good-so-i-set-to-work\"><a href=\"#the-choice-of-gatsby-seemed-good-so-i-set-to-work\" aria-label=\"the choice of gatsby seemed good so i set to work permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>the choice of gatsby seemed good, so I set to work.</h2>\n<p>First I made the page shell; that was just porting some html to react\ncomponents. It happened that all I needed were well-documented, <a href=\"https://www.gatsbyjs.org/plugins/\">easily\nsearchable plugins</a> to <a href=\"https://www.gatsbyjs.org/packages/gatsby-transformer-remark/\">render\nmarkdown</a>\ninto pages via a template; with <a href=\"https://www.gatsbyjs.org/packages/gatsby-remark-prismjs/\">colorized code\nblocks</a>;\nwith <a href=\"https://www.gatsbyjs.org/packages/gatsby-remark-autolink-headers/\">autolinked\nheaders</a>;\nwith\n<a href=\"https://www.gatsbyjs.org/packages/gatsby-remark-footnotes/\">footnotes</a>.</p>\n<p>As a sidenote, pour one out for good sidenotes. I'm still holding out hope I\nfind a decent plugin I can use to finagle sidenotes from markdown without\nneeding to go all the way on some Tufte CSS theme. I don't think I'm likely to\ngo to the effort of coding one up myself anytime soon, though.</p>\n<p>Anyway, I had the existing posts rendering acceptably to HTML from pure\nmarkdown, getting autolinking and asides without needing any .erb equivalent.</p>\n<h2 id=\"i-had-to-figure-out-how-to-sort-a-list-of-posts\"><a href=\"#i-had-to-figure-out-how-to-sort-a-list-of-posts\" aria-label=\"i had to figure out how to sort a list of posts permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>I had to figure out how to sort a list of posts;</h2>\n<p>This was straightforward: I wanted to group by topic, sort each topic by date,\nand sort the set of topics by date of most recent post. All the data I needed\nwas easily queryable from the markdown frontmatter via graphQL. You'll notice\nthat the remark plugin which renders the markdown exposes the list of rendered\nposts under a property named <code class=\"language-text\">edges</code> and, to be honest, I'm not sure why: the\nname seems to describe the data's underlying topology rather than its API.\nWhatever.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// the page component's props are destructured like so:</span>\n<span class=\"token comment\">// ({</span>\n<span class=\"token comment\">//   data: {</span>\n<span class=\"token comment\">//     allMarkdownRemark: { edges },</span>\n<span class=\"token comment\">//     site: { siteMetadata: { title }},</span>\n<span class=\"token comment\">//   },</span>\n<span class=\"token comment\">// })</span>\n<span class=\"token keyword\">const</span> postsByTopic <span class=\"token operator\">=</span> edges\n      <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token operator\">!</span>e<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>frontmatter<span class=\"token punctuation\">.</span>draft<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> e<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">topics<span class=\"token punctuation\">,</span> n</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> topic <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> n<span class=\"token punctuation\">.</span>frontmatter\n\n        <span class=\"token comment\">// nobody likes to evaluate `undefined.push(n)`</span>\n        topics<span class=\"token punctuation\">[</span>topic<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> topics<span class=\"token punctuation\">[</span>topic<span class=\"token punctuation\">]</span>\n          <span class=\"token operator\">?</span> topics<span class=\"token punctuation\">[</span>topic<span class=\"token punctuation\">]</span>\n          <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n        topics<span class=\"token punctuation\">[</span>topic<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n        topics<span class=\"token punctuation\">[</span>topic<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">newestFirst</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span> topics\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Order the topics by date of most recent post</span>\n<span class=\"token keyword\">const</span> Posts <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span>postsByTopic<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">newestFirst</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>renderSingleTopic<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Before you ask, yes, I know that sorting topics each time a new post is added is\nan <code class=\"language-text\">O(n²)</code> algorithm, yes, I know that's improvable, and no, I don't care to\nmake it more efficient: posts are sorted once at build time, and I'd have to\npublish a post ever day for years (if not decades) before that <code class=\"language-text\">n</code> gets big\nenough to be a problem. When efficiency is not important, always take the\napproach that's simplest to understand.</p>\n<p>I found it was significantly nicer to do the filtering in javascript than ruby.\nI was surprised by that, because I really love ruby's <code class=\"language-text\">Enumerable</code> methods. But\njs objects are up with cons cells among my very favorite data structures to work\nwith, first-class functions make custom sorting comparators easy to add as\narguments, and <code class=\"language-text\">Array.prototype</code> methods are just as chainable as\n<code class=\"language-text\">Enumerable</code>s<sup id=\"fnref-4\"><a href=\"#fn-4\" class=\"footnote-ref\">4</a></sup>. The definition of that <code class=\"language-text\">newestFirst</code> comparator function is\nleft as an exercise to the reader, that's already a fair chunk of code.</p>\n<h2 id=\"then-how-to-update-the-d3-triangle-thing-to-modern-d3-using-es6-imports\"><a href=\"#then-how-to-update-the-d3-triangle-thing-to-modern-d3-using-es6-imports\" aria-label=\"then how to update the d3 triangle thing to modern d3 using es6 imports permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>then how to update the d3 triangle thing to modern d3 using es6 imports</h2>\n<p>This wasn't too bad: I changed all the <code class=\"language-text\">var</code> statements to <code class=\"language-text\">const</code>; fixed the\none variable I mutate in place (it's the easiest way to implement the algorithm)\nto use <code class=\"language-text\">let</code> instead; and imported <code class=\"language-text\">d3</code>. Modern versions of <code class=\"language-text\">d3</code> export their\nconstituent parts as named exports, for ease of tree-shaking, so I had change\nthe code to import the functions I actually used instead of relying on the <code class=\"language-text\">d3</code>\nobject to have everything. <code class=\"language-text\">d3.scale.linear()</code> had become <code class=\"language-text\">d3.scaleLinear()</code>,\nbut otherwise this was a pretty mechanical translation.</p>\n<h2 id=\"then-how-to-embed-a-d3-controlled-element-in-a-react-component\"><a href=\"#then-how-to-embed-a-d3-controlled-element-in-a-react-component\" aria-label=\"then how to embed a d3 controlled element in a react component permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>then how to embed a d3-controlled element in a react component</h2>\n<p>Figuring this part out was kind of fun! The basic 2-step to mounting a\nself-contained <code class=\"language-text\">d3</code> visualization inside of a react app:</p>\n<ol>\n<li><code class=\"language-text\">const domElementRef = useRef(null)</code></li>\n<li><code class=\"language-text\">useEffect(() =&gt; d3.select(domElementRef.current).doStuffWith(props.data), [props.data])</code></li>\n</ol>\n<p>That's the general approach, since usually a <code class=\"language-text\">d3</code> visualization is based on some\ninput data and should rerender when and if the data changes; mine uses\nrandomly-generated data, though, so I didn't even need the dependency array.</p>\n<p>Regardless, it's much nicer to do with hooks than lifecycle methods, where you'd\nneed to use both <code class=\"language-text\">componentDidMount</code> and <code class=\"language-text\">componentDidUpdate</code> to ensure the\nvisualization ran at all the appropriate times.</p>\n<h2 id=\"and-then-i-had-a-site\"><a href=\"#and-then-i-had-a-site\" aria-label=\"and then i had a site permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>and then I had a site!</h2>\n<p>I hope you like it.</p>\n\n      <div class=\"footnotes\">\n        <hr/>\n        <ol >\n    \n    <li class=\"footnote-list-item\" id=\"fn-1\" >\n          \n        <p class=\"footnote-paragraph\" style=\"display:inline; \">It is very popular to try to dunk on the javascript ecosystem in various parts\nof programmer culture<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup>, and one of the very most popular ways is to clown on\nthe size of the <code>node_modules</code> directory. Since <code>npm</code> installs every package on\na per-project basis; since it errs on the side of having multiple (potentially\nincompatible) versions of transitive dependencies rather than forcing you to\njust choose one; and since javascript itself has a very small standard library,\nleading to heavy use of library code; it's common to have large <code>node_modules</code>\ndirectories on your hard drive. Clown all you want, but the self-containment of\nthat approach would have saved me a bunch of hassle here. Or maybe I just had a\nbadly-written <code>Gemfile</code>.</p>\n      <a href=\"#fnref-1\" class=\"footnote-backref\" style=\"display:inline;text-decoration: none;\">\n        ↩\n      </a>\n    \n      </li>\n      \n    \n\n    <li class=\"footnote-list-item\" id=\"fn-2\" >\n          \n        <p class=\"footnote-paragraph\" style=\"display:inline; \">I have the strong impression that this is at least in\npart sub-rosa sexism: frontend work, being user-facing and visual, fits\nstereotypes of women's work, and indeed many female programmers are channeled\ninto frontend work regardless of their specific interests or abilities.\nNeckbeards huddle together discussing the manly arts of functional programming,\nasynchronous logic, optimizing dependency graphs, and distributed computing,\nnever pausing to consider that those are all part and\n<a href=\"https://parceljs.org/\">parcel</a> of frontend work. But I digress.</p>\n      <a href=\"#fnref-2\" class=\"footnote-backref\" style=\"display:inline;text-decoration: none;\">\n        ↩\n      </a>\n    \n      </li>\n      \n    \n\n    <li class=\"footnote-list-item\" id=\"fn-3\" >\n          \n        <p class=\"footnote-paragraph\" style=\"display:inline; \">I have an intuition that this has to do with the ol' Chomsky hierarchy,\nakin to how regular expression can scan text streams in sophisticated ways but\ncan't validate structural features like valid nesting or pairing.</p>\n      <a href=\"#fnref-3\" class=\"footnote-backref\" style=\"display:inline;text-decoration: none;\">\n        ↩\n      </a>\n    \n      </li>\n      \n    \n\n    <li class=\"footnote-list-item\" id=\"fn-4\" >\n          \n        <p class=\"footnote-paragraph\" style=\"display:inline; \">A rant: what the fuck is up with how <code>sort</code> mutates the array in place?\nIt's totally out of character with the rest of the <code>Array.prototype</code> chainable\nmethods, which return new arrays, and its idiosyncracy offers no benefit: it's\njust a footgun which makes it easy to mutate your application data behind your\nown back. I realize backwards compatibility means we're stuck with a mutating\n<code>sort</code>, but I really do think the next iteration of the language should add a\nnew <code>Array.prototype.sorted</code> method which returns a new sorted array.</p>\n      <a href=\"#fnref-4\" class=\"footnote-backref\" style=\"display:inline;text-decoration: none;\">\n        ↩\n      </a>\n    \n      </li>\n      \n    </ol></div>","frontmatter":{"date":"2019-12-02 01:03:30 UTC","path":"/blag/cut-out-the-middleman","title":"Rewriting a middleman site with gatsby"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}
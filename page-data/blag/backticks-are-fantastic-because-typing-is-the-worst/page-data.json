{"componentChunkName":"component---src-templates-blog-template-js","path":"/blag/backticks-are-fantastic-because-typing-is-the-worst","result":{"data":{"markdownRemark":{"html":"<h2 id=\"backticks-are-fantastic\"><a href=\"#backticks-are-fantastic\" aria-label=\"backticks are fantastic permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Backticks Are Fantastic</h2>\n<p>I mean, <a href=\"http://www.refining-linux.org/archives/44/ZSH-Gem-10-Backtick-expansion/\">legit\nawesome</a>.\nHere's a contrived recreation of a real-world example I encountered:</p>\n<p><img src=\"../../ln_backticks.gif\" alt=\"animated demonstration of backtick expansion in zsh\"></p>\n<p>Let's break this down. When making a symbolic link, you have to type out the absolute path to the\nlink target. There are reasons for that (though I'd prefer <code class=\"language-text\">ln</code> just expanded relative links before\nmaking the symlink, tbh), but a lot of directory names are a hassle to type out. Everyone who's\nworked in a JVM language feels me.</p>\n<p>Two things help:</p>\n<ol>\n<li>If, as is often the case, you want to link to go in your current directory, you can totally omit the second argument</li>\n<li>Typing some shell expression inside backticks which generates the path. If you use <code class=\"language-text\">bash</code>, you just have to trust your short-term memory, but hitting <code class=\"language-text\">tab</code> expands that expression interactively in <code class=\"language-text\">zsh</code>. You use <code class=\"language-text\">zsh</code>, right?</li>\n</ol>\n<p>Some would argue that the <code class=\"language-text\">$()</code> subshell operator has strictly more powerful semantics than\nbackticks because it can be nested; they are, of course, correct. Other people like subshells\nbecause when you nest them, it reads just like lisp code; they are, of course, nerds<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>. When you don't\nhave to nest anything, though, backticks have a killer advantage over subshells:</p>\n<ol>\n<li>33% fewer keystrokes</li>\n</ol>\n<p>Choose your own adventure.</p>\n\n      <div class=\"footnotes\">\n        <hr/>\n        <ol >\n    \n    <li class=\"footnote-list-item\" id=\"fn-1\" >\n          \n        <p class=\"footnote-paragraph\" style=\"display:inline; \">When it comes to lisp, I am, of course, <a href=\"https://github.com/ambirdsall/moon-phase\">a gigantic\nnerd</a> myself.</p>\n      <a href=\"#fnref-1\" class=\"footnote-backref\" style=\"display:inline;text-decoration: none;\">\n        â†©\n      </a>\n    \n      </li>\n      \n    </ol></div>","frontmatter":{"date":"2016-09-20 03:47:25 UTC","path":"/blag/backticks-are-fantastic-because-typing-is-the-worst","title":"Backticks Are Fantastic Because Typing Is The Worst"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}
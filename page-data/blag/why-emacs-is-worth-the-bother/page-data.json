{"componentChunkName":"component---src-templates-blog-template-js","path":"/blag/why-emacs-is-worth-the-bother","result":{"data":{"markdownRemark":{"html":"<p>Emacs has a few unusual properties which work together really well, making for a\nsuper powerful, flexible system that's easier to bend to your will in\nsophisticated ways than almost anything else around. That might sound like a lot\nof work, but most day-to-day emacs usage isn't reinventing the world; when you\nwant to do something custom, though, the power is right at your fingertips.\nLiterally.</p>\n<p>What are those properties? Well:</p>\n<ol>\n<li>\n<p>Emacs is configured with a full-fledged, high-level programming language,\nwith functions, control flow, etc. Emacs lisp is a dynamic functional\nlanguage; the syntax is out of the ordinary, but under the hood, it's a\nlittle like old-school javascript with an emphasis on linked lists, strings,\nand text buffers. Except for macros, which are powerful like magic, only\nlessâ€¦ magical.</p>\n</li>\n<li>\n<p>Literally everything you can do in emacs, including really basic stuff like\n\"move the cursor forwards 15 characters\" and \"insert the text <code class=\"language-text\">function fo() { return \"haha this was not named foo\" }</code>\" can be scripted with emacs lisp.\nHere:</p>\n<div class=\"gatsby-highlight\" data-language=\"emacs-lisp\"><pre class=\"language-emacs-lisp\"><code class=\"language-emacs-lisp\"><span class=\"token punctuation\">(</span><span class=\"token car\">forward-char</span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token car\">insert</span> <span class=\"token string\">\"function fo() { return \\\"haha this was not named foo\\\" }\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p>Literally every user interaction follows the same model: you hit a key (or\nequivalent, like clicking the mouse), which triggers some lisp function.</p>\n</li>\n<li>\n<p>You can look up, at any time you want, the name of the function bound to any\nkey; the full documentation for any function (with a hyperlink to its source\ncode, so you can dig as deep as you want); and the value of any variable.\nJust type <code class=\"language-text\">C-h</code> and then one of <code class=\"language-text\">k</code>, <code class=\"language-text\">f</code>, or <code class=\"language-text\">v</code> (guess which is which).\n(There are lots more help options under that <code class=\"language-text\">C-h</code> prefix, too.)</p>\n</li>\n<li>\n<p>Literally any keystroke and combination can be bound to any function you\nwant.</p>\n</li>\n</ol>\n<p>I know I used \"literally\" a lot in there, but lots of programs make sweeping\n\"[verb] any [noun]!\"-type claims that are only <em>mostly</em> true.</p>\n<p>Anyway, once you internalize the logic of this system, you have superpowers! Did\nsomething weird just happen? Type <code class=\"language-text\">C-h k</code>, then hit the same keystroke again to\nfind out what function is responsible. Want to change what that keystroke does?\nYou can, on the fly. You always open the same file, so you want a shortcut?\nThat's like a 30-second customization, once you're used to emacs. Want to do\nsomething fancy, but you don't know what the right function is named? Just\nsearch for all the available function names with <code class=\"language-text\">C-h f</code>, and if one sounds\nright, select it to check its documentation. Faster than google, and always, by\ndefinition, up-to-date with your specific emacs instance.</p>\n<p>Emacs has a lot of janky and/or bullshit characteristics, due to its long\nhistory, survivor bias, and occasionally just due to the intransigence of the\nmaintainers (if any emacs maintainers read this, a sincere thank you for all you\ndo and all you have done! Now please, for the love of humans, approve some PRs\nto make the default UI more beginner-friendly and update its looks). No emacs\nuser is beholden to those neckbeards, though: if you don't like it, you can\nchange it. Or if you're not feeling like all that work, you can usually find\nsomeone else who already changed it the way you want and put that shit on\ngithub.</p>\n<h2 id=\"seriously-before-you-get-started-remap-caps-lock-to-control\" style=\"position:relative;\"><a href=\"#seriously-before-you-get-started-remap-caps-lock-to-control\" aria-label=\"seriously before you get started remap caps lock to control permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>seriously, before you get started: remap caps lock to control</h2>\n<p>Caps lock is useless. Control is <em>constantly</em> used in emacs. As a bonus, lots of\nstandard emacs shortcuts for text navigation (<code class=\"language-text\">C-a</code> to jump to start of line;\n<code class=\"language-text\">C-e</code> to jump to end of line; <code class=\"language-text\">C-k</code> to delete from the cursor to the end of text\nor the next newline, whichever comes first; <code class=\"language-text\">C-t</code> to \"transpose\" two characters\nwhen you make a tyop; <code class=\"language-text\">C-n</code> and <code class=\"language-text\">C-p</code> to go down/up one line) work in the shell\nand in almost all OSX text fields. If control is where caps lock was, all this\nis right on home row, super easy and ergonomic to use. If not, you sort of end\nup making weird claw hands all the time.</p>\n<h2 id=\"okay-with-that-out-of-the-way-quick-start\" style=\"position:relative;\"><a href=\"#okay-with-that-out-of-the-way-quick-start\" aria-label=\"okay with that out of the way quick start permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>okay, with that out of the way: quick start</h2>\n<p>Lots of people will tell you that stock emacs sucks. That is because stock emacs\nkind of sucks. We can do better than that.</p>\n<h3 id=\"install-a-version-of-emacs-that-isnt-awfula-idsec-3-1a\" style=\"position:relative;\"><a href=\"#install-a-version-of-emacs-that-isnt-awfula-idsec-3-1a\" aria-label=\"install a version of emacs that isnt awfula idsec 3 1a permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Install a version of emacs that isn't awful<a id=\"sec-3-1\"></a></h3>\n<p>If you're on a mac, there is an <code class=\"language-text\">emacs</code> pre-installed, but it's like 10 years\nout of date and only works in the terminal. It's good for one thing:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># haha, good luck figuring out how to close emacs</span>\nemacs <span class=\"token parameter variable\">-q</span> --no-splash <span class=\"token parameter variable\">-f</span> tetris</code></pre></div>\n<p>Tetris? Remember, you can rebind any keystroke to run your own code, and emacs\nwill do any song and dance you're clever/patient enough to write. Web browsers\nwere originally just for viewing documents, too.</p>\n<p>For your non-tetris needs, you'll want to do one of these</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\">## good, but ought to be better</span>\nbrew <span class=\"token function\">install</span> emacs\n\n<span class=\"token comment\">## much better, unless connecting to your running emacs from the terminal is important to you</span>\n<span class=\"token comment\">## (and if it is, you probably don't need introductory notes?)</span>\nbrew tap railwaycat/emacsmacport\nbrew <span class=\"token function\">install</span> emacs-mac</code></pre></div>\n<p>Why is the normal emacs not the best choice for mac? Because the Free Software\nFoundation people are assholes about everything but linux. Sorry, \"GNU/linux\".\nSo some guy forked emacs so he could add e.g. native OSX smooth scrolling and\nshit.</p>\n<h3 id=\"install-a-starter-kit\" style=\"position:relative;\"><a href=\"#install-a-starter-kit\" aria-label=\"install a starter kit permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Install a starter kit</h3>\n<p>These have gotten popular these days. Basically, these are community-maintained\nconfigurations on top of emacs. They add in useful third-party libraries (in\nsome cases, so useful they have become de facto standards), update the styling\nso emacs looks like it's from the present, instead of the mid-90s, and usually\noffer a bunch of variables you can tweak to easily toggle features and stuff.\nThey're generally intended to be a more powerful and beautiful \"batteries\nincluded\" starting point for people. To install a starter kit, just clone the\nproject repository to <code class=\"language-text\">~/.emacs.d</code>; when you next start emacs, it will\nautomatically load that code.</p>\n<h4 id=\"if-you-like-piÃ±a-coladas-and-getting-stuck-in-a-vim-session\" style=\"position:relative;\"><a href=\"#if-you-like-pi%C3%B1a-coladas-and-getting-stuck-in-a-vim-session\" aria-label=\"if you like piÃ±a coladas and getting stuck in a vim session permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>If you like piÃ±a coladas, and getting stuck in a vim session</h4>\n<p>My favorite is Spacemacs (<a href=\"http://spacemacs.org/\">http://spacemacs.org/</a>). It's also probably the most\npopular, and therefore the best supported, with the most stack overflow answers\na quick google away. Spacemacs is written by and for people who like vim's\ncommand language (which is an insanely good fit for emacs' keybinding model,\nactually), but you don't need to use it in a vimmy way. Most people do, because\nit's insanely good like that, but you do you. Spacemacs has a wonderful system\nof mnemonic commands that you access via a universal prefix key, which is the\nspace bar if you use vim keybindings and something else if you don't. I'd\nhonestly recommend spacemacs even if you choose not to use vim bindings at all.</p>\n<h4 id=\"if-you-want-something-more-traditionally-emacsy-because-you-dont-give-a-fuck-about-vim\" style=\"position:relative;\"><a href=\"#if-you-want-something-more-traditionally-emacsy-because-you-dont-give-a-fuck-about-vim\" aria-label=\"if you want something more traditionally emacsy because you dont give a fuck about vim permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>If you want something more traditionally emacsy, because you don't give a fuck about vim</h4>\n<p>A venerable starter kit that's a bit more mainline emacs is Prelude\n(<a href=\"https://github.com/bbatsov/prelude\">https://github.com/bbatsov/prelude</a>). I haven't used it, so I can't comment on\nit much, but I've heard very good things, and its primary maintainer is pretty\nlegit.</p>\n<h4 id=\"if-you-want-to-be-fancy\" style=\"position:relative;\"><a href=\"#if-you-want-to-be-fancy\" aria-label=\"if you want to be fancy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>If you want to be FANCY</h4>\n<p>A new one is Centaur (<a href=\"https://github.com/seagle0128/.emacs.d\">https://github.com/seagle0128/.emacs.d</a>). Centaur is very\npretty and into normal modern UI stuff like file trees with icons and tabs and\nstuff.</p>\n<p>Oh yeah, emacs doesn't really even have decent tab support? At the time of\nwriting, in the year of our lord 2019, it's only a first-class UI feature in the\ncutting edge versions and hasn't even made it to a stable release. Centaur tabs\nare clever, but a hack. I dunno, y'all, nothing's perfect.</p>\n<p>Cool, you have a modern version of emacs, and now it looks adequate. Let's get\noriented.</p>\n<h3 id=\"a-quick-tour-of-essential-emacs-keybindings\" style=\"position:relative;\"><a href=\"#a-quick-tour-of-essential-emacs-keybindings\" aria-label=\"a quick tour of essential emacs keybindings permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>A quick tour of essential emacs keybindings</h3>\n<p>You can remap any key in any mode, but the defaults are around until and unless\nyou change them, so they're worth knowing. I'm assuming you didn't install\nspacemacs in vim mode; if you did, a few parts of this won't generally apply.</p>\n<p>By convention, emacs documents keystrokes (in all of its documentation and when\nreporting what keys a function is bound to) a certain way. I've already used it\nabove. Here's a more complicated keybinding:</p>\n<blockquote>\n<p><code class=\"language-text\">C-x c</code></p>\n</blockquote>\n<p>This means \"hold control and type x; then type c\". You never hit control except\nin combination with other keys, so the \"c\" character is unambiguous in both\nspots there. In keybinding notation, dashes mean \"hit these two keys together\"\nand spaces mean \"after typing key X, release the keys and then type key Y\".</p>\n<p>Two modifier keys are king in emacs: control, which is the control key, and\nmeta, which is the alt key. It's weird, but emacs literally predates the alt key\nbeing standard. Meta is <code class=\"language-text\">M-[something]</code> in keybinding notation.</p>\n<p>If you're a hipster like me, you might switch things up so that the mac command\nkey is meta instead of alt. Emacs is what you make it.</p>\n<h4 id=\"first-command-to-learn-m-x-lets-you-run-commands-by-name\" style=\"position:relative;\"><a href=\"#first-command-to-learn-m-x-lets-you-run-commands-by-name\" aria-label=\"first command to learn m x lets you run commands by name permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>First command to learn: <code class=\"language-text\">M-x</code> lets you run commands by name</h4>\n<p>A decent starter configuration will give you a nice fuzzy search interface when\nyou hit <code class=\"language-text\">M-x</code>. Start typing, and when the command you want comes up in the\nresults, you can use the arrow keys and enter to execute that command. Don't\nremember the keybinding for some functionality? Hit <code class=\"language-text\">M-x</code> and start typing its\nname. Since keyboard space is finite, some commands can only be run like this.\nFor example, <code class=\"language-text\">M-x snake</code> starts a game of snake, and <code class=\"language-text\">M-x doctor</code> starts a\npsychotherapy session with everyone's favorite 1960s chatbot ELIZA.</p>\n<h4 id=\"first-commands-to-learn-what-to-do-when-you-panic\" style=\"position:relative;\"><a href=\"#first-commands-to-learn-what-to-do-when-you-panic\" aria-label=\"first commands to learn what to do when you panic permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>First commands to learn: what to do when you panic</h4>\n<p><code class=\"language-text\">C-x C-c</code> closes the program. It's good to know, especially if you run it in a\nterminal.</p>\n<p>Within a session, if emacs freezes, or starts acting weird, or you mistype and\nfind yourself halfway into the wrong key sequence, start spamming <code class=\"language-text\">C-g</code> to\ncancel out of whatever the current thing is. The downside to letting people run\ntheir own code is that sometimes they write dumb code and have stuff like\ninfinite loops. In cases like this, <code class=\"language-text\">C-g</code> is your friend. You can also spam the\nescape key: on the rare occasion <code class=\"language-text\">C-g</code> doesn't work, three escapes usually will.</p>\n<h4 id=\"theres-a-method-to-the-madness\" style=\"position:relative;\"><a href=\"#theres-a-method-to-the-madness\" aria-label=\"theres a method to the madness permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>There's a method to the madness</h4>\n<p>Really quick commands you will do while you type code/prose/emails/whatever are\nbound to control [something] or meta [something], so you can just bust them out\nquickly. Commands that are common but that you're less likely to use in quick\nsuccession, like saving, managing your windows, quitting emacs, etc, are under\nthe <code class=\"language-text\">C-x</code> prefix (the \"x\" is for \"execute command\": Emacs tries to make stuff\nmnemonic). Commands that are less common than that (or when you remember the\nname but not the keybinding), you can type <code class=\"language-text\">M-x</code> and find them by name. The\nsimilarity of the two \"execute command\" keybindings, <code class=\"language-text\">C-x</code> and <code class=\"language-text\">M-x,</code> is not a\ncoincidence. Mnemonic, remember?</p>\n<p>That's a decent intro to the standardish sort-of-hierarchy for what different\nmodifier keys mean with the same key. <code class=\"language-text\">C-f</code> goes forwards one character; <code class=\"language-text\">M-f</code>\ngoes forwards one word; <code class=\"language-text\">C-M-f</code> goes forward one semantic unit (paired quotes or\nbraces, a code block, or whatever: different language modes can define what a\nsemantic unit is, and emacs has some more-or-less sensible global defaults).\nWhen \"same thing, but with a wider scope\" doesn't make sense, sometimes control\nand meta do opposite versions of the same thing. I don't want to bog you down\nwith examples, though: you can get by for a while using arrow keys, the mouse,\nand a small handful of memorized commands.</p>\n<p>The file menu is a nice way to find commands at first, too, though you'll\nprobably leave it behind as you internalize a more keyboard-driven workflow.</p>\n<h3 id=\"what-is-a-mode-even\" style=\"position:relative;\"><a href=\"#what-is-a-mode-even\" aria-label=\"what is a mode even permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>what is a mode, even</h3>\n<p>Modes are how emacs lets you apply or remove related configurations and\nkeybindings en masse. Functions that manipulate ruby code only make sense if\nyou're editing a ruby file; so those keybindings only apply when <code class=\"language-text\">ruby-mode</code> is\nactive. <code class=\"language-text\">ruby-mode</code> is a <em>major</em> mode.</p>\n<p>Every buffer has one (1) major mode. This says what kind of thing that buffer\nis. Is it a file of some programming language? Each programming language has its\nown major mode (sometimes you even have a couple options, because open source).\nIs the buffer an interactive feature, like a game of tetris or a git dashboard?\nIs it some elisp function's documentation? That's the major mode. You can use\n<code class=\"language-text\">M-x</code> to change the major mode (they're just functions, under the hood), and\ninteract with the buffer contents in a different way, but you almost never have\nto.</p>\n<p>You can only have one major mode per buffer, but you can have as many minor\nmodes as you want. Minor modes tend to wrap a few related functions and settings\ninto some feature, so you can easily toggle the feature by (de)activating the\nminor mode. Autocomplete is a minor mode. Spell-check is a minor mode.\n<a href=\"https://elpa.gnu.org/packages/rainbow-mode.html\">rainbow-mode</a> is a minor mode,\nand makes writing CSS so much nicer. A <a href=\"https://github.com/TeMPOraL/nyan-mode\">nyan cat status\nbar</a> to tell you how far into a buffer\nyou are? Minor mode. Most features are implemented as minor modes.</p>\n<h3 id=\"one-of-the-killer-apps-org-mode\" style=\"position:relative;\"><a href=\"#one-of-the-killer-apps-org-mode\" aria-label=\"one of the killer apps org mode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[one of] the killer app[s]: org-mode</h3>\n<p><code class=\"language-text\">org-mode</code> is sort of like markdown on steroids. You can rearrange the order and\nlevel of headings interactively on the fly; edit code snippets as if they were\nactual files, with full language support; edit tables like a spreadsheet; export\nyour notes to pdf, html, LaTeX, github-flavored markdown (although github parses\n<code class=\"language-text\">.org</code> files just like it does <code class=\"language-text\">.md</code> ones), or a reveal.js slideshow; and so, so\nmuch more. I wrote this page as some quick-and-dirty notes in <code class=\"language-text\">org-mode</code>\n(seriously: if you replace <code class=\"language-text\">index.html</code> with <code class=\"language-text\">index.org</code>, you can see the raw\nsource). <code class=\"language-text\">org-mode</code> started out life as a third-party package for emacs, but it\nis so good and became so popular that it's included with emacs now.</p>\n<p>The basics (slightly different markdown with magic table formatting and built-in\ntodo list support!) are simple to learn and legitimately powerful on their own;\nbut its feature set is so deep, you can spend years learning it and still not\nknow everything. Even if you never use emacs for anything else, <code class=\"language-text\">org-mode</code> is\nworth it.</p>\n<p>Honest-to-god: take 30ish minutes of your life (you don't need to watch the Q\nand A for pete's sake) and watch this presentation that Carsten Dominik, the\nGerman astronomer who authored org-mode, gave at google:</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/oJTwQvgfgMM\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>","frontmatter":{"date":"2019-12-02 05:46:35 UTC","path":"/blag/why-emacs-is-worth-the-bother","title":"Why emacs is worth the bother"}}},"pageContext":{}},"staticQueryHashes":["3649515864","63159454"]}
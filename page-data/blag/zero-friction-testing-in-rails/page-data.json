{"componentChunkName":"component---src-templates-blog-template-js","path":"/blag/zero-friction-testing-in-rails","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p><strong>AUTHOR'S NOTE:</strong> this post is several years old, but it's a fun time\ncapsule. Professionally I was but a babe, and had just left one of my first\nprogramming jobs, where I had encountered my first truly heinous codebase. I was\nalmost comically thirsty for quality and blessed with a project that was\nconceptually reducible to a pure function. Nonetheless, what is describes\nremains my favorite programming workflow: in a split terminal window, running\n<code class=\"language-text\">vim</code> or <code class=\"language-text\">emacsclient -nw</code> on one side and unit tests on the other.</p>\n</blockquote>\n<p>So. It wasn't until a few months ago that I finally worked on a software\nproject with full test coverage. Now that I have, I'm a little shocked and\nhorrified it took this long: the quality of life is drastically better on\nthis side. The project in question is <a href=\"https://law.cornell.edu/rio\">RIO</a>, an\nES6 legal citation parser I've been building for Cornell Law's LII. I've been\ndeveloping that solo, so I had the liberty of setting the testing mantle up to\nsuit my own workflow: heavily terminal-based, using vim and tmux.</p>\n<p>I've found that it's a massive help to be able to have tests constantly\nrerunning in a splitscreen with vim every time I save a file. The constant\nfeedback means I don't need to keep switching mental context to see if my code\nis correct: I can, while still in my editor, just glance over at a current test\nrun. This has utterly revolutionized how I feel about refactoring: knowing\nexactly when my code breaks and unbreaks as I rearrange things is a massive\nhelp for refactoring, and reveals bugs pretty much the instant they are\nintroduced. I haven't had to write a <code class=\"language-text\">debugger</code> in anger in a shockingly long\ntime. I want that confidence and speed when I work on rails projects, too.</p>\n<p>So, to recap, I want</p>\n<ol>\n<li>fast tests that</li>\n<li>run automatically on file save</li>\n<li>run by a persistent server I can ogle in a tmux split while I vim away in\nthe same terminal window.</li>\n</ol>\n<h2 id=\"fast-tests\" style=\"position:relative;\"><a href=\"#fast-tests\" aria-label=\"fast tests permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fast tests</h2>\n<p>The speed can be helped by <code class=\"language-text\">spring</code>, a gem that comes in rails' default\n<code class=\"language-text\">Gemfile</code> but which takes a bit of setup. Once you <em>have</em> set it up, though,\nit's brilliant. After the first command which requires loading your rails app,\n<code class=\"language-text\">spring</code> keeps running as a background process, with your application\nenvironment loaded into memory. This means that the next time you run a command\nthat requires a loaded app, like your test suite, you get to skip the\nseveral-second wait for rails to bootstrap itselfÂ­you only need to run\nthe test files themselves. Out of the box, <code class=\"language-text\">spring</code> only knows how to wrap the\n<code class=\"language-text\">rails</code> and <code class=\"language-text\">rake</code> commands to use the preloaded app, but the\n<code class=\"language-text\">spring-commands-rspec</code> gem expands that set to also wrap <code class=\"language-text\">rspec</code>, which I'm\nusing for my tests.</p>\n<p>Incidentally, I've read things which assert that <code class=\"language-text\">minitest</code> is a good bit\nfaster than <code class=\"language-text\">rspec</code>; but <code class=\"language-text\">rspec</code> has quite a lot of community support, and I've\nbeen writing a ton of <code class=\"language-text\">jasmine</code> tests lately, which has wicked similar syntax.\nThe point of this is to lower the cognitive load of testing, after all. With a\nmassive test suite, though, the time savings might be worth switching over. As\nalways, measure: the old command-line standby <code class=\"language-text\">time</code> is your friend.</p>\n<h2 id=\"running-automatically-on-file-save\" style=\"position:relative;\"><a href=\"#running-automatically-on-file-save\" aria-label=\"running automatically on file save permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Running automatically on file save</h2>\n<p><code class=\"language-text\">guard</code> is the gem of choice here. It reads a <code class=\"language-text\">Guardfile</code> in the root of your\nproject: in that <code class=\"language-text\">Guardfile</code>, which is written in a ruby DSL, you define what\nactions <code class=\"language-text\">guard</code> should run for given project files and which files to ignore.\nIf you, like I, are on osx, you should also install <code class=\"language-text\">rb-fsevent</code>, which makes\n<code class=\"language-text\">guard</code> listen to osx's native FSEvents API instead of having to poll the disk\nfor changes (which is slower and takes more work from your CPU). You can\nspecify any command-line callback you like in your <code class=\"language-text\">Guardfile</code> with backticks,\nbut there are quite a few guard plugins that automatically set up conventional\nrules for a conventional rails configuration and tool-specific configuration\noptions. Enter <code class=\"language-text\">guard-rspec</code>.</p>\n<p>Here are the versions of all the gems I used when I went through this myself,\nif you're into that sort of thing:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">guard 2.14.0\nguard-rspec 4.7.3\nrails 4.2.5\nrb-fsevent 0.9.8\nruby 2.3.1\nspring 2.0.0\nspring-command-rspec 1.0.4</code></pre></div>\n<h2 id=\"lets-set-these-bad-not-specifically-gendered-children-up\" style=\"position:relative;\"><a href=\"#lets-set-these-bad-not-specifically-gendered-children-up\" aria-label=\"lets set these bad not specifically gendered children up permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Let's set these bad not-specifically-gendered children up</h2>\n<p>In your <code class=\"language-text\">Gemfile</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">group <span class=\"token symbol\">:development</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:test</span> <span class=\"token keyword\">do</span>\n  gem <span class=\"token string-literal\"><span class=\"token string\">'spring-commands-rspec'</span></span>\n  gem <span class=\"token string-literal\"><span class=\"token string\">'rspec-rails'</span></span>\n  gem <span class=\"token string-literal\"><span class=\"token string\">'guard-rspec'</span></span>\n  gem <span class=\"token string-literal\"><span class=\"token string\">'rb-fsevent'</span></span> <span class=\"token keyword\">if</span> <span class=\"token command-literal\"><span class=\"token command string\">`uname`</span></span> <span class=\"token operator\">=~</span> <span class=\"token regex-literal\"><span class=\"token regex\">/Darwin/</span></span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>And</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">bundle</code></pre></div>\n<h2 id=\"setup-spring\" style=\"position:relative;\"><a href=\"#setup-spring\" aria-label=\"setup spring permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setup Spring</h2>\n<p>To generate the command wrappers necessary to use the preloaded app, run</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">spring binstub <span class=\"token parameter variable\">--all</span></code></pre></div>\n<p>which should generate some output along the lines of</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">* bin/rake: spring inserted\n* bin/rspec: spring inserted\n* bin/rails: spring inserted</code></pre></div>\n<p>If you forgot to rebundle before running this or otherwise need to change the\nconfiguration for <code class=\"language-text\">spring</code>, you'll need to stop and restart <code class=\"language-text\">spring</code> with</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">spring stop</code></pre></div>\n<p>Otherwise, it will keep reusing the old outdated preloaded environment. And, if you're paranoid:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">spring status</code></pre></div>\n<p>For those quick tests I mentioned, just run</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">bin/rspec</code></pre></div>\n<p><code class=\"language-text\">bin/rspec</code> is the wrapper script genreated back in the <code class=\"language-text\">spring binstub --all</code>\nstep. You could also run <code class=\"language-text\">rspec</code> through <code class=\"language-text\">spring</code> manually with</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">spring rspec</code></pre></div>\n<p>Life is full of choices, and many of them don't matter. I timed both on some\nempty spec files I scaffolded (with test output truncated, of course):</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">% spring stop\nSpring stopped.\n\n% <span class=\"token function\">time</span> bin/rspec\n\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span>\nFinished <span class=\"token keyword\">in</span> <span class=\"token number\">0.66145</span> seconds <span class=\"token punctuation\">(</span>files took <span class=\"token number\">0.61181</span> seconds to load<span class=\"token punctuation\">)</span>\n<span class=\"token number\">32</span> examples, <span class=\"token number\">0</span> failures, <span class=\"token number\">18</span> pending\n\nbin/rspec  <span class=\"token number\">0</span>.25s user <span class=\"token number\">0</span>.06s system <span class=\"token number\">4</span>% cpu <span class=\"token number\">6.348</span> total\n\n% <span class=\"token function\">time</span> bin/rspec\n\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span>\nFinished <span class=\"token keyword\">in</span> <span class=\"token number\">0.59806</span> seconds <span class=\"token punctuation\">(</span>files took <span class=\"token number\">0.58837</span> seconds to load<span class=\"token punctuation\">)</span>\n<span class=\"token number\">32</span> examples, <span class=\"token number\">0</span> failures, <span class=\"token number\">18</span> pending\n\nbin/rspec  <span class=\"token number\">0</span>.27s user <span class=\"token number\">0</span>.09s system <span class=\"token number\">19</span>% cpu <span class=\"token number\">1.864</span> total\n\n% spring stop\nSpring stopped.\n\n% <span class=\"token function\">time</span> spring rspec\n\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span>\nFinished <span class=\"token keyword\">in</span> <span class=\"token number\">0.58927</span> seconds <span class=\"token punctuation\">(</span>files took <span class=\"token number\">0.36102</span> seconds to load<span class=\"token punctuation\">)</span>\n<span class=\"token number\">32</span> examples, <span class=\"token number\">0</span> failures, <span class=\"token number\">18</span> pending\n\nspring rspec  <span class=\"token number\">0</span>.27s user <span class=\"token number\">0</span>.09s system <span class=\"token number\">5</span>% cpu <span class=\"token number\">5.996</span> total\n\n% <span class=\"token function\">time</span> spring rspec\n\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span>\nFinished <span class=\"token keyword\">in</span> <span class=\"token number\">0.57317</span> seconds <span class=\"token punctuation\">(</span>files took <span class=\"token number\">0.34346</span> seconds to load<span class=\"token punctuation\">)</span>\n<span class=\"token number\">32</span> examples, <span class=\"token number\">0</span> failures, <span class=\"token number\">18</span> pending\n\nspring rspec  <span class=\"token number\">0</span>.27s user <span class=\"token number\">0</span>.08s system <span class=\"token number\">25</span>% cpu <span class=\"token number\">1.398</span> total</code></pre></div>\n<p>Either way, <code class=\"language-text\">spring</code> made the tests <em>much</em> faster after the first run, and\nthose savings persist so long as the spring server is running.</p>\n<h2 id=\"setup-guard\" style=\"position:relative;\"><a href=\"#setup-guard\" aria-label=\"setup guard permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setup Guard</h2>\n<p>I assume you already ran</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">rails g rspec:install</code></pre></div>\n<p>but if you didn't yet, do. Then run</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">% guard init\n\n01:34:28 - INFO - Writing new Guardfile to /Users/ambirdsall/code/rails/event_scheduler/Guardfile\n01:34:28 - INFO - rspec guard added to Guardfile, feel <span class=\"token function\">free</span> to edit it</code></pre></div>\n<p>Find this line of your new <code class=\"language-text\">Guardfile</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">guard <span class=\"token symbol\">:rspec</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">cmd</span><span class=\"token operator\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"bundle exec rspec\"</span></span> <span class=\"token keyword\">do</span></code></pre></div>\n<p>and change it to</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">guard <span class=\"token symbol\">:rspec</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">cmd</span><span class=\"token operator\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"bin/rspec\"</span></span> <span class=\"token keyword\">do</span></code></pre></div>\n<p>NICE.</p>\n<h2 id=\"there-you-go\" style=\"position:relative;\"><a href=\"#there-you-go\" aria-label=\"there you go permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>There you go</h2>\n<p>Now just fire up <code class=\"language-text\">guard</code> with the command <code class=\"language-text\">guard</code>. Shazam! Your tests will run on save.</p>\n<p>The little prompt <code class=\"language-text\">guard</code> gives you is an interactive ruby console, too, which\nis really handy for double-checking the syntax of quick snippets when fixing\ntest failures. Use Ctrl-d to kill it, or just close your terminal.</p>","frontmatter":{"date":"2016-12-09 08:12:22 UTC","path":"/blag/zero-friction-testing-in-rails","title":"Zero-friction testing in rails"}}},"pageContext":{}},"staticQueryHashes":["3649515864","63159454"]}
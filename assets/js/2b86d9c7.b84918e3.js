"use strict";(self.webpackChunkambirdsall_com=self.webpackChunkambirdsall_com||[]).push([[6962],{148:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>d});var t=s(6405),i=s(4848),r=s(8453);const a={slug:"zero-friction-testing-in-rails",title:"Zero-friction testing in rails",topic:"testing",date:new Date("2016-12-09T00:00:00.000Z")},o=void 0,l={authorsImageUrls:[]},d=[{value:"Fast tests",id:"fast-tests",level:2},{value:"Running automatically on file save",id:"running-automatically-on-file-save",level:2},{value:"Let&#39;s set these bad not-specifically-gendered children up",id:"lets-set-these-bad-not-specifically-gendered-children-up",level:2},{value:"Setup Spring",id:"setup-spring",level:2},{value:"Setup Guard",id:"setup-guard",level:2},{value:"There you go",id:"there-you-go",level:2}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"AUTHOR'S NOTE:"})," this post is several years old, but it's a fun time\ncapsule. Professionally I was but a babe, and had just left one of my first\nprogramming jobs, where I had encountered my first truly heinous codebase. I was\nalmost comically thirsty for quality and blessed with a project that was\nconceptually reducible to a pure function. Nonetheless, what is describes\nremains my favorite programming workflow: in a split terminal window, running\na text editor on one side, with a unit test watcher on the other side giving immediate\nfeedback when files change."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["So. It wasn't until a few months ago that I finally worked on a software\nproject with full test coverage. Now that I have, I'm a little shocked and\nhorrified it took this long: the quality of life is drastically better on\nthis side. The project in question is ",(0,i.jsx)(n.a,{href:"https://law.cornell.edu/rio",children:"RIO"}),", an\nES6 legal citation parser I've been building for Cornell Law's LII. I've been\ndeveloping that solo, so I had the liberty of setting the testing mantle up to\nsuit my own workflow: heavily terminal-based, using vim and tmux."]}),"\n","\n",(0,i.jsxs)(n.p,{children:["I've found that it's a massive help to be able to have tests constantly\nrerunning in a splitscreen with vim every time I save a file. The constant\nfeedback means I don't need to keep switching mental context to see if my code\nis correct: I can, while still in my editor, just glance over at a current test\nrun. This has utterly revolutionized how I feel about refactoring: knowing\nexactly when my code breaks and unbreaks as I rearrange things is a massive\nhelp for refactoring, and reveals bugs pretty much the instant they are\nintroduced. I haven't had to write a ",(0,i.jsx)(n.code,{children:"debugger"})," in anger in a shockingly long\ntime. I want that confidence and speed when I work on rails projects, too."]}),"\n",(0,i.jsx)(n.p,{children:"So, to recap, I want"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"fast tests that"}),"\n",(0,i.jsx)(n.li,{children:"run automatically on file save"}),"\n",(0,i.jsx)(n.li,{children:"run by a persistent server I can ogle in a tmux split while I vim away in\nthe same terminal window."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"fast-tests",children:"Fast tests"}),"\n",(0,i.jsxs)(n.p,{children:["The speed can be helped by ",(0,i.jsx)(n.code,{children:"spring"}),", a gem that comes in rails' default\n",(0,i.jsx)(n.code,{children:"Gemfile"})," but which takes a bit of setup. Once you ",(0,i.jsx)(n.em,{children:"have"})," set it up, though,\nit's brilliant. After the first command which requires loading your rails app,\n",(0,i.jsx)(n.code,{children:"spring"})," keeps running as a background process, with your application\nenvironment loaded into memory. This means that the next time you run a command\nthat requires a loaded app, like your test suite, you get to skip the\nseveral-second wait for rails to bootstrap itself\xadyou only need to run\nthe test files themselves. Out of the box, ",(0,i.jsx)(n.code,{children:"spring"})," only knows how to wrap the\n",(0,i.jsx)(n.code,{children:"rails"})," and ",(0,i.jsx)(n.code,{children:"rake"})," commands to use the preloaded app, but the\n",(0,i.jsx)(n.code,{children:"spring-commands-rspec"})," gem expands that set to also wrap ",(0,i.jsx)(n.code,{children:"rspec"}),", which I'm\nusing for my tests."]}),"\n",(0,i.jsxs)(n.p,{children:["Incidentally, I've read things which assert that ",(0,i.jsx)(n.code,{children:"minitest"})," is a good bit\nfaster than ",(0,i.jsx)(n.code,{children:"rspec"}),"; but ",(0,i.jsx)(n.code,{children:"rspec"})," has quite a lot of community support, and I've\nbeen writing a ton of ",(0,i.jsx)(n.code,{children:"jasmine"})," tests lately, which has wicked similar syntax.\nThe point of this is to lower the cognitive load of testing, after all. With a\nmassive test suite, though, the time savings might be worth switching over. As\nalways, measure: the old command-line standby ",(0,i.jsx)(n.code,{children:"time"})," is your friend."]}),"\n",(0,i.jsx)(n.h2,{id:"running-automatically-on-file-save",children:"Running automatically on file save"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"guard"})," is the gem of choice here. It reads a ",(0,i.jsx)(n.code,{children:"Guardfile"})," in the root of your\nproject: in that ",(0,i.jsx)(n.code,{children:"Guardfile"}),", which is written in a ruby DSL, you define what\nactions ",(0,i.jsx)(n.code,{children:"guard"})," should run for given project files and which files to ignore.\nIf you, like I, are on osx, you should also install ",(0,i.jsx)(n.code,{children:"rb-fsevent"}),", which makes\n",(0,i.jsx)(n.code,{children:"guard"})," listen to osx's native FSEvents API instead of having to poll the disk\nfor changes (which is slower and takes more work from your CPU). You can\nspecify any command-line callback you like in your ",(0,i.jsx)(n.code,{children:"Guardfile"})," with backticks,\nbut there are quite a few guard plugins that automatically set up conventional\nrules for a conventional rails configuration and tool-specific configuration\noptions. Enter ",(0,i.jsx)(n.code,{children:"guard-rspec"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Here are the versions of all the gems I used when I went through this myself,\nif you're into that sort of thing:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"guard 2.14.0\nguard-rspec 4.7.3\nrails 4.2.5\nrb-fsevent 0.9.8\nruby 2.3.1\nspring 2.0.0\nspring-command-rspec 1.0.4\n"})}),"\n",(0,i.jsx)(n.h2,{id:"lets-set-these-bad-not-specifically-gendered-children-up",children:"Let's set these bad not-specifically-gendered children up"}),"\n",(0,i.jsxs)(n.p,{children:["In your ",(0,i.jsx)(n.code,{children:"Gemfile"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"group :development, :test do\n  gem 'spring-commands-rspec'\n  gem 'rspec-rails'\n  gem 'guard-rspec'\n  gem 'rb-fsevent' if `uname` =~ /Darwin/\nend\n"})}),"\n",(0,i.jsx)(n.p,{children:"And"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"bundle\n"})}),"\n",(0,i.jsx)(n.h2,{id:"setup-spring",children:"Setup Spring"}),"\n",(0,i.jsx)(n.p,{children:"To generate the command wrappers necessary to use the preloaded app, run"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"spring binstub --all\n"})}),"\n",(0,i.jsx)(n.p,{children:"which should generate some output along the lines of"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"* bin/rake: spring inserted\n* bin/rspec: spring inserted\n* bin/rails: spring inserted\n"})}),"\n",(0,i.jsxs)(n.p,{children:["If you forgot to rebundle before running this or otherwise need to change the\nconfiguration for ",(0,i.jsx)(n.code,{children:"spring"}),", you'll need to stop and restart ",(0,i.jsx)(n.code,{children:"spring"})," with"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"spring stop\n"})}),"\n",(0,i.jsx)(n.p,{children:"Otherwise, it will keep reusing the old outdated preloaded environment. And, if you're paranoid:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"spring status\n"})}),"\n",(0,i.jsx)(n.p,{children:"For those quick tests I mentioned, just run"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"bin/rspec\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"bin/rspec"})," is the wrapper script genreated back in the ",(0,i.jsx)(n.code,{children:"spring binstub --all"}),"\nstep. You could also run ",(0,i.jsx)(n.code,{children:"rspec"})," through ",(0,i.jsx)(n.code,{children:"spring"})," manually with"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"spring rspec\n"})}),"\n",(0,i.jsx)(n.p,{children:"Life is full of choices, and many of them don't matter. I timed both on some\nempty spec files I scaffolded (with test output truncated, of course):"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"% spring stop\nSpring stopped.\n\n% time bin/rspec\n\n[...]\nFinished in 0.66145 seconds (files took 0.61181 seconds to load)\n32 examples, 0 failures, 18 pending\n\nbin/rspec  0.25s user 0.06s system 4% cpu 6.348 total\n\n% time bin/rspec\n\n[...]\nFinished in 0.59806 seconds (files took 0.58837 seconds to load)\n32 examples, 0 failures, 18 pending\n\nbin/rspec  0.27s user 0.09s system 19% cpu 1.864 total\n\n% spring stop\nSpring stopped.\n\n% time spring rspec\n\n[...]\nFinished in 0.58927 seconds (files took 0.36102 seconds to load)\n32 examples, 0 failures, 18 pending\n\nspring rspec  0.27s user 0.09s system 5% cpu 5.996 total\n\n% time spring rspec\n\n[...]\nFinished in 0.57317 seconds (files took 0.34346 seconds to load)\n32 examples, 0 failures, 18 pending\n\nspring rspec  0.27s user 0.08s system 25% cpu 1.398 total\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Either way, ",(0,i.jsx)(n.code,{children:"spring"})," made the tests ",(0,i.jsx)(n.em,{children:"much"})," faster after the first run, and\nthose savings persist so long as the spring server is running."]}),"\n",(0,i.jsx)(n.h2,{id:"setup-guard",children:"Setup Guard"}),"\n",(0,i.jsx)(n.p,{children:"I assume you already ran"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"rails g rspec:install\n"})}),"\n",(0,i.jsx)(n.p,{children:"but if you didn't yet, do. Then run"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"% guard init\n\n01:34:28 - INFO - Writing new Guardfile to /Users/ambirdsall/code/rails/event_scheduler/Guardfile\n01:34:28 - INFO - rspec guard added to Guardfile, feel free to edit it\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Find this line of your new ",(0,i.jsx)(n.code,{children:"Guardfile"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:'guard :rspec, cmd: "bundle exec rspec" do\n'})}),"\n",(0,i.jsx)(n.p,{children:"and change it to"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:'guard :rspec, cmd: "bin/rspec" do\n'})}),"\n",(0,i.jsx)(n.p,{children:"NICE."}),"\n",(0,i.jsx)(n.h2,{id:"there-you-go",children:"There you go"}),"\n",(0,i.jsxs)(n.p,{children:["Now just fire up ",(0,i.jsx)(n.code,{children:"guard"})," with the command ",(0,i.jsx)(n.code,{children:"guard"}),". Shazam! Your tests will run on save."]}),"\n",(0,i.jsxs)(n.p,{children:["The little prompt ",(0,i.jsx)(n.code,{children:"guard"})," gives you is an interactive ruby console, too, which\nis really handy for double-checking the syntax of quick snippets when fixing\ntest failures. Use Ctrl-d to kill it, or just close your terminal."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},6405:e=>{e.exports=JSON.parse('{"permalink":"/blog/zero-friction-testing-in-rails","source":"@site/blog/zero-friction-testing-in-rails.mdx","title":"Zero-friction testing in rails","description":"AUTHOR\'S NOTE: this post is several years old, but it\'s a fun time","date":"2016-12-09T00:00:00.000Z","tags":[],"readingTime":6.06,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"zero-friction-testing-in-rails","title":"Zero-friction testing in rails","topic":"testing","date":"2016-12-09T00:00:00.000Z"},"unlisted":false,"lastUpdatedAt":1745535817000,"prevItem":{"title":"Why emacs is worth the bother","permalink":"/blog/why-emacs-is-worth-the-bother"},"nextItem":{"title":"Building An Adequate Wedding Gallery","permalink":"/blog/building-an-adequate-wedding-gallery"}}')},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var t=s(6540);const i={},r=t.createContext(i);function a(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);
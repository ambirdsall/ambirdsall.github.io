"use strict";(self.webpackChunkambirdsall_com=self.webpackChunkambirdsall_com||[]).push([[1282],{2134:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/better_lock-786c63554cb3a5cc75918550d8a01ad8.png"},5381:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var o=t(5911),i=t(4848),a=t(8453);const s={slug:"locks-are-some-shit",title:"Locks Are Some Shit",category:"operating_systems",topic:"concurrency",date:new Date("2016-09-01T00:00:00.000Z"),tags:["operating_systems","concurrency","locks"]},r=void 0,l={authorsImageUrls:[]},c=[{value:"I Don&#39;t Need No Stinkin&#39; Lock",id:"i-dont-need-no-stinkin-lock",level:2},{value:"Lock That Shit Down",id:"lock-that-shit-down",level:2},{value:"Under The Hood",id:"under-the-hood",level:2},{value:"A Brief Aside About C",id:"a-brief-aside-about-c",level:2},{value:"Stuff In This Chapter That I Left Out",id:"stuff-in-this-chapter-that-i-left-out",level:2}];function h(e){const n={a:"a",code:"code",em:"em",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["I've been reading ",(0,i.jsx)(n.a,{href:"http://pages.cs.wisc.edu/~remzi/OSTEP",children:"Operating Systems: Three Easy\nPieces"}),". I highly recommend the book if\nyou're cool fiddling with C a bit. Actually, scratch that: I recommend the book\nif you ever write code that runs on a server or any other linux/osx environment,\n",(0,i.jsx)(n.em,{children:"especially"})," if you feel a little out of your depth with C. The code examples\nare not that intimidating, even if you don't know from typecasting or a pointer\n(okay, learning the difference between ",(0,i.jsx)(n.code,{children:"foo"}),", ",(0,i.jsx)(n.code,{children:"*foo"})," and ",(0,i.jsx)(n.code,{children:"&foo"})," is useful, but\nnot knowing it doesn't prevent you from getting the gist of the code samples),\nand getting a deeper understanding of the environment your code works in will\nmake a lot of known unknowns come into a bit more focus. Honest."]}),"\n","\n",(0,i.jsxs)(n.p,{children:["The first of the three parts was memory virtualization: that is, how computing\ntime and resources get divvied up amongst processes. There was some fascinating\nstuff in there: the API for forking a new process, for instance, is weirder and\ncooler than I expected, and learning the topography of the boundary between the\nOS and application code (such as ",(0,i.jsx)(n.code,{children:"ls"})," or ",(0,i.jsx)(n.code,{children:"Google Chrome.app"}),") is rad. And then\nthere are parts that are totally internal, though vital, to the kernel. Nothing\nagainst free space management, segmentation, or the five whole chapters on\nmemory paging, but I'm just not as interested in the kernel's implementation as\nits interface."]}),"\n",(0,i.jsxs)(n.p,{children:["I kept wondering if I would be better off just jumping straight to concurrency,\nbecause that's what I was really pumped to learn. Would I be missing out on some\nlogically necessary information if I skipped them?? (Nope.) Learn from my\nmistake and jump to the shit you find interesting, because someday you're going\nto die. So: ",(0,i.jsx)(n.a,{href:"http://pages.cs.wisc.edu/~remzi/OSTEP/threads-locks.pdf",children:"locks"}),"!"]}),"\n",(0,i.jsx)(n.h2,{id:"i-dont-need-no-stinkin-lock",children:"I Don't Need No Stinkin' Lock"}),"\n",(0,i.jsx)(n.p,{children:"Locks are what keep multiple threads, running in parallel, from fucking each\nother up when dealing with a shared bit of state. There is almost no operation\ntoo small for these little bastards to mess up, given the chance. Take this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"static volatile int counter = 0;\n\nvoid *mythread(void *arg) {\n  int i;\n  for (i = 0; i < 100000; i++) {\n    counter++;\n  }\n  return NULL;\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Because I had to look it up: ",(0,i.jsx)(n.code,{children:"volatile"})," is a keyword that prevents certain\ncompiler optimizations from happening, specifically for things like this shared\ncounter."]}),"\n",(0,i.jsx)(n.p,{children:"So, there's a shared counter and there's a procedure that uses it suitable for\ngiving to a couple threads. I extracted all the code dealing with that shared\nbit of state:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"counter++\n"})}),"\n",(0,i.jsx)(n.p,{children:"That's it! A single line, with a single unary operator. How unsafe can THAT be?\nLet's add some logging and fire up a couple threads:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'#include <stdio.h>\n#include <pthread.h>\n\nstatic volatile int counter = 0;\n\nvoid *mythread(void *arg) {\n  printf("%s: begin\\n", (char *) arg);\n  int i;\n  for (i = 0; i < 100000; i++) {\n    counter++;\n  }\n  printf("%s: end\\n", (char *) arg);\n  return NULL;\n}\n\nint main(int argc, char *argv[]) {\n  pthread_t p1, p2;\n  printf("main: begin (counter = %d)\\n", counter);\n\n  pthread_create(&p1, NULL, mythread, "A");\n  pthread_create(&p2, NULL, mythread, "B");\n\n  // wait for them fucks to finish\n  pthread_join(p1, NULL);\n  pthread_join(p2, NULL);\n\n  printf("main: done with both (counter = %d)", counter);\n  return 0;\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["So. ",(0,i.jsx)(n.code,{children:"counter"})," starts at 0, and then two threads each run ",(0,i.jsx)(n.code,{children:"counter++"})," 100,000\ntimes apiece. That makes 200,000, right?"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"main: begin (counter = 0)\nA: begin\nB: begin\nB: end\nA: end\nmain: done with both (counter = 100745)\n"})}),"\n",(0,i.jsx)(n.p,{children:"INTERESTING."}),"\n",(0,i.jsxs)(n.p,{children:["The trouble is that ",(0,i.jsx)(n.code,{children:"counter++"})," is ",(0,i.jsx)(n.em,{children:"three"})," operations, not one:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Get the value of ",(0,i.jsx)(n.code,{children:"counter"})," out of whatever register it's stored in"]}),"\n",(0,i.jsx)(n.li,{children:"Increment that value by one"}),"\n",(0,i.jsx)(n.li,{children:"Store the new value in that register"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["So ",(0,i.jsx)(n.code,{children:"p2"})," reads the value of ",(0,i.jsx)(n.code,{children:"counter"}),"'s register at, e.g., 17; then it increments\nthe value to 18; at the same time as ",(0,i.jsx)(n.code,{children:"p2"})," is doing that incrementing, one core\nover, ",(0,i.jsx)(n.code,{children:"p1"})," reads that same register, which is still 17. In parallel, each adds\none to the value it read and stores that new value in the register, and lo: 17 +\n1 + 1 = 18."]}),"\n",(0,i.jsx)(n.h2,{id:"lock-that-shit-down",children:"Lock That Shit Down"}),"\n",(0,i.jsxs)(n.p,{children:["So let's suppose you give a shit about the integrity of basic arithmetic in\nyour code. The above nonsense won't do at all. I ran it eight times (you can,\ntoo! Just stick the code above in a file (say, ",(0,i.jsx)(n.code,{children:"bad_math.c"}),"), compile it with\nsomething like ",(0,i.jsx)(n.code,{children:"gcc -o bad_math bad_math.c"}),", and go hog wild), with the following\nresults:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"ABAB 127499\nABAB 144926\nABAB 116942\nABBA 102988\nABBA 100745\nABAB 114188\nAABB 200000\nABBA 104161\n\navg. 126431\n"})}),"\n",(0,i.jsxs)(n.p,{children:["I'm honestly pretty shocked that one run actually got 200,000. (As a sidenote,\nit looks like the ",(0,i.jsx)(n.code,{children:"ABAB"})," pattern of thread starts/finishes performs better than\n",(0,i.jsx)(n.code,{children:"ABBA"}),", with respective averages of 125888 and 102631. ",(0,i.jsx)(n.code,{children:"AABB"}),", of course, will\nalways get 200,000 (as would ",(0,i.jsx)(n.code,{children:"BBAA"}),", but ",(0,i.jsx)(n.code,{children:"A"})," gets kicked off first by\nsynchronous code).)"]}),"\n",(0,i.jsxs)(n.p,{children:["So let's lock this shit down. ",(0,i.jsx)(n.code,{children:"main"})," doesn't need to change at all: we just need\nto initialize a commonly available lock, and use it in the ",(0,i.jsx)(n.code,{children:"mythread"})," procedure\nto ensure that only one thread at a time can access the critical section (that's\nthe term, coined by Dijkstra, for a section of code dealing with shared memory;\nhere, ",(0,i.jsx)(n.code,{children:"counter++"}),"). Here's the most vanilla implementation for a POSIX system:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'static volatile int counter = 0;\npthread_mutex_t lock = PTHREAD_MUTEX_INITIALIZER;\n\nvoid *mythread(void *arg) {\n  printf("%s: begin\\n", (char *) arg);\n  int i;\n  for (i = 0; i < 100000; i++) {\n    pthread_mutex_lock(&lock);\n    counter += 1;\n    pthread_mutex_unlock(&lock);\n  }\n  printf("%s: end\\n", (char *) arg);\n  return NULL;\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["No need for extra headers; as you probably gathered from the naming, that\nlocking mechanism is part of ",(0,i.jsx)(n.code,{children:"pthread.h"}),". When any thread calls\n",(0,i.jsx)(n.code,{children:"pthread_mutex_lock(&foo)"})," for a lock ",(0,i.jsx)(n.code,{children:"foo"}),", one of two things happens: if no\none else has the lock, it runs the critical section; or, if another thread has\nthe lock, it waits for that thread to call ",(0,i.jsx)(n.code,{children:"pthread_mutex_unlock(&foo)"})," and THEN\ndoes its thing."]}),"\n",(0,i.jsx)(n.p,{children:"As you might expect, this version gets 200,000 every time (but don't believe\nme...). So what's going on under the hood?"}),"\n",(0,i.jsx)(n.h2,{id:"under-the-hood",children:"Under The Hood"}),"\n",(0,i.jsx)(n.p,{children:"A huge disclaimer before we start playing around with implementing our own\nlocks: this shit does not work. Checking some value to determine if a lock is in\nuse and updating that value to secure that lock takes multiple operations, and\nat the application level, there's no way to ensure that that happens atomically.\nIn a real lock, the hardware exposes a prebundled set of operations that can be\ncalled from a C API."}),"\n",(0,i.jsx)(n.p,{children:"Depending on your machine, those prebundled operations might look, if you\nsquint, a little something like this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"typedef struct __lock_t {\n  int flag;\n} lock_t;\n\nvoid init(lock_t *lock) {\n  // 0 => lock is available, 1 => lock is held\n  lock->flag = 0;\n}\n\nint compare_and_swap(int *old_ptr, int expected, int new) {\n  int actual = *old_ptr;\n  if (actual == expected)\n    *old_ptr = new;\n  return actual;\n}\n\nvoid lock(lock_t *lock) {\n  /* while (compare_and_swap(&lock->flag, 0, 1) == 1) */\n  while (compare_and_swap(&lock->flag, 0, 1) == 1)\n    ; // do butt-ass nothing until that lock gets released\n}\n\nvoid unlock(lock_t *lock) {\n  lock->flag = 0;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"This is a shitty lock for a few reasons:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"If the lock is taken, the thread just wastes CPU cycles until the CPU\nscheduler decides to let the locking thread finish its work"}),"\n",(0,i.jsx)(n.li,{children:'It\'s possible to have a thread that "starves": i.e. never, ever gets the lock'}),"\n",(0,i.jsx)(n.li,{children:"It does not work."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["But ",(0,i.jsx)(n.em,{children:"how badly"})," does it not work?"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"ABAB 156000\nABAB 103114\nABAB 129168\nABBA 101519\nABBA 114152\nABAB 103095\nABBA 100576\nABAB 101809\n\navg. 113679\n"})}),"\n",(0,i.jsx)(n.p,{children:"So, I mean, that's a worse average than no lock at all, but there was that fluky\n200,000 in there. Without the outlier, it would look a lot wors-"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"avg. 115921\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Oh. From an analytical perspective, there are more steps in ",(0,i.jsx)(n.code,{children:"compare_and_swap"}),"\nthan in ",(0,i.jsx)(n.code,{children:"counter++"}),', so there are more places for a malicious CPU scheduler to\nfuck with things; from a statistical perspective, we\'re nowhere near solid\nground for declaring a winner in the contest of "no locks vs useless locks";\nfrom an engineering perspective, please just use ',(0,i.jsx)(n.code,{children:"pthread_mutex_t"})," locks."]}),"\n",(0,i.jsx)(n.p,{children:"There is a glimmer of hope in the book before we totally close the book on\nsoftware locking:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"A lock written from x86 assembly instructions",src:t(2134).A+"",width:"1074",height:"464"})}),"\n",(0,i.jsxs)(n.p,{children:["Seems easy enough. Take the busted lock, swap in the new ",(0,i.jsx)(n.code,{children:"CompareAndSwap"}),"\nimplementation, however the fuck that works (looks like its evaluating literal\nstrings as assembly language, but I'm in way over my head here), and give that a\ntest run:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"ABAB 141034\nABAB 128868\nABAB 149149\nABAB 133336\nABAB 165496\nABAB 130632\nABAB 163608\nABAB 163309\n\navg. 146929\n"})}),"\n",(0,i.jsx)(n.p,{children:"Not half bad*!"}),"\n",(0,i.jsx)(n.p,{children:"* Almost exactly half bad"}),"\n",(0,i.jsx)(n.p,{children:"That's all I got rght now on locks."}),"\n",(0,i.jsx)(n.h2,{id:"a-brief-aside-about-c",children:"A Brief Aside About C"}),"\n",(0,i.jsx)(n.p,{children:"Working in C feels like working with a database to me: the fundamental way to\ndefine the shape of your data is a struct: a behaviorless mapping of typed data\nfields to names, just like a table in a relational database."}),"\n",(0,i.jsx)(n.p,{children:"Now, it's more complicated than that, of course, and C is a good bit more\nexpressive than SQL. For instance, you could use the convention of pointing\ncertain fields at integers that are pointers to the memory address of functions\nand use them to call those functions (I believe that's how C++ classes work\nunder the hood, but don't quote me on that as an authority)."}),"\n",(0,i.jsx)(n.h2,{id:"stuff-in-this-chapter-that-i-left-out",children:"Stuff In This Chapter That I Left Out"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:'Various tradeoffs in balancing fairness and performance while maintaining\nmutual exclusion (thus, incidentally, the term "mutex")'}),"\n",(0,i.jsx)(n.li,{children:"Some interesting historical locking mechanisms"}),"\n",(0,i.jsx)(n.li,{children:"Some background on what the hardware does and doesn't do, and what that means\nfor the OS"}),"\n",(0,i.jsx)(n.li,{children:"A cool-ass locking implementation from the linux kernel that tracks both the\nstatus of the lock and the size of its queue with a single integer"}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},5911:e=>{e.exports=JSON.parse('{"permalink":"/blog/locks-are-some-shit","source":"@site/blog/locks/index.mdx","title":"Locks Are Some Shit","description":"I\'ve been reading [Operating Systems: Three Easy","date":"2016-09-01T00:00:00.000Z","tags":[{"inline":true,"label":"operating_systems","permalink":"/blog/tags/operating-systems"},{"inline":true,"label":"concurrency","permalink":"/blog/tags/concurrency"},{"inline":true,"label":"locks","permalink":"/blog/tags/locks"}],"readingTime":8.34,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"locks-are-some-shit","title":"Locks Are Some Shit","category":"operating_systems","topic":"concurrency","date":"2016-09-01T00:00:00.000Z","tags":["operating_systems","concurrency","locks"]},"unlisted":false,"lastUpdatedAt":1745535817000,"prevItem":{"title":"Backticks Are Fantastic Because Typing Is The Worst","permalink":"/blog/backticks-are-fantastic-because-typing-is-the-worst"},"nextItem":{"title":"Berkely DB Design Lessons","permalink":"/blog/berkely-db-design-lessons"}}')},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>r});var o=t(6540);const i={},a=o.createContext(i);function s(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);
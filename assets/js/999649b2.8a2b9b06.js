"use strict";(self.webpackChunkambirdsall_com=self.webpackChunkambirdsall_com||[]).push([[8193],{595:e=>{e.exports=JSON.parse('{"permalink":"/blog/cron-legacy","source":"@site/blog/cron/index.mdx","title":"Cron: Legacy","description":"I thought it would be cool to get my computer to automatically run brew update every so","date":"2016-10-11T00:00:00.000Z","tags":[],"readingTime":7.005,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"cron-legacy","title":"Cron: Legacy","topic":"OSX < UNIX","date":"2016-10-11T00:00:00.000Z"},"unlisted":false,"lastUpdatedAt":1745535817000,"prevItem":{"title":"Building An Adequate Wedding Gallery","permalink":"/blog/building-an-adequate-wedding-gallery"},"nextItem":{"title":"What Does It Even Mean For The Media To Be Objective","permalink":"/blog/what-does-it-even-mean-for-the-media-to-be-objective"}}')},787:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/dumb-cron-error-email-09e0a81e08dcd2a9eef201241afc1ff7.png"},1071:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var o=t(595),s=t(4848),r=t(8453);const i={slug:"cron-legacy",title:"Cron: Legacy",topic:"OSX < UNIX",date:new Date("2016-10-11T00:00:00.000Z")},a=void 0,l={authorsImageUrls:[]},c=[{value:"What is a <code>cron</code> and how does it... cron?",id:"what-is-a-cron-and-how-does-it-cron",level:2},{value:"The <code>crontab</code> file",id:"the-crontab-file",level:2},{value:"Editing <code>crontab</code> takes special config, because life is suffering",id:"editing-crontab-takes-special-config-because-life-is-suffering",level:2},{value:"<code>cron</code> doesn&#39;t have a lot of things I took for granted about the shell environment",id:"cron-doesnt-have-a-lot-of-things-i-took-for-granted-about-the-shell-environment",level:2},{value:"Let&#39;s put almost all of it together",id:"lets-put-almost-all-of-it-together",level:2},{value:"Okay, let&#39;s just go through <em>one</em> of the dumb problems",id:"okay-lets-just-go-through-one-of-the-dumb-problems",level:2},{value:"NICE.",id:"nice",level:3}];function d(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",section:"section",sup:"sup",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["I thought it would be cool to get my computer to automatically run ",(0,s.jsx)(n.code,{children:"brew update"})," every so\noften in the background and email me if anything went wrong. I thought it would be pretty\nsimple! It was not, in fact, prety simple: I ran into a bunch of super frustrating errors,\nusually because I was taking some aspect of my normal terminal environment for granted\n(the ",(0,s.jsx)(n.code,{children:"$PATH"})," variable that tells the shell where to look to find commands; email protocols\nand authentication; ssh authentication; error handling in the shell; etc etc etc)."]}),"\n",(0,s.jsxs)(n.p,{children:["But I learned a bunch in the process! So kick back, pour yourself a drink, and\nlearn about ",(0,s.jsx)(n.code,{children:"cron"}),", the old-school unix tool you can use to run programs behind\nyour own back."]}),"\n","\n",(0,s.jsxs)(n.h2,{id:"what-is-a-cron-and-how-does-it-cron",children:["What is a ",(0,s.jsx)(n.code,{children:"cron"})," and how does it... cron?"]}),"\n",(0,s.jsxs)(n.p,{children:["Cron is an old unix program used to run commands repeatedly on a schedule.\nThere are two main parts to the cron system: there is the cron daemon, a\nprogram that (once set up) is constantly running in the background; and there\nis the crontab file, which keeps the schedule of programs to run ",(0,s.jsx)(n.sup,{children:(0,s.jsx)(n.a,{href:"#user-content-fn-1-516d7b",id:"user-content-fnref-1-516d7b","data-footnote-ref":!0,"aria-describedby":"footnote-label",children:"1"})}),". Once every minute\non the minute, assuming your computer is awake and running, the cron daemon (the system\nautomatically launches ",(0,s.jsx)(n.code,{children:"cron"})," after you save your first valid crontab file, and on boot\nafterwards) evaluates each line of all of the relevant installed crontab files, running\nany commands whose schedules match on the current minute. Any output to ",(0,s.jsx)(n.code,{children:"$STDERR"})," is\nassumed to be an error and is mailed to you: ",(0,s.jsx)(n.code,{children:"cron"}),"'s default mailing strategy is a local\n\"mailbox\" originally used for pre-internet user-to-user messages within a multi-user\nsystem, but if you're fancy with the google, it's pretty manageable to teach it to use\nsomething like gmail instead."]}),"\n",(0,s.jsxs)(n.h2,{id:"the-crontab-file",children:["The ",(0,s.jsx)(n.code,{children:"crontab"})," file"]}),"\n",(0,s.jsxs)(n.p,{children:["You edit the crontab file with the command ",(0,s.jsx)(n.code,{children:"crontab -e"}),", regardless of where\nyou are in the filesystem. You need to do some config to use this; more on that\nlater."]}),"\n",(0,s.jsxs)(n.p,{children:["Each line either contains a shell variable definition, in which case ",(0,s.jsx)(n.code,{children:"cron"}),"\nupdates its environment accordingly",(0,s.jsx)(n.sup,{children:(0,s.jsx)(n.a,{href:"#user-content-fn-2-516d7b",id:"user-content-fnref-2-516d7b","data-footnote-ref":!0,"aria-describedby":"footnote-label",children:"2"})}),", or a\nscheduled command. Scheduled commands are structured like this:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"* * * * *  /absolute/path/of/command/to/execute\n\u2502 \u2502 \u2502 \u2502 \u2502\n\u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500 day of week (0 - 7) (0 to 6 are Sunday to Saturday, or use names; 7 is Sunday, the same as 0)\n\u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 month (1 - 12)\n\u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 day of month (1 - 31)\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 hour (0 - 23)\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 min (0 - 59)\n"})}),"\n",(0,s.jsx)(n.p,{children:"For any element of a schedule (hours, minutes, etc), you can use:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"*  matches every value\n-  defines a range, like `9-17` for every hour from 9AM to 5PM\n,  separates multiple individual values, such as `MON,WED,FRI`\n"})}),"\n",(0,s.jsxs)(n.p,{children:["So, for example ",(0,s.jsx)(n.code,{children:"0 9-17 * * 1-5"})," matches each hour from 9AM to 5PM on the hour,\neach weekday, with no restrictions by month or day of month."]}),"\n",(0,s.jsxs)(n.h2,{id:"editing-crontab-takes-special-config-because-life-is-suffering",children:["Editing ",(0,s.jsx)(n.code,{children:"crontab"})," takes special config, because life is suffering"]}),"\n",(0,s.jsxs)(n.p,{children:["So ",(0,s.jsx)(n.code,{children:"crontab -e"})," opens the file with whatever your have set to ",(0,s.jsx)(n.code,{children:"$EDITOR"})," in your\nshell session. I use vim, which is secretly a problem: the ",(0,s.jsx)(n.code,{children:"crontab"})," program\nsets some rules about how you save the file, and vim's defaults work\ndifferently."]}),"\n",(0,s.jsxs)(n.p,{children:["Specifically, when vim writes changes to a file, it first saves them as a\nbackup file, then overwrites the original. This helps vim be more confident it\nwon't corrupt data if it crashes partway through writing, but ",(0,s.jsx)(n.code,{children:"crontab"})," won't\nlet you write to anything but the file itself, in-place. To get around this,\nadd to ",(0,s.jsx)(n.code,{children:"~/.vimrc"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-vim",children:"autocmd filetype crontab setlocal nobackup nowritebackup\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"cron-doesnt-have-a-lot-of-things-i-took-for-granted-about-the-shell-environment",children:[(0,s.jsx)(n.code,{children:"cron"})," doesn't have a lot of things I took for granted about the shell environment"]}),"\n",(0,s.jsxs)(n.p,{children:["This isn't that bad to deal with once you get your head around it, but it took\nme a while to realize just how much implicit environment I rely on when working\nin a terminal. The main one is the ",(0,s.jsx)(n.code,{children:"$PATH"})," variable: for every command that\nisn't built-in shell syntax, odds are good you'll need to prepend the ",(0,s.jsx)(n.code,{children:"/bin/"}),"\nor ",(0,s.jsx)(n.code,{children:"/usr/local/bin/"})," or ",(0,s.jsx)(n.code,{children:"/usr/sbin/"})," or what have you. If you don't know the\nfull path of some command you use a lot, for example, ",(0,s.jsx)(n.code,{children:"git"}),", pop open a\nterminal and run ",(0,s.jsx)(n.code,{children:"which git"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["My first instinct was to make one of my ",(0,s.jsx)(n.code,{children:"crontab"})," file's first lines something like"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"PATH=/Users/ambirdsall/bin:/usr/local/bin:/usr/bin:/bin:/I/dunno/maybe/sbin:/other/things/I'm/used/to/also\n"})}),"\n",(0,s.jsx)(n.p,{children:"If my crontab environment has access to all the same stuff I use everyday in my\nterminal, then writing a cron command is just like writing any old terminal\ncommand. But I think that's the wrong approach, for two reasons:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Anything more complicated than a one-liner (and even many of those), you're\nbetter off just saving in a shell script"}),"\n",(0,s.jsx)(n.li,{children:"If you succeed, you've just hidden from yourself how things work under the\nhood AND made it easier for part of your terminal-based life to get out of\nsync."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["If you feel a little lost when working with the full absolute paths of programs\nand would like a better handle on why different programs live in ",(0,s.jsx)(n.code,{children:"/bin"})," vs\n'/sbin' vs ",(0,s.jsx)(n.code,{children:"/usr/sbin"})," vs ",(0,s.jsx)(n.code,{children:"/usr/local/bin"}),"\u2014or even why some programs live in\nmore than one of those places\u2014just run ",(0,s.jsx)(n.code,{children:"man hier"})," in your terminal and give it\na quick read."]}),"\n",(0,s.jsx)(n.h2,{id:"lets-put-almost-all-of-it-together",children:"Let's put almost all of it together"}),"\n",(0,s.jsxs)(n.p,{children:["Disclaimer: we're skipping over some hoops I had to jump through to send actual\nemails to my gmail account from the command line (google it) and the way\nthornier issue of how to authenticate an SSH connection with github (which is\nwhere ",(0,s.jsx)(n.code,{children:"brew"}),' searches for updates) in a bare-bones scripting environment\n(google "askpass" or go ',(0,s.jsx)(n.em,{children:"really"})," HAM and learn to use ",(0,s.jsx)(n.code,{children:"expect"}),"). So:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"0 * * * * /usr/local/bin/brew update\n"})}),"\n",(0,s.jsxs)(n.p,{children:["will run ",(0,s.jsx)(n.code,{children:"brew update"})," every hour on the hour, every single day, with zero\nconscious effort on my part. Awesome! Awesome."]}),"\n",(0,s.jsxs)(n.p,{children:["Wait, this ",(0,s.jsx)(n.em,{children:"is"})," actually awesome, right?"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"A dumb cron error email",src:t(787).A+"",width:"676",height:"204"})}),"\n",(0,s.jsx)(n.p,{children:"Goddamn it."}),"\n",(0,s.jsxs)(n.h2,{id:"okay-lets-just-go-through-one-of-the-dumb-problems",children:["Okay, let's just go through ",(0,s.jsx)(n.em,{children:"one"})," of the dumb problems"]}),"\n",(0,s.jsx)(n.p,{children:"Here's what was going on:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["If everything is up to date, ",(0,s.jsx)(n.code,{children:"brew"})," exits with a heads-up to ",(0,s.jsx)(n.code,{children:"$STDERR"})]}),"\n",(0,s.jsxs)(n.li,{children:["Seeing a message in the error stream, ",(0,s.jsx)(n.code,{children:"cron"})," emailed me"]}),"\n",(0,s.jsx)(n.li,{children:"I don't want email alerts every hour that things are still up-to-date"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"So:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"/usr/local/bin/brew update 2>&1 > /dev/null | grep -v 'up-to-date' >&2\n"})}),"\n",(0,s.jsxs)(n.p,{children:["First, a quick note: I use ",(0,s.jsx)(n.code,{children:"zsh"}),", not ",(0,s.jsx)(n.code,{children:"bash"}),", and there are a few differences\nin how the two shells handle redirection, so if you use ",(0,s.jsx)(n.code,{children:"bash"}),", you might\nneed to make a few changes to get it working properly\n",(0,s.jsx)(n.sup,{children:(0,s.jsx)(n.a,{href:"#user-content-fn-3-516d7b",id:"user-content-fnref-3-516d7b","data-footnote-ref":!0,"aria-describedby":"footnote-label",children:"3"})}),". Let's break this down:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"2>&1 > /dev/null\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"2>&1"})," redirects ",(0,s.jsx)(n.code,{children:"$STDERR"})," to ",(0,s.jsx)(n.code,{children:"$STDOUT"}),". The ",(0,s.jsx)(n.code,{children:"> /dev/null"})," redirects\n",(0,s.jsx)(n.code,{children:"$STDOUT"})," to the Pit of Despair. If you think this seems like it will redirect\nEVERYTHING to ",(0,s.jsx)(n.code,{children:"/dev/null"}),", leaving you nothing useful to work with, you think\nlike I do. But it doesn't! Whatever redirections you specify don't take effect\nuntil the next pipe (or the end of the pipeline if there is no next pipe). It\nmakes sense: this system lets you redirect a bunch of things\n",(0,s.jsx)(n.sup,{children:(0,s.jsx)(n.a,{href:"#user-content-fn-4-516d7b",id:"user-content-fnref-4-516d7b","data-footnote-ref":!0,"aria-describedby":"footnote-label",children:"4"})})," to each\nothers' old handles at the same time without having to worry too much about\noverwriting important data streams because of accidental collisions along the\nway."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"grep -v 'up-to-date'\n"})}),"\n",(0,s.jsxs)(n.p,{children:["So it's the contents of ",(0,s.jsx)(n.code,{children:"$STDERR"})," alone going through that pipe. Nice. ",(0,s.jsx)(n.code,{children:"grep"}),"'s\n",(0,s.jsx)(n.code,{children:"-v"})," flag reverses the pattern, meaning lines that DON'T contain 'up-to-date'\nare printed. Effectively, this filters out the 'up-to-date' error while letting\nother errors pass through."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:">&2\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The last token there, ",(0,s.jsx)(n.code,{children:">&2"}),", redirects this filtered error stream from ",(0,s.jsx)(n.code,{children:"$STDOUT"}),"\nback to ",(0,s.jsx)(n.code,{children:"$STDERR"}),"; if anything else goes wrong, ",(0,s.jsx)(n.code,{children:"cron"})," will email as it should,\nbut it won't spam my inbox with nonsense just because I'm already good."]}),"\n",(0,s.jsx)(n.h3,{id:"nice",children:"NICE."}),"\n",(0,s.jsx)(n.p,{children:"Depending on your operating system, there might be both system-wide\ncrontabs and user-specific crontab files; I'm only going to discuss systems\nwith a single crontab file here."}),"\n",(0,s.jsxs)(n.p,{children:["Setting ",(0,s.jsx)(n.code,{children:"$SHELL"}),", ",(0,s.jsx)(n.code,{children:"$PATH"}),", and ",(0,s.jsx)(n.code,{children:"$MAILTO"})," correctly is quite important, and\nworth some googling if you have questions."]}),"\n",(0,s.jsxs)(n.p,{children:["If you don't know what shell you're using, it's probably ",(0,s.jsx)(n.code,{children:"bash"}),", but you\ncan check by running ",(0,s.jsx)(n.code,{children:"echo $SHELL"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["There's no rule that says ",(0,s.jsx)(n.code,{children:"$STDIN"}),", ",(0,s.jsx)(n.code,{children:"$STDOUT"}),", and ",(0,s.jsx)(n.code,{children:"$STDERR"})," are the only\n",(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/File_descriptor",children:"file descriptors"})," your\nprocess can have open, after all."]}),"\n","\n",(0,s.jsxs)(n.section,{"data-footnotes":!0,className:"footnotes",children:[(0,s.jsx)(n.h2,{className:"sr-only",id:"footnote-label",children:"Footnotes"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{id:"user-content-fn-1-516d7b",children:["\n",(0,s.jsx)(n.a,{href:"#user-content-fnref-1-516d7b","data-footnote-backref":"","aria-label":"Back to reference 1",className:"data-footnote-backref",children:"\u21a9"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{id:"user-content-fn-2-516d7b",children:["\n",(0,s.jsx)(n.a,{href:"#user-content-fnref-2-516d7b","data-footnote-backref":"","aria-label":"Back to reference 2",className:"data-footnote-backref",children:"\u21a9"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{id:"user-content-fn-3-516d7b",children:["\n",(0,s.jsx)(n.a,{href:"#user-content-fnref-3-516d7b","data-footnote-backref":"","aria-label":"Back to reference 3",className:"data-footnote-backref",children:"\u21a9"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{id:"user-content-fn-4-516d7b",children:["\n",(0,s.jsx)(n.a,{href:"#user-content-fnref-4-516d7b","data-footnote-backref":"","aria-label":"Back to reference 4",className:"data-footnote-backref",children:"\u21a9"}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var o=t(6540);const s={},r=o.createContext(s);function i(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);
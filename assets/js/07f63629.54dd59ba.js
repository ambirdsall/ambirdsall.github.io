"use strict";(self.webpackChunkambirdsall_com=self.webpackChunkambirdsall_com||[]).push([[4008],{4308:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/rubyzip-gem-stats-18fd07477a6e003498b99bba2a49af4b.png"},4900:e=>{e.exports=JSON.parse('{"permalink":"/blog/building-an-adequate-wedding-gallery","source":"@site/blog/building-an-adequate-wedding-gallery/index.mdx","title":"Building An Adequate Wedding Gallery","description":"A Cool-ass photo album","date":"2016-11-29T00:00:00.000Z","tags":[],"readingTime":4.165,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"building-an-adequate-wedding-gallery","title":"Building An Adequate Wedding Gallery","topic":"ruby","date":"2016-11-29T00:00:00.000Z"},"unlisted":false,"lastUpdatedAt":1745535817000,"prevItem":{"title":"Zero-friction testing in rails","permalink":"/blog/zero-friction-testing-in-rails"},"nextItem":{"title":"Cron: Legacy","permalink":"/blog/cron-legacy"}}')},7126:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>r,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>d});var t=i(4900),a=i(4848),o=i(8453);const s={slug:"building-an-adequate-wedding-gallery",title:"Building An Adequate Wedding Gallery",topic:"ruby",date:new Date("2016-11-29T00:00:00.000Z")},l=void 0,r={authorsImageUrls:[]},d=[{value:"A Cool-ass photo album",id:"a-cool-ass-photo-album",level:2},{value:"Open zipper?",id:"open-zipper",level:2},{value:"Zip it up.",id:"zip-it-up",level:2},{value:"Coming Soon...",id:"coming-soon",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",section:"section",sup:"sup",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"a-cool-ass-photo-album",children:"A Cool-ass photo album"}),"\n",(0,a.jsxs)(n.p,{children:["Our wedding photographer was a little slow in getting us our images, so I got\nto thinking about what to do. I decided I wanted a static image gallery, and I\nwanted it to be easy for anyone who came to get copies of photos they like,\nwhether for online use or making prints. For prints, people should be able to\ndownload the high-resolution originals, and those are such big files, it makes\nsense to zip the files before downloading. For digital use, there should be\nsmaller image files for download",(0,a.jsx)(n.sup,{children:(0,a.jsx)(n.a,{href:"#user-content-fn-1-cd8cae",id:"user-content-fnref-1-cd8cae","data-footnote-ref":!0,"aria-describedby":"footnote-label",children:"1"})}),",\nbut that could easily be handled entirely client-side."]}),"\n",(0,a.jsx)(n.p,{children:'I decided that, in addition to normal "download this photo" usage, I wanted the\nability to'}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Select any given subset of the images easily; and"}),"\n",(0,a.jsx)(n.li,{children:"Download that set of images as a zip file"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"This is a kinda fun UI problem AND has a fun backend problem despite dealing\nwith static data. Which is great: since we're not barring our photos from\nanyone, there's no need to implement any auth, which cuts out a big, common hassle right\nfrom the get-go."}),"\n","\n",(0,a.jsx)(n.p,{children:"The zipping part means there needs to be some server code running; I decided to use\na rails app hosted on elastic beanstalk. I was already hosting the images on\ns3, and AWS designs all their services for easy interop (naturally, to keep all\nyour money going their way); besides, I had never hosted an app that way and I\nwanted to learn."}),"\n",(0,a.jsxs)(n.p,{children:["Admittedly, for the initial version of this gallery, rails was overkill: just\nwithin the world of ruby development, Sinatra would be plenty for just an image\ngallery and a single zipping endpoint. But server-side overkill isn't\nnecessarily bad: as lost as it's fast and I don't mind paying for it (let's be\nreal, my family photos aren't going to get millions of distinct views any day\nsoon), there's no real downside",(0,a.jsx)(n.sup,{children:(0,a.jsx)(n.a,{href:"#user-content-fn-2-cd8cae",id:"user-content-fnref-2-cd8cae","data-footnote-ref":!0,"aria-describedby":"footnote-label",children:"2"})}),". Besides:"]}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"I have notions of extending the app with the ability to search and filter by\nname, and rails makes building out the additional models down the line quite\nstraightforward; and"}),"\n",(0,a.jsx)(n.li,{children:"I wanted to practice working in and testing rails code for professional reasons"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"So fuck it, rails it is."}),"\n",(0,a.jsx)(n.h2,{id:"open-zipper",children:"Open zipper?"}),"\n",(0,a.jsxs)(n.p,{children:['I searched for "zip" on ',(0,a.jsx)(n.a,{href:"https://www.ruby-toolbox.com/search?q=zip",children:"Ruby\nToolbox"}),", and found two projects\nthat seemed to actually be intended for zipping files:"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Rubyzip gem stats",src:i(4308).A+"",width:"1630",height:"650"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Zip gem stats",src:i(8636).A+"",width:"1616",height:"660"})}),"\n",(0,a.jsxs)(n.p,{children:["I don't know how a popularity rating is calculated, but it has a Science Beaker\nicon, so it must be important. ",(0,a.jsx)(n.a,{href:"https://github.com/rubyzip/rubyzip",children:"Rubyzip"}),",\nit seems, is the gem for me."]}),"\n",(0,a.jsx)(n.h2,{id:"zip-it-up",children:"Zip it up."}),"\n",(0,a.jsxs)(n.p,{children:["That repo's ",(0,a.jsx)(n.code,{children:"README.md"})," has some intro-type example code:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ruby",children:"require 'rubygems'\nrequire 'zip'\n\nfolder = \"Users/me/Desktop/stuff_to_zip\"\ninput_filenames = ['image.jpg', 'description.txt', 'stats.csv']\n\nzipfile_name = \"/Users/me/Desktop/archive.zip\"\n\nZip::File.open(zipfile_name, Zip::File::CREATE) do |zipfile|\n  input_filenames.each do |filename|\n    # Two arguments:\n    # - The name of the file as it will appear in the archive\n    # - The original file, including the path to find it\n    zipfile.add(filename, folder + '/' + filename)\n  end\n  zipfile.get_output_stream(\"myFile\") { |os| os.write \"myFile contains just this\" }\nend\n"})}),"\n",(0,a.jsx)(n.p,{children:"It's not clear from the example alone what files do and don't need to already\nexist to get this to work. I fiddled around until I got a minimal POC working,\nwhich looked something like this:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ruby",children:"# In the Gemfile, mind, you need\n#   gem 'rubyzip'\nrequire 'zip'\n\nfolder = \"/Users/ambirdsall/Desktop/actual_preexisting_directory\"\ninput_filenames = ['actual_preexisting_file.png']\n\nzipfile_name = \"/Users/ambirdsall/Desktop/not_yet_existing_archive_file.zip\"\n\nZip::File.open(zipfile_name, Zip::File::CREATE) do |zipfile|\n  input_filenames.each do |filename|\n    # Two arguments:\n    # - The name of the file as it will appear in the archive\n    # - The original file, including the path to find it\n    zipfile.add(filename, folder + '/' + filename)\n  end\n  zipfile.get_output_stream(\"new_filename_for_streamed_data.txt\") do |os|\n    os.write \"I'm a dynamically-created plain text file\"\n  end\nend\n"})}),"\n",(0,a.jsxs)(n.p,{children:["To work inside a filesystem like this, ",(0,a.jsx)(n.code,{children:"rubyzip"})," needs a full path to the\nsource files and the zipfile's directory (that all throws a big error if the\npath given to ",(0,a.jsx)(n.code,{children:"zipfile.add"})," isn't valid); but the ",(0,a.jsx)(n.code,{children:"zipfile_name"})," doesn't need to\nexist yet."]}),"\n",(0,a.jsxs)(n.p,{children:["More significantly, that ",(0,a.jsx)(n.code,{children:'"new_filename_for_streamed_data"'})," business implies\nthat the filesystem can be skipped altogether for data which can be\nstreamed\u2014from a database, say, ",(0,a.jsx)(n.a,{href:"https://github.com/ambirdsall/wedding_photos/blob/383ddcb249c657bfbf944533373d7d560cea11ab/app/actors/photo_fetcher.rb#L12-L16",children:"or s3"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["This is plenty to work with: just get a list of selected images from the UI;\nuse that list to generate the corresponding s3 URLs; and then stream the\ncontents of each photo into a zipfile which is then sent to the user's browser\nfor download. The ",(0,a.jsx)(n.code,{children:"zipfile.get_output_stream"})," trick can be used for a friendly\nindex.txt file down the line, after I've mapped each photo to the names of the\npeople in it."]}),"\n",(0,a.jsx)(n.h2,{id:"coming-soon",children:"Coming Soon..."}),"\n",(0,a.jsx)(n.p,{children:"I'll dive into the design of the UI and of the server code soon, each in its own post."}),"\n",(0,a.jsxs)(n.p,{children:["I whipped up some ",(0,a.jsx)(n.code,{children:"imagemagick"})," scripts to do batch resizing and\noptimizing, and hosted all the photos as public-read files in an s3 bucket."]}),"\n",(0,a.jsx)(n.p,{children:"Certainly nothing compared to sites that make you download megabytes of\njavascript before the first paint on mobile."}),"\n","\n",(0,a.jsxs)(n.section,{"data-footnotes":!0,className:"footnotes",children:[(0,a.jsx)(n.h2,{className:"sr-only",id:"footnote-label",children:"Footnotes"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{id:"user-content-fn-1-cd8cae",children:["\n",(0,a.jsx)(n.a,{href:"#user-content-fnref-1-cd8cae","data-footnote-backref":"","aria-label":"Back to reference 1",className:"data-footnote-backref",children:"\u21a9"}),"\n"]}),"\n",(0,a.jsxs)(n.li,{id:"user-content-fn-2-cd8cae",children:["\n",(0,a.jsx)(n.a,{href:"#user-content-fnref-2-cd8cae","data-footnote-backref":"","aria-label":"Back to reference 2",className:"data-footnote-backref",children:"\u21a9"}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>l});var t=i(6540);const a={},o=t.createContext(a);function s(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),t.createElement(o.Provider,{value:n},e.children)}},8636:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/zip-gem-stats-436c77c08ace13dbf3a4077c044a1870.png"}}]);